{"docstore/metadata": {"4d3387cc-c038-4a36-b963-1cbf76a78ac7": {"doc_hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "b6ee2a5d-3af7-4137-acb1-282913d4d83f": {"doc_hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "c6f38537-21c1-4430-a68d-a16cabb6b48e": {"doc_hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "5c7213d8-9955-42d3-ba87-318f9501399b": {"doc_hash": "d1b093a787d4811af9b88d92a485c8de7c8d2c090ff005e5be880b8331aad6fb", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "5c0b76db-49a1-426c-8f45-557e5d6209f6": {"doc_hash": "6a8178841300e882d439c0f4963d0e139a2ab1835ef232ed64a42a772c10139f", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "e15e06d3-033c-488f-a582-4d9cbfe4dfe5": {"doc_hash": "9c4282910e65f09f5ba1cd2375735a41d7e44a2243ba96350d5538918cf0da9f", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "5e3f9eff-fca4-4511-9bdd-50e806995cc4": {"doc_hash": "a87587776a5e61bc4b6d59aa6f55a848a88674e54a08534740280781e9a99526", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "d599352a-d34f-42e5-84c4-456dd87136d4": {"doc_hash": "2c32e5fa9d1a4a79d708894ebc3b8f0596488353b84747d6f90067696c054bc7", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "58d7b172-b581-4425-91dc-72d8d2b68d1e": {"doc_hash": "d0889adc54fa854d6d4e95b9fd549e4f5d1d1bfe8efb9ac4565ee551e51fcc9e", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "ca88f725-88b1-42a0-a241-8758d75fc914": {"doc_hash": "82abbfb71a7032fc7d824d6832ca2ec53f7942af45dc7310223ae2f0bb09c471", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7": {"doc_hash": "b0c4c21eefaa900a5034603a5c2cfe35aac5d521c906211f495e41c3d5fca13d", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "4570270b-12e8-4f96-b843-6d3a87fbff7e": {"doc_hash": "235d07d59e62ffa7dfa628814774703d8f61c0920dd5bc1ff2f0ef5be297a57c", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "bd08dbcc-3d37-4897-b11d-5673a06ef304": {"doc_hash": "c54fac8fd2d33d7ba0ee9b8badc50e08b60afa56bbbb033a65932cf6ed80164f", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "be2ce339-abe2-4370-bb07-99c66abee3ea": {"doc_hash": "b671d4bdfaca0faee71fded058386e054d1f95e35a03478e527e7a415835ac96", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "2403f8cc-2d66-4f08-b62a-afd998c7f2d2": {"doc_hash": "3ef36c015c53f659768fd35ec7d4927d7a975c67357a02f878249789bfea7049", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "010fad0f-5faa-45eb-a4e0-62538a560fc6": {"doc_hash": "bf64c8a9657b23eb924006821227f6f321f9e827f62d3a1ccec88d4f6f5efd60", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "02d6362e-4847-489e-8947-fcee603d1c9c": {"doc_hash": "9aa93b59463f50b3dc5ed7a02fa4b429c9be2976022a735d46b3435259739a16", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "634f8ad8-ee5e-4a17-addc-e0e08fb620de": {"doc_hash": "4a5737d2091ccab774da90a55b27239492edcf07f4eb24a66f3ae3cd835681a9", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "c6509fbc-8974-453c-9c1f-d81cfed12577": {"doc_hash": "12176bfaad2567567a57f1665a117cc05d1b389f8785a054777eef836a39e39c", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "a32ce559-1f49-4471-9f7c-b3c7f8b8e882": {"doc_hash": "207bf25dfc78945c5fb5198712c48482fb5f2aac41bbcf15db5fb75effbd3adb", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "7dcbfe22-8e7c-43bc-8145-6322f630fe60": {"doc_hash": "e09d6e7d0faa0085b48a3f37eb97adcae76af6136c89c0fc6b7e37e002f1c413", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "4c87a049-09c7-4395-8ba6-3c0c31308334": {"doc_hash": "70f61ba47a22eebf275372a4e02561b5eaa6e5b923b2088edd65483c0f90df34", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "660ef555-b587-4fb4-9183-e7131608da73": {"doc_hash": "77a12769aecc1f3bcba01180d4ddbf58df810a12aad5289ddbfb8a7ea6950ebb", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "888c81d8-79a8-4f16-966a-1b4fb38cdab4": {"doc_hash": "2654ce258f0a5962d05a96fcaa071f64aba6c2aba47b7d2afc27ac2f0d1296bd", "ref_doc_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7"}, "e4ec6cec-0523-4c97-8eac-40a857dc7238": {"doc_hash": "da801e87aee12e99a9eeb16eb00b9a6642859d3c2108a13e7a146c2a9efa5c15", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "89b255f3-e437-4f42-8b37-fcb1292cfcfb": {"doc_hash": "d5cddf6217f0fa479b86b2d0ea9720c87d25b09a5caef3f00bac23489aa96a8f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5821c9aa-1ee5-42b5-a985-905cd6451d2d": {"doc_hash": "7eadf1d2391e30aa21e3e7a79c5b1ed05454e083d73c0b7b5d668fd0e47735a0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d971f70d-8f5e-47ab-b608-b8f17ff196e3": {"doc_hash": "aef87a0559fdf72115d39f9fecfab4c50077b51b0e3ec7ea65355d1465e32815", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e6311dd3-9eda-4477-bd2d-d775de7f60cf": {"doc_hash": "5c33b2343a24a0ab6a72df324264b979d4c38620d0904b1aa71f29ebb1cdb10e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "46ad0bc2-736d-401f-be71-ba554c97d6be": {"doc_hash": "f4148fa2d03833db106f658df7111c8e46f136ad3b8b45aa17ac8e23ea05c1c3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "107d7ad7-52a3-4bcc-9380-66805e7cee41": {"doc_hash": "bcebe70dd0abc0d88b45b408f71009319579eb0e314ae156cf06f506eb93e5fe", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1905586b-1736-4090-b50a-8fce79c4a69e": {"doc_hash": "73b51cffd3e12c100526fcb5f22349e89ac6379c99ab007d9acdb717b81b31ac", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "45d94581-e19f-4128-9f9b-996a2b6a3c7e": {"doc_hash": "25944d435d28dba647e04a18bb7e2f07243b01cfc1fc6db043c41c8e5588fae1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f3d041f9-a990-49ea-b03d-cd9252091b7c": {"doc_hash": "6d49fdd28279b6c2512a0797791e21262b7fe4a53c3511583210db7694d2abb2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d9d32335-2193-40f0-893e-9417d38815be": {"doc_hash": "ac44a68961af0d91c4796d80b2889352b46d39353d3dd26902ffe2f43c91b7bf", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5329b6bc-cb6b-4347-b4d8-7e6fce07d150": {"doc_hash": "888427e9c0ab11a71cb823f019e9dea072d813e2fc4caf93bfcfe5c6161c9cde", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "83f3255e-20f2-4f85-bbe1-af4ab457c49e": {"doc_hash": "6736d7c454e97b4996544e235f904b24884b80d7df3b9b021c7a82df7490dd86", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a": {"doc_hash": "fd597287f4c37dda1ca5c9ce8f915154ca5c8af95c983c2dd56397ff85ef0a13", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "34b936e2-70c4-4844-9a59-964456dfe02b": {"doc_hash": "8d36c84cd6bb4220d1a43e38c7e9df9a622f6b56eaad4f00f10d060805355c67", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "11f54bfb-956a-4b64-a11b-e098695310bd": {"doc_hash": "00b1d74b1a3288bcb448ba08b8f5b1e6fcb68ee013795d8c248452f8dff6078d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b012d190-1028-41a3-bf50-7cdde489f2bf": {"doc_hash": "1060101d4e722703620626865e9124e3acaf45c52248c220ccd23ede9af9134f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9580b141-c56f-41ba-893f-fd3c9589ba31": {"doc_hash": "b3610babc801fa849225ce2148d55bb44cab9a4a7639690adc7da0ef4b904e8c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d472ea12-44d2-4b5f-a705-7d365f2fb19a": {"doc_hash": "6e2237f1427867d21d3a7cd9bf4366176e82ccd92adcc4bfb12a3ec3bd223309", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "52cac3d0-f41b-4f3a-acdb-1a757d901788": {"doc_hash": "747b75507eff2c8a57ddb1bb37852145d48b8e97506e15ce28a6780e157f3324", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4": {"doc_hash": "be6f0cc87378ca465b98d62fd8944008e98ca7505fe949ab7cde2f12db707395", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a": {"doc_hash": "116aa0b76b63eb8d28f1f05265d7f8f5d9962c7a0f7a6a35bd0ce02515962cc8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0034b34f-4e9e-423a-a9a4-59e9d16b31cc": {"doc_hash": "104d74ad636eb6a4c25733f0a93e9a4d8a3c53eca419fa190f992bae66a159c9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171": {"doc_hash": "b2e155c681c43912460e07b8ccba91eda0042a3535637a21595695645affa4ae", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0f03eba0-de0b-4b57-9690-191c94cb3abd": {"doc_hash": "30bbcf5bf5912810553c22c899178ae4933a528fe5f2c776baccf6efc2379fb5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "915b6227-574b-459e-b3ab-b0fa2adeaaeb": {"doc_hash": "0dcd3d03665281e5a23b38eed1e396f9e2d6ed78f15bb43fe994befa49bbeb67", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3": {"doc_hash": "c42008f5b2990a28ad106441d1f8af5ee838c7efe4a5c4d02489a709cbb50114", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "74ca926e-37e8-460f-8c05-15600a59a916": {"doc_hash": "27a3383c6484050d386bbbf8f9343d427b0e25f91a1b731a6b530fb58a27031b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8c43aed9-0d90-4175-a210-591a8d8420d0": {"doc_hash": "aefb9dd8926a97a05ab85713f06d73fda05e59316ba6f420d7113a61bcb20111", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "be6efeee-97f9-4e7c-945c-0371da1404dd": {"doc_hash": "8fdfd534f283a34380fced7572d90dac224ee1a3985fbcf30c09804457115450", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fa6c6498-897b-484c-996c-158042702e26": {"doc_hash": "9d21936e0976a70682d1f40393fac4486fc82ab6f4acde5cf4abd9cd82e5a2a0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a6adba8d-d7f6-410e-803e-e3b0522de68c": {"doc_hash": "5860aceb6cf44f17d2fe6f82f69edd1b0381631cbffa9ac07c7e1e321d17c07d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "55af4377-5b27-4e86-9a5e-1a564486d794": {"doc_hash": "5439e659715863be9083983fdc712760b5065e4381f829979dd3c3bebf07f3bc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "134f7331-87b2-4acc-b634-a4c65235f388": {"doc_hash": "273074d621ccb6679ddcc8dfe2e04b0170e4e073159a7a693e6a39aeda20d933", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ad086af0-6d69-4a18-9746-c1a1f8baabc8": {"doc_hash": "3f7c908b4f677adbe1ef6b38f774bb714ec2e8536df5574edd74b40245a641a4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "877bedea-1e72-481f-b795-7f1a85efd9a6": {"doc_hash": "6f8ca03a675f1cb956bbe60a48f8a80c4b8fb49b950154f2f9e490dff7ee9bfc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015": {"doc_hash": "b16c139805084a708b59706684f2006ff2d59bbc841d9d7cc781d973eff1d577", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c6795180-11ba-4666-8e54-0ecb53ed8480": {"doc_hash": "94de933534c1a4d0e4daf6d5f1d200702d36b842c8f96af9fd0d78bf0e80031c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "32855e67-9e0f-4388-a61f-49830ffdcd72": {"doc_hash": "88e07eb9eb54dea3a0f4a516ed0bcd706cfaa749f954bb989ffbb16846b29c08", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5471c1af-2d62-4d4f-98c1-c890bb4a7528": {"doc_hash": "878899cd4087ec98edde25701c6c30902d599870942c6392eaf531fc6b473fb0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc": {"doc_hash": "c09950a4028b0dac6bdae08731d91313e31f0615dce3ce7082f65836db43d923", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4de9ddc0-de95-4e3b-8369-f457a433c903": {"doc_hash": "81982882dfbd1dd029bbce2ae7f3442c8c937adeb3be827cd56edb8025913ef3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "763133ca-a0f6-4645-bfcd-ff6b0f0651a1": {"doc_hash": "f7c52ddb6dd31921913bc354714def9f0ff3f7b2cc579ed76fff7022a38446f3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9734cbf8-3919-48fe-b5bf-33d3cfc33ced": {"doc_hash": "eb2486b32ab905c5e7a35e0a541b65837dd65d3d6a8580c93c6ad0840e02929a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7b056adf-d876-434f-8472-8552d84b576d": {"doc_hash": "ae9954434ef88950c7f3284e934e5e8a660e20ef5e8ce94c2de6ecafaa07ad8c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4d50b644-801b-470b-a6d4-58f70a6572ad": {"doc_hash": "851397c42afd9fbf436ba9956ac16281a935ecbd1d45d2c2ed804877aa43c2e1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "38153a6c-29d1-4950-b6c5-816c16babf6d": {"doc_hash": "37febc3d1a974a61f6a4c1fedaff73b9ab7a88431d3ec21e3c75c0f7ee4bbd2f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "64ed6eea-0bed-4bab-bf2c-88b71d040353": {"doc_hash": "a92711175636a4dd06df193e023e8e796017cb8d2d278a33bf5884194bbfe37e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a57d837d-e570-40e5-8bbb-31e991e116d2": {"doc_hash": "ec174130817a66dd998a28b674e1d6fcbbab510fe7bcbaa5b2993711ffede17f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "96c0b7c2-8dd2-477e-939a-c47f02a83e74": {"doc_hash": "5a10babff6afaac34a37368f8a5bd9903faba2abab51d2da526e38fdb969b738", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ad344d8b-09fe-4915-a31c-ab5119d9c29e": {"doc_hash": "eb7d586e32737124cfd3c29b7b755be95f584672b8fd26a357d3acb14c685c8b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "535c7947-183f-401d-8033-8cb7fd030b2d": {"doc_hash": "62703989e9448e407ece6e0c1fd102dfbee0076e75c4ebc48abd71188ba82701", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9": {"doc_hash": "dede1458616ce3ea4ea26b2f838d7ba567342fb735d851044d0437a7c9bfb592", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2": {"doc_hash": "3bb006905e329723a5a44add035f332de36b22ed3164ce64d53069884acc6095", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "302677d6-9ee2-422c-82d8-c4a77f7a4101": {"doc_hash": "bd7ebc8d5c4e143298097db8c8a5633c90e6e1c50641b766a447e5a23d1f0840", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa": {"doc_hash": "240a1707b48515026b9d0e225bf6aec343fdc5e60ee44fb43f638934d0c07793", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8": {"doc_hash": "3970c57f29dce52db09ca80dff3f90387bc38332fc39932d0e7648742158ffe8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bc1ba310-278e-4a94-9e98-18a31080ada5": {"doc_hash": "0d6c7a5158e61854a3c34133a65a9968085e858fafe6d4078d8203b955c5625c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8": {"doc_hash": "6bd9fe934ae27c642b2512b6afd62651c35478e50e0c4e71c66c837a408963e7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4c9269c5-076e-4249-88bb-4365580459c6": {"doc_hash": "e208c5a97d9574485ed2c99d67491255487cb58baba996d1aa888585573e7dd5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6416223a-b3d5-4528-acf5-bb4ffccfbe85": {"doc_hash": "4824680ef05f8cc152f81860abfc56a62124c38e8182152aa622222c69082d99", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7a29816e-aec4-4c2c-8f6a-f3a11d288eca": {"doc_hash": "d37726cfa1b78cea5380ebfa786d10a5bb3fecaf06113966710102329816083c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b85b6e24-f6df-4b6b-a470-ee6fcc2851da": {"doc_hash": "20bd8ad479f23128969d005b51fedaf221559a48b6c2a8d35f31ab80f64e9746", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56": {"doc_hash": "87054a84a9729db8b73f7f89a4cfe23bb671f92fc2ba10a22ec2bd34515464a8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e77b7044-6c31-48b9-b59c-5dcaafc4335f": {"doc_hash": "2952f1c99d02e350f91e3aa21abd463de47336d10d54002121682b06ec6ed9ea", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2581f9e9-1a1e-46d1-80e1-6e57054fca54": {"doc_hash": "a0c3be27fca8c63adcbc287a8a18315a3c2f487598da018b403cbc9a50c8c67a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb": {"doc_hash": "c3a2be6f00bb32b89cccead5edf103ba834ee534e5f51aded8a91b485dbc8aad", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2fa28ff6-46ab-47d6-b051-0c8a826a5d27": {"doc_hash": "ace54d7a3d24d155b27bcf9cb7c7bce6ec0ee8b941a5714b63c0a93426c52bed", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4": {"doc_hash": "37ca58837b971a423efe069784fb37f5126b72c259fe311b388ececbaafd3fb1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4": {"doc_hash": "3fe32494ba4c00af0b56a97a0b18df566741634fb05115084d9e354014630141", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fb35cca5-7833-4c3d-b779-d258881511ab": {"doc_hash": "d41c929f0cfe0aad1be9a1fe67bd86a02712f73acdea58c8b168ea4ec455eec1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5af123aa-cd9d-4868-9235-e6204eec706c": {"doc_hash": "683c56b54a9f3032d6bb3a08af766301847462f248fae47ab1c21ca21e78a1ec", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6825a01d-b377-448d-a63f-43e4f13f653e": {"doc_hash": "95d21a87c4274d895066d25ac5c43d83bf4a9464293f471e59168944fe8e5695", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf": {"doc_hash": "fca486d80edcee498c646c65fa177b1c325d1c9747c6fd5a77331232e0f41981", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cb5b8960-5ecf-40b6-929e-6376cbee6516": {"doc_hash": "fc0de4e63251ba1086f2d3cc6a780e4517c26510eaa28e9c8998583874d59f17", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7e9f4602-db6e-4328-b90a-3c10018a92c0": {"doc_hash": "d7c242a9d690ee4e6658bb7c3d3c89f751c1419b349f8ebd72ed9e91ca51a4c1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8338732a-ae04-4256-ae52-91cb2eeba798": {"doc_hash": "c76f716777f9870bff7cfa70c3cb787f63b5e2495ba128c5b217da25a4b72485", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3baf1305-2c48-49a4-9a62-ecba00fbf6ae": {"doc_hash": "883e0220f42b2ab841c36f91a5ab9005ffb771aa0a0c168719112a4f9015998f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "104ad691-9035-41b1-b09e-bf4bcd19b999": {"doc_hash": "0d6cd66a918445d352e5845e594f48ec938c8a1f60ac21a8aa1d57c2c01ec49e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "543ed356-8bb1-4d4a-9f45-6146e085c083": {"doc_hash": "d9bda5e9cdcf59527f7a2e1773903ecb1fa3e65976e99b2268e10b5f3cc82aed", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "beb0514c-9b23-4860-a86a-2e45055b5fb6": {"doc_hash": "f95efecd0bda8180f6c556920b0098737b5ccf81aff4465a23fa900d365c9e0a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77": {"doc_hash": "4b7ce8ae89e76293ddd66a0f1d1b9193ec83c32d3a2fee348ab290eb4cd09e8e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "60dc5da6-2440-4ba2-a718-7297c4589354": {"doc_hash": "000cf4a8173ae7945421dff96294d0302b335038ca570fd2f0497e28f15e1eb2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6": {"doc_hash": "7d678146ac8349ac2c854dd3bcdfc2084f42975aad422f4cf45377718b8a67d7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "21e6feac-9169-41eb-b0d0-18749a7cb54e": {"doc_hash": "fe6b97c9145635685dcd61490c96f544cf45cf3f41fb164dea3061844c91a47a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "94017d59-32e1-4cc8-962c-c7c04b126ca1": {"doc_hash": "cca46a7911c6230469ca56036ad0643982ab1e73a6a57f6abff2d255379465a8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "09272dbc-82cf-4e48-8144-0d78033cc81d": {"doc_hash": "2cd20339017f88c544346028535ca363dbdb836baea1280500e7f331b03ab566", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d22954ac-da60-49cc-b13d-bf4b7d1263b1": {"doc_hash": "0c1e368200c0029a336a4562c3a090f152f8ee1b4f16030249cbd52938b9db1a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "95edb3cc-a0b5-496d-bf5c-1a8520224322": {"doc_hash": "76332c051d9c3434695868942c849dfa9c387b6c0728e51a997fe8eba836be07", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fd193a71-522f-4a0c-bc1d-6962b6e391bb": {"doc_hash": "a294a4b0c64154420760b60a8f21fb13b39b29242d66a3a4de771578a6e3b14b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d103b0ce-3608-4719-a183-f2645553bc1d": {"doc_hash": "70e0ebe51ce60ccfb597613e18fd3e42714dc510ac28235816e6547cad70f390", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2d04edc1-6437-4098-b808-11a8c7e7cdbd": {"doc_hash": "71de46c09de925d3f9cee641daf95cbf2978829856239c41e1382835afb88087", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a034edf6-a676-469f-aa26-a867fac41e64": {"doc_hash": "1eac37f6f1e69bed49cb0f194fb8b684a6bd11f88c6712c7e8bf9ee3e002f06e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "83c8241a-72e1-4bff-899e-d441a4cb23a1": {"doc_hash": "f38a15a8980655f1569071a1b4871f65bf020ca83c1e8c031a34037f4903ee27", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1a665c6b-9a9d-40b6-a4a9-c811655462b8": {"doc_hash": "c0c72977df6a46e5ffe103af0da4a73be4cbac14e6fec96a5f16ea7b6562e2a0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "597b8bf4-8db7-47d3-a820-946d6d509ddd": {"doc_hash": "7bcbb7b362ac3e7a7195dd26b178e1e1a2b6f49224746acde08c3f302cf3cefc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6ddf095c-1289-4983-9061-15b7c3004b9c": {"doc_hash": "cd0143b194f21fdfed6902fc4558091a1f02dea362f86b7d1b705b8735924d2d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294": {"doc_hash": "0baf6c854c661bb3301cb19751201739946ecc5d6ba21d2d0bc587c54b2d60c8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f": {"doc_hash": "aec55740c02a3d3b40f5252d1fb8a4c958544bc5efae441942ecf04c37a574e0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "64bcaecf-d079-49b6-840a-dff997c7ee36": {"doc_hash": "34f2036a1316df5e089e4fed75622c5d3deb7c39e166c67f0dca4513bee1b168", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "13a9bfe1-739e-4e1a-be1d-b7b7b726e903": {"doc_hash": "d1db9e7c418b6d05e7338259f804bfb4b54f7282b1252eb5e93232a6cbbf2598", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9": {"doc_hash": "f608f846e9c1026639ed07910915985d1b38e3204437c69fe025029454da172d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4148954d-4e92-4adb-8107-d3e6aec9ba45": {"doc_hash": "25ced1df5344d6ba16de252b38f9a0595a9cec7e4d2543b9b8603ae6aee6b488", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "031e39d3-658c-428b-b973-dd1da9cb10ec": {"doc_hash": "9232ceb89cc61225e610a631316dd4b829f311070d67be3a6bcb18193fe08f8d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e5cfa07a-23ab-49cf-90d9-df40f506facf": {"doc_hash": "e8515c830179e72c5679b5047444f859fcff8cd2ee0814727d3ab5a117edf602", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "82a7e826-e524-4927-9f85-0949242e8473": {"doc_hash": "f68705665d12e74d4b980f22783316a5e6698c07a27b9af68b57d79d81754c5a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d949308c-c2a7-4952-ae95-3eabd875208d": {"doc_hash": "be8fc39cf386c6b0e8c21f8cf944c4f7c20964953aaf56e8b55d379c2c0eaee0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2": {"doc_hash": "f1d11409142a258cb9374a7dc395690084fdad69548e60590c881e9cdca336e4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a4d00f3e-2f73-4500-b131-17a5006b78d2": {"doc_hash": "f79a6bf65a9907e82706a196d587adba996dbe60cdc331b14ebd4482e200ad83", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cfd0f8e6-9ad2-4019-a317-8b23aad0e126": {"doc_hash": "127fb6707c65f733b122f88786d13451e339f5ea3308b4bdd12688576d7085f4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9f1f4902-1771-4eba-8d42-8624b0f0339b": {"doc_hash": "9582d79e27595e4d473eed16377cd1f29d8132ae537e5f946ae870dc1ad2388a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "eb4075a0-c766-4f24-9589-8a0db6da6725": {"doc_hash": "8733349cdc6f1906dc3654f041cef15bd9206d530980923b321d8201234b2237", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "08af6f2c-6674-4f5c-b593-a71457dbdb38": {"doc_hash": "afb462c9e94bfcb4f84c9c203d0c9b4b67265531309a47c4808939a6a84b8021", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "dd82462b-3dc1-4602-a3fc-6012d1df7c19": {"doc_hash": "1753a32d8ee53cdd1c6b4c0003c2a74e99f96550fce234f70e4e03fe3f51f5ea", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "99647f0a-5a82-4be2-b2ff-e18b92791af5": {"doc_hash": "f75cf3a86eff02912a8c24ee73c2cf186813169ea4e9d01c0ac3b611cb6a1484", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4b1c2e46-a306-4af2-9cc0-634f5ce72648": {"doc_hash": "9d1e29e78c177852bbc214ee825da1ab01282a3dffb64bad428dfbb06f0e398b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "77aec93c-0d8a-4087-9251-304942430daa": {"doc_hash": "924a73e6fa9790b87c5b2cae327677741511b1e682142afcb19008a4c870f526", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2": {"doc_hash": "8b5240befbc7f148f98298ba30cdc41a6a7214ad85c9fde007d28b4d14d95b8c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0fe610b8-dff8-439b-b2e3-1fd8fd009662": {"doc_hash": "deb00b7cf64b8086e114f4f1972b5810d2fd62462fb91ddae2406554160800e6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4a0932b2-5250-4a5a-823c-560e3cd23fc8": {"doc_hash": "e7b3ba995f688ba6cb9ec1af8fc02014d8787a7f601122629cfbebaf03289616", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4": {"doc_hash": "db943e1d7f96a70732efe5f4f5fb9de54582ee8c0481231b7bf32137e84d131d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25": {"doc_hash": "90be3e2c9bee0395de16be7e33fe8fb913101828915beec5c169a7d8b7757a8f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f82f96ad-e643-4731-93a0-bd84c9643fc7": {"doc_hash": "1f1dac8e525c9001219259da5da4367db37d5bc454410a23bad780184b44d07e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "99b1fb4c-a650-4b17-811c-049ae96bd2da": {"doc_hash": "2c7e61e031231b30d745da77d07dc3448b5c939957230c46a94dec018a51a094", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a4a711a5-5017-4855-b3b5-a38a63fcbb67": {"doc_hash": "4f4414ce5ac9ad1ad0d4d34b138ae9ad3f676f85fb9cb5e75ebe0141b394081a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0b0ad2af-b753-437b-991b-26b0879f6310": {"doc_hash": "d49766c26552241f879685180454fe83d7d47c82262fa632664f7a11b9f12fea", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb": {"doc_hash": "e5aa0435bc6de5f02c6541e7973781b6feaf194b1e7fd36a2cc5238d8332ced6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "933fc983-492a-43fe-8989-7308c581393b": {"doc_hash": "beb7d81348d15d8d8eb6c0ea7ce92976b2985921f5470e5ff180c01d47ca7388", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb": {"doc_hash": "e0d562818c2e74462eeed6d9ca609868d30ebd33f8d9a95039ea6f0cdb8b5fa4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bbdba14e-9e0d-4393-bd71-4287e239b4a0": {"doc_hash": "3b1bd306ebca48517d97316fa622f4e08310b27f11a60a97af910a8f64c169cd", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "55541e77-6969-4876-895d-dc735ce6f8b1": {"doc_hash": "b710961ca3405b71c06e8ecdcc2d40b3bd0579c598924a971d360e34bce86967", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "aa212227-e33d-4d8e-8455-c0c5c33f6422": {"doc_hash": "5999de48732fa973a7af2d8643e93dd559c518f7eba1ea304128f4dd07740223", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1524f24d-97f7-4cc4-80b6-564b3358c576": {"doc_hash": "6946f37329557713dfa5caad4ae7740b2fbc92d912899a4326285673a53b21cc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31": {"doc_hash": "ede475d6bb01e0bb64ae741917e843ca01500332eb8ea75d50fee301cc52a8fb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0dc53bf1-8892-4b35-8d70-1078060046d2": {"doc_hash": "66a9630b4648d2c968ca6fe046aca82c4834d32e369d077bdd9ae635eee8f145", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "095943dc-d304-4903-a29f-edfab5d96b1b": {"doc_hash": "35e3d0e145bfb249d49639233166c3df1dcb78383ff69da6918988f0e8fb2c0e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f": {"doc_hash": "b6ebc07e9fbbdfcef618fa8bedb3cbfc278c167ed12014e778d76a8423f630b9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bba69e7a-64fc-4a42-b520-7d112e622d0b": {"doc_hash": "1791ad1548371a8772acf2b02cb6729717a05817db2b28c73e8c25e0c13ae68a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e0204f56-beba-48d6-b3a6-a29288ba802a": {"doc_hash": "2bf4931724b602042ba32290da4beec32b1c4cf91b9848c27e645d94e94d0c03", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "788523f2-d1c6-455b-822e-fbcac2e2a1f9": {"doc_hash": "620a822bba3f17c638c65d3907ef70a3384ddb1f1ce9d0bac701fcd28922e881", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ec0de399-d087-417e-b8e2-72fd2d0b2017": {"doc_hash": "596897de04666cf888d01d24635bdda8c7dc89592c02242e4be94d4ca31c84e3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "411f3ca6-7a79-4e46-8800-67fb4d2a15e7": {"doc_hash": "fb61dd91c63d97b055d6e744d7bdf7380a5c1f53686ab694456bb0e283ea6233", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "da8eae06-9e1d-4618-a886-9aa2144e2eec": {"doc_hash": "4c421be8e9a7ac476eaba05252b060e2651bea91a87a477809fe3f30396371c8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "441215d2-a07d-4fa0-8df9-0896b2dd437f": {"doc_hash": "0c8e322f7d8eccc6acd4aa19359d151782a1ea1b3570d40aaa90bf8069245e08", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "12f33dab-1902-4176-87e4-ae6686752c11": {"doc_hash": "cca2d2f1bc12bda9d2f1f64b8833c98d799cec916fd01968de94ea96b84f6a35", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "87cb5a15-2130-40a6-9586-d587d1f62c78": {"doc_hash": "b55bb4a20a5871385d0eef699eeda43d90522c1a32f4eee9613d1f9aac59fac5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1": {"doc_hash": "e520afb806b371314798cb9badc0e2449e079c36175e603495461c97a91f95e2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "10108b78-e582-44e2-984c-b13f87901acd": {"doc_hash": "fdf9305e586e8440601fc21ef5800fa4b084f32d5ed6c2f10e87675657aa1c5d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0b142d71-fd14-4036-804d-6fbcc941be36": {"doc_hash": "33d3ccee9660203281c07619736911b5f4a61f0795c25109032facf32ba13a53", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6cea54fd-6a4e-459b-b49a-f2ad5f315902": {"doc_hash": "71ec7aa4a328aac42e91158d3b34bada78b1cb37df875a58d2419cc6633f0dab", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e0afd5ab-1777-4944-be12-d86aaa4e5216": {"doc_hash": "69839f8aaf571aa540bb6a77a35f2a1a92fb4e31396e88182e0a0d861ca431d1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e9ce2189-aad2-4dea-9596-a87e58b6bd68": {"doc_hash": "9536f45f5fdb646a13cbe2e4a047bece4168c2b764573551d070af19b5f12916", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "378a319d-ba7f-43d5-9503-d29450d3cb90": {"doc_hash": "e222a41aaac7d0aef72a6423019a7d0c9784a2ad9429e95905cfdc565249a472", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "df20575c-e277-40a4-90d7-d3ae8fb6075d": {"doc_hash": "73cbfa07a300a8033f4b6f6502dcb5d7c822f78bdfd3aa79a5e5576342a0c61e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6dec25bd-1ad1-41fc-968c-52f3321127df": {"doc_hash": "26e595c40e71f5bf62626f9a1f5a36399d9e8a6d9d12564e2035d64b0ba2b056", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0ec84e7e-7a55-4f66-9018-29772647fe6c": {"doc_hash": "ff2c1c147b11ec5e83b20d4cd770a7432d19244046b1b40bf29709084dba97e6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8ca52a58-d585-4b5e-ae59-9db6cf14b295": {"doc_hash": "4ab8ec5ce3e7bd039c4036f63bb287733c4c307142f4ccc30c91711b526e513d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ac811536-847a-47ca-8f3e-a2e87f4023e9": {"doc_hash": "a4fd4990ebbd7b44fc182bf74b1c9f32c06f691bb8357514d2c9222605c44058", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc": {"doc_hash": "45c83e784ba510b4daa224954e910c1fa602cedbc8b2ff4000759da1ef57599d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "aa3d4e47-9065-4679-aee1-3c2df7f6d712": {"doc_hash": "5e1af9a572460cd8120877f6bdb13826e8c550e6bd9af2ad606126a37c11cf05", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "dcf71aa7-a722-4f6e-a81b-aabf2667dc51": {"doc_hash": "d8485fc20c9957d30d75c11ef097f3e7dd84db440d2bc74e1972c900c0d0a2b3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4d63f075-23b5-4c19-8624-c9295d31b087": {"doc_hash": "57520e967ab648c991c925fc28df98166b0ae49146a529a79c595a4297a55659", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "48367264-0545-48a2-a564-df66fa906d31": {"doc_hash": "dc1371435495769faa196f4a6f5b3b992a60b1fea4aad54d738ef8d7c6f226ea", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d": {"doc_hash": "c17e6b9b800250c68867a103815a6acdd41c6ff902af7cf9f96882ce70aca047", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9046addb-aeca-420a-a03c-08ca61c5c6f6": {"doc_hash": "2e1105a76e2400949eb3b6c54b73562ae4cc051bd1a993d7be32d35e2dc773bd", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "98917491-b8c4-4068-b451-5b3edadcdf80": {"doc_hash": "0c97df96a81d1c1e37e234fdc73d73123f299b2b892b511916a230fa4042ac6b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d066e457-2cdb-4036-965e-623ad8292e36": {"doc_hash": "3c0ca11756bbbc9935a029b8f17ff4475b7944eeebfbdfd576040232c9675a12", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a2c17af1-c3c1-40b3-845e-86b0d8136208": {"doc_hash": "161366db92b06d2f12b2f48c0b2e5205753c537da200cf2835ff45a0c3ffa217", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6d8ec35b-bda4-4e5d-a785-aa106add4038": {"doc_hash": "ae7346ea1fad60add87b5aee3a2d4db0ce305081b7acc23ee6ea1095acc2e899", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e495132c-128a-4b85-95c5-258dc725ae85": {"doc_hash": "0a933e11035cf92e91bcf5d552ab077e55a57767548280f1d6d0e80e70dac6e9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0ffd68dd-4f6c-4c71-a965-124a9381b7c8": {"doc_hash": "97567a61a64e1fce1d888d84b56d7fb98755b5f9ec0dffda73efcd95341a89b3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "95b65167-f6d9-4d72-929e-b2cb1d8c9d07": {"doc_hash": "05e6daa9807f8275b162df87434bc3b94ecdc8d9e8d69af7758a4564d1df041d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "34d0fc91-01df-49f0-856e-91af0e62b972": {"doc_hash": "1108488812a987afe1702a9ff6d4e7b782f57348488466ab634a52e9e0f25aee", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e7a8ace8-90fa-4554-aefd-ccec1f015205": {"doc_hash": "09611b920accfef8a2e3fa01c7f958561174c4f5720e6a544d1171ba6d19fbe4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e666b821-638b-4c43-9f23-0f7c4cc52a15": {"doc_hash": "f34898b6482392feaff8da0854b11e5d4cc3ff4d9497cf1c5219361f1a21e54d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8035a02a-9c3a-418a-b54b-f8107e931162": {"doc_hash": "55c21bc7aee4e7b6f7ea7769054c73adb6e10dc9ea427a3813c650a659e94228", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "28d8388f-0690-4f7e-8fdb-d35a154893f0": {"doc_hash": "77809a7eaa729601d9618df16bb9abb682969229a4b17662e8fd0997fafd167b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9e84adfc-32b4-48dd-abc0-24d4811d1e84": {"doc_hash": "8fb86890cf9a25d31a880c0a5b67460880f9a092d40ff3a95fb1605f13bd8f2d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c2c07490-8618-4e26-a85e-e9d012f661d9": {"doc_hash": "3eb6b7dba12be6cc312563f31d0b8ca4cc5376b59be4512cf9dfd319421984b8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c": {"doc_hash": "c112233675750b492f03a7d779b8ef3f89a799aeb3333492ab3d9facce461b4c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8406870c-a5d4-4f23-babf-679967d7e0b4": {"doc_hash": "8e2dd8b03250f5603be19bfe282a91ce31a3a8157210d1078eccaf5b4e963198", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e92963d3-1bff-4e58-8e8a-e5b9e5624781": {"doc_hash": "3fe8343ac65d472c1d04f1ebbe3d38bd33e45db0f032dea809c1a9ed5df294c3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a40163aa-de78-45c0-b7fd-f87ff4406360": {"doc_hash": "ed851bbd3cfdae20a5b86afd332e6cae5711ffd049f5a6a2859cb3075116e216", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2d07b553-f980-440d-bcbb-7105d4f884e7": {"doc_hash": "1231c72a110803e23233510f71c0f54107d145dc9773d2302ceeaa1f59b074c6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "53715863-f339-4ca5-be49-ac2c5883d383": {"doc_hash": "2f3c20481e9eb304277e46530415aa00ff8103fa5b27d91c910990c651bae8f4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0d8a6e98-7a30-4d90-8e34-728b49da9ae2": {"doc_hash": "0f175d881e5fe07bd6ccde5267660c0d8cdf84186d5d8ce0ce3491015e1db3d3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6ceac222-7b5c-4edf-9839-57ee71c1ea5c": {"doc_hash": "67acdc6fd3d6f39301d179794237d70d0909d6ffa1cd2f04e1f587b76ed3eb8b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ca8c93ab-f548-48a3-b763-d32c61d693fa": {"doc_hash": "172ba0e14c4e1fd5ad93011284234c1f99789a30aa2409560da09faf07515600", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de": {"doc_hash": "d562dfc6b3da83244af0eb2f6c682f22bcce338a7e0ccb3e40709f3116350901", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3554bf83-77a9-469a-aa74-68327820b1e4": {"doc_hash": "9a4b451346d4c462ec7a6c93582688250c963e8de7ae42465d7e4fa9f008ca13", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1cf11199-7d0e-4a48-89ae-46e3f0b06c77": {"doc_hash": "d543e22c22768a6c43a9d65d328970288874bf6da13078d5a8ee6f964b85fe82", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "713f654d-f74b-4391-b5fe-402e9ee7bf47": {"doc_hash": "4f47b5923776204979a7615ce11892a37c9edbd5cd2531a4007d99f02e3730e6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "acc7fab9-808f-493c-9147-51d3fad7f0ff": {"doc_hash": "f0f13812ac448969b93a2606aa029723f11576ace1c8c38235e4214ad9fb069a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3c41d8fb-e581-471b-80b5-436173358cb9": {"doc_hash": "37f0d24a44fe5244d35b04afaca7a0b66f25a0d8045ce6ab945f4758734af7fb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "498631a6-1f34-452e-956e-e03fa8b2aaa9": {"doc_hash": "2264438c5d3d4aa315499f5e1e0fa66cd64caeda0ce187338000a6230d8b793e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "960628a2-2413-477f-8d23-cc7417ad29ee": {"doc_hash": "619cc83114edb8459d090f4cb5e020c110d1b4fc2ecaa9d26f8f1b472ee3d6dd", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "099065a1-80cd-4559-978a-8e982354fe2d": {"doc_hash": "b614ac1ffc8e721178d4fca5ef29199d858f22fc141d158f96814991dba25ce4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "35f1ea2a-14fb-4464-959f-765241651620": {"doc_hash": "8a36d359085d151f082dfe059b48bd27f59c5bb7e875b0f6b16ddae253320810", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fe733a9f-4a17-4d69-8af0-ba704695cb04": {"doc_hash": "20c664aa83bcdc86df621e655ab98cb8c0786e8ffbfa6a26db56f63cf5cbce52", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e28d0965-a881-403e-9c35-c6f06594531a": {"doc_hash": "8e7e2e5a4bdcac07b033e9f1e31f6341a08164c8532e6fe41ced7115f28ee821", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b359862b-a811-4d64-bf7b-90664d5bee25": {"doc_hash": "ad1d39714e92408f56ec54cc453b79336b646fdbba5c3d259bb7bb74445cf171", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ded37917-dd74-4324-89ad-9a6e5f5f4f7a": {"doc_hash": "7dd6e940634b2cb3487ca4d346f5ebade5f9bd339ef8384ed3db5186541e71ef", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff": {"doc_hash": "4dad5baadb4cd3468b7035231ac29fac4df8547f2b154c568553959876862e79", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d8fa0a7a-b77c-4d99-b85c-3e306195775c": {"doc_hash": "41594473ab76468c83fdf7c813dd9124581289459c4701c84b3b9fb8391cca20", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cfa151c9-d76d-4e4c-83d0-863705425860": {"doc_hash": "b9c17a4f5c7c43f36de4240979821f909ebf86f6805c37632d4aff693539ad6b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "84827a58-64e3-4d48-850a-71263795d798": {"doc_hash": "c9de9e6dba2d74bd1b72140e283c7a2c2478fab4afe98527605b08c371effb59", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c": {"doc_hash": "c701a9aa5a71476bc24c5602c808ca89a290cde0155322dc528ef41b3e017ecb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "243c37ad-3113-4a40-9db5-d3a7a55324b7": {"doc_hash": "0e65c3b207158403c646d6626345e97ffe97fef8c5f908b2f036c7cd77e8a29f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ca13ba7d-bb73-4917-ab27-465cee2a6a2d": {"doc_hash": "a3292e67ca7a02a6280f5f503010c67e3fb8841dc66c69add025db1dfaa9153c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "57bdade4-f52c-4db8-872c-efb0e11f6880": {"doc_hash": "8f009201e4a5643034cfafd8d4d33964ff6d698b6be0e125fb6925ccdb11878d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22": {"doc_hash": "1668a156ae00c08a3aa31061d2efd2e7b193e03da0998b8fa833f1adc42c8376", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "057c3646-fb64-4d53-bf47-1ff6f7ee59ae": {"doc_hash": "16aa270211c264f65c5877e4e3b019b6514288329e41869c13416b321f57d231", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1bca850e-d2fc-4a3b-af2b-7946e576a5bb": {"doc_hash": "f52bebfceb36dbc9187ad9fb903c77c00a62a4734efbfa58052a12b1ecad3978", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c5b97557-eaf4-448e-8add-41bb2ebda531": {"doc_hash": "2a98f102e81237f29fe520d990d4787ec7c6ccffeba258c0c67f3d396b346cc8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1bce59cb-fa8d-44a1-8c82-686707d2cc32": {"doc_hash": "d425d6ea66fafe57ceb2fa1a18b46015a490ded3e2a311cbe50735b1629596d3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2b322489-5c98-418c-aa59-ab6d53eaf160": {"doc_hash": "511d50887e9dbb6ed3bea17372f3298d3bdc2e03c0ed9cf0c7fbd8f386cf753b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "58148b8f-2a33-48cc-a1b9-2b18c98ca633": {"doc_hash": "4e69df2fb060f0b12c24b7d13fef4f48d1e4ab06ea3138549e55afb7b86f24c4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5214dc12-96af-4eec-9901-25774521d78b": {"doc_hash": "c14d1d8aeb3fc6dac41539ca50bb9ce0aeacd3651aa5b74afd72525637fda4a8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "89853cb1-f9ee-4d28-9729-b16f37118e16": {"doc_hash": "72ba0bc74b3e1f233147afd65f2ecc5cb343ba49919d97b494886643e40f54bf", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "590e344c-14cb-406c-8294-75b5c71b2a7a": {"doc_hash": "a66668145bba41b35675357d3dba74d3b953510f6173b6d145ad6421bc2e8f23", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "662ddfb4-80ef-4961-9925-8a3af6d6d8e5": {"doc_hash": "7839ba9debfe00caad718092850ef94c13f65669f384772fe13964c4598b3b26", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0a0ae59c-d49d-4310-9b59-26ca334f467f": {"doc_hash": "283853a3394df9fa94b34936502c4c710cfd0c92c552ed53111c3fb6f93a4096", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767": {"doc_hash": "4eaf45f47ee20d332aa9e464fbd1eff2c6cfb2eb2db2465ee97fc883c96e9a15", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0c996bcb-7391-40b6-974e-87f16de0d430": {"doc_hash": "45f925c63325378f9dd6138399790958403ce19f559dda44ff9afd5508b5b621", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6241709e-0424-4da0-bcab-e171420abfe4": {"doc_hash": "ed1d33cb3d6ee52647b55b2b2b2eb000fb4ef29cdecca34e110ad9d9d0c97b84", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f51521bc-46e1-4c43-86eb-3e2e04f63287": {"doc_hash": "9049ef5238e62c1f9c1e855b871951422cbfe27f4a408347e6c2497f23a47711", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81": {"doc_hash": "a60cf6a766c8b61565b9a467292cf7f35d292fffcb686acc547b5d57b47ff27a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3aaa549c-7068-4369-b75f-a30d7715a4cd": {"doc_hash": "2835d06f246fd5e0e07f09ea939876c4dabff4afaa1bafa3bea38e93f432d915", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6b134353-ec7e-4430-b8e7-a122d9040d20": {"doc_hash": "143622ed78e2c73fac851cc944e645d3dd45a33eee613f864c09af084618f647", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3157aff3-116f-4e04-b81f-cccee957f5f1": {"doc_hash": "a394073b286cc7828fc6fae86054223a570ed07dea3ea1f4c347cba89b58a895", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "620145cd-eb5c-4193-974d-4a70e7747bbd": {"doc_hash": "52c2889bb29cd58f84908335c5428cfe51a5b695ee3bfa9a873e1a30040cf206", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "79b82724-33d3-4db0-abda-ab04edd56f65": {"doc_hash": "7430516d60fed87c420f5fb7795dc383be4a4bfd85115c0cef5331af295893a9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "24f77309-320f-4c5d-9224-2bb951ccf7f3": {"doc_hash": "c0cb51713b36da5af24c3f0f08e4ee8735708f4fb3d45e09b150d4af9672404e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bb0a8f25-5f30-4757-a987-a6a6031f5a97": {"doc_hash": "c46447fa0dd4210c58828bce2dc29948247cf5b2270beaa6421e82b1d744ed4c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b8a769bf-038a-464a-ae59-985e8d0495c7": {"doc_hash": "654382371bacb7b21047af444679a5a3dde0d3fca8ebbf285129f4301e24e135", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "26e93bf0-cb48-4544-a26f-849a883e7f22": {"doc_hash": "35d7ff00926f1c3605cff4315fc4daddea93de08d0b044c33c771d91dc23cf9f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "57bcc06c-0f05-406a-9f4c-037a64f4957e": {"doc_hash": "a18322943126b4821c321b66819b94172a2539643fb3b3624c88fd4e3c738d5b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8c6ea19b-e24d-4612-b407-23faf71b73a9": {"doc_hash": "e0ac99ccea5d469bf07ed1c3da38e2306d6c672a9a311376b6fac79f2c814059", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "748bacc0-46d0-46c9-9bb3-196e14cd9ab6": {"doc_hash": "ffdbc8aa6f4732259e86857ea31059408b0b80cf9cade431d3460ab780e764e0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "456f442a-b859-43b1-9296-770c722bb961": {"doc_hash": "9b25a7293328b0a6cb799184af13b024d98f0eeba02cb15ceca09fd1d6daac25", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "78c17330-0bfd-42b5-88cc-190c63103182": {"doc_hash": "3fadb41612f8368c93f24566c32e88f0acb65dd61c50314b5d62b9fabbb79715", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1bab4f04-f762-4de5-b5cf-7719943c38eb": {"doc_hash": "d79e8ecff33a5a65d6065bafd23a74cfaeb4929695c1097df48a04b66a89feba", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "501aecb1-0b9c-4c4d-bede-05b03e78bf38": {"doc_hash": "43141f1a8f29d63265430d8f0e5a239043be58f7b10ba1ddcfcaa3956988f7a9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2": {"doc_hash": "740d747ad824d422c407e6ea93e7b67a045979a8febc89667bef56fda4623914", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4433f5b2-256c-4457-bbe4-d278aa9538fe": {"doc_hash": "bff2c687a9d24e1a4cb384b5869829213f0b94ff1867981287e1b9a2ef973d9d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b7f767b0-4195-444a-8d6b-7ab09bf3b682": {"doc_hash": "367ec6270a88035d9fd756e0c012a9065bcc2f49e35576646bc014443a499e8c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5": {"doc_hash": "2f70e023ce41ce3fa6c018d9f6559b690cfcab7ee386859a62ef8c1198ea3415", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3": {"doc_hash": "d7ec5b4dfa71f9dfb44a7ff284b181836ec27f7f321e33fa2f1f6a8e3388a845", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5671496a-1628-43ee-a9a8-54774d75a24b": {"doc_hash": "b275295e9e6dd7a2c56ba52259a86130413f90bc88e3b3e2e03c59f7d4dad51d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9c326316-647b-4aff-a227-cc717c5cc122": {"doc_hash": "61d3c9ce0d67219b197184dbecbc39166f73fc5d1284ff80cc795aa2724ba247", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "97f6f4d6-56ac-4e35-91fc-a2c73078f07c": {"doc_hash": "d2deed09c85fb6bac924ab878e7077f56b96a11b4c24262f4b7dc32f51074a01", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5c6f41f1-454c-4bc5-9908-a300cb647814": {"doc_hash": "836bbe9efd6e8396d8a8a019b3397a181d526213e8ba4762a5cc9080310f4188", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "70549b44-86d5-4600-bf79-a3e671936e29": {"doc_hash": "8303a6678c646cfdd7b7b01021bbfa4b864a33478c499a00f9e368aaa0fddb75", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "65e526d0-0e2a-4400-812b-876f64458384": {"doc_hash": "7734320fe54a5d346d41ca85e1f489f1d5f3714f1f2922b8c3e1d0a0b7c14ec8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f24022e0-e1f6-4a52-8752-a26719bb3cb2": {"doc_hash": "b585fb37b092bd1db784aa31f1235483f1f4634479dfb8eefc6d438f065a65c5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d06f9ca3-b2cc-4773-85f7-9183db1bb8af": {"doc_hash": "900f9ea750b2d0874ceeff7af029fe81472bc74090aa1407ed3a277e6c3bb354", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "89eec67c-46d1-4b22-9c63-94346eb2838b": {"doc_hash": "d7d0f1d659d83bca70c8d16048640f6a72acc9427b4d4a2a250fa67051eeb9aa", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a605e421-dcc4-4afa-85ee-89a288db5d3a": {"doc_hash": "5cf58fc6e5c7e34bf3b4dc48f38babc2a714dd7b7967ec85992666ec8521aa7d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b": {"doc_hash": "ab28855e2c207680674d224134b470b533b04e0d111d7b9c6e26aef61b1ef3e7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "25d9ac87-180a-4db3-bd68-5fb9f2446902": {"doc_hash": "17f01f338cddf26663ba33741ccc8fccb15c75db309cbbef1566064d32069ed8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c": {"doc_hash": "097b7c19b4fd93e6bfa2625b9d2d22c8ad240aa719b0e3af8886e34c816e0fb2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f8c87dfa-a189-442d-83d6-962496cbdb33": {"doc_hash": "a1d902ca938ed16d1d3aa50873f53d4ead226f8e293d20fb1490d309aa7a396e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "35c814f2-19ab-4320-835c-10736be26a3e": {"doc_hash": "cf7112178191a572443fd53f62f2d93ef25725cd279cb3289563839fef57bffb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a6895752-fdf1-477c-b3f3-5ec04c8df762": {"doc_hash": "19a2c07d9450c68bf7ee14ce0280bd9b88fafa8a6604f6023c24437ebb061f3c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1945a342-c010-437b-942e-4aca09cf784d": {"doc_hash": "c58998d5107b461f7958c570e18ae677a62b9ab85f2e21db61a31bbb07178d08", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de": {"doc_hash": "677c5c335d3beef904ca44abbb7718e2172a87ad2036cd46924ebeeaa7dcd143", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3": {"doc_hash": "ae0d5a27c747cb139c21b4f9982467da4e153c855a06893e9f9040648c65d471", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3": {"doc_hash": "623d106af236b99eb6bd291ce62e2d665061a9663f6388c3b759ff74d53ae372", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "79abd010-3a73-404f-92c5-6c7d53ade8f7": {"doc_hash": "a7a9b5ad53dc0d0a5a0041a8f42414416f0b01c031a7dcfa2ef570a89d922f9f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d3df132f-0b27-44db-9b80-061faa504b67": {"doc_hash": "aa0b270ecaf60015ba667b471d4745acff9267163bbf2c7be83059dc0544662c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f73f9d95-5c1f-42f5-9f9c-f937e929c23f": {"doc_hash": "9117020a6105c77f04fb0214a2a2c9248e90d8285565515b3141e9406d2c5968", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9218771b-bf1e-44f3-999b-b3fe84067247": {"doc_hash": "feff25c3fefc9b372559a1505a5d650ae7bfdcadd772c55a7a8fa22768e272c0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c": {"doc_hash": "261708ead83213e948382125e9d9030004130e8bf45fa7438985820761f04523", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f86095e1-5348-456b-8568-76fd77fd09b8": {"doc_hash": "579c2ceee796503b404bbca7855af2e8794991d4112b84fb013d2b1b4a7195e8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c8784db6-0a2d-493d-9c90-be0a6ac71036": {"doc_hash": "2dddd7c495169ca516058c0bf9d7a6c0a9bd2b42c5e08d06fdf01785aea0d10f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0675d9da-cb75-430d-99ec-38d765a840de": {"doc_hash": "5be11c9462c9cb7ab226ede930d93adde06d2b64d4c752c5dfc4ac3690535143", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d270b055-0ab2-433d-a1dd-fd005123817d": {"doc_hash": "eb9adf772322dc31a2fa55216916534812030377375ed7d528bcfff3d9091927", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "09de3d53-0008-411b-a2ea-2b4156d2de6f": {"doc_hash": "ef248dbb67dc8dbf2895c8c7b6d2f9dc7acd34d23b5349042248cb187e0700a6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "84ba11b0-dad0-418c-8b37-8f865e1d0743": {"doc_hash": "bfa3e98ed0fdc0f66853277f13e7d042a673f5ef082cad78523948ea24dd7783", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "606e2612-cd8d-4126-9b0d-c0ac4cb148e7": {"doc_hash": "afe6023367e0dfc3f189822ec1305bde48d62dc6bdf95915163316d8dadeae39", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7a53ea1f-57c9-478b-8c0c-818872c024fd": {"doc_hash": "f58cfb5d30328dc444d0f9c640d67f5684f28ebff5713522be9358670f0d8be2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "289ab008-1e36-4d84-a2ec-ce3fdd947cae": {"doc_hash": "924ca351fb347fc62f23e9a84259c742c134958b6c7dbb131f73dc3e3838aeb9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e0afff3b-1044-4c3d-b448-0b0d532cfe70": {"doc_hash": "9db850e3656f74c51cd3eee7869ffc3e923af87c94f75483b28be3b49a628228", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c7f5b3ce-2815-4eaf-b04a-d6d23d451049": {"doc_hash": "0a42806aafffa51f5562c3fd2b2cda5a58acedb18d56ab5e113e3ddc037a3b91", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "caa20907-9305-4e2d-a70e-c3fe4ee2073f": {"doc_hash": "6caa883c8d79e7c62c83c4e459180715cdad63e74e58536c8b2cf592f7004688", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c78edbbb-3545-49bd-b784-e44e443973f5": {"doc_hash": "34217afa43efa6e448bbec7053232f7ebfb09a3f21100637ace0cd5328f648b0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "290a11a9-2638-495b-89e5-cfb9ed3d86ed": {"doc_hash": "17af93d43b9e6a61e06895e43e9865e0d8e77f0505fbb8270bc069a2bfcf371e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fd6a304c-1da1-481b-a909-b87341899aa5": {"doc_hash": "e75a11ee25037e8770be9820bffdcd2fb45d5bd725c3d199608eb751fb739445", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a": {"doc_hash": "ba23ba9f7a9718927e265b96b28d594440bf38cb25486f49f62d2dbbc0fe2e70", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4954cf34-3a02-4c6a-94f4-88d0b33a00e0": {"doc_hash": "a6c2ed64825265669df66e2d592a733fb9c203f3c99380eb09c0ed23977b22b3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0155cbeb-1ab3-4158-9036-d3c926c00206": {"doc_hash": "9d899d674290b013b7dfb6996a70387942c435aa6aee8065150ad67e40cd619b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "97242db6-b061-4453-9d20-67cfc43a9d90": {"doc_hash": "db815499c5a0286af9b69b9954f8351e06d4e6dd44824535bbaa7b92e6f815e0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "24c8b5bd-5a32-4d42-a51d-84e627bcca17": {"doc_hash": "d4625dc2c8e9a34450ad305b93ad3a57416f19bfbf08891692352bd0727ea58a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2e0cc0f1-bc75-4ad7-826e-68d99882a50e": {"doc_hash": "d58cff7dae2b4539dba9005c1334964eb69b0d676c4a1b9e1924bb10fba13658", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50": {"doc_hash": "e11b88fdb0218c8b0e885a53e82a3097afbc4733df94a04831c92a5044bd1b7f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2": {"doc_hash": "eca0b0101730bdf48c674b8782f08310433149d7a467f18afc4864836b6ae35f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce": {"doc_hash": "ba0bd85168bd265519607f838fce8b80a3268891b5159e8ecad0f97b1a024458", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3400b622-640c-4514-a25e-a68691e3c343": {"doc_hash": "1a632bcf3a50fcd17b8796145c0bd1acf2afbfba0764e741cc39d8ffcb45d59f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "463fb124-4016-46b2-8e15-832b8281bd91": {"doc_hash": "9d35db57795faa23f78cbd2737351badfb711d6353b579bedffc995648ec2385", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "514c3283-9c7e-4327-8e1f-82d0bf0c5c68": {"doc_hash": "f0754f475b9b7f3c256d72678194991b433aafabefd8265e82a723e8082c47ab", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "532676ed-8b5d-4734-81dc-cf356ac825e6": {"doc_hash": "ce9fd76e9123c650a0109bed3d419941e5272795c818de55cabfc71f0667b9bb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d76268d7-4943-421b-ae35-2c755c165ac5": {"doc_hash": "3fa289cfabf1d3c66173e9b76270438eeb79cfb768040da3b3c3e2c918bb7fe5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4bf28811-1f6b-4ec3-8d45-118212c31f4d": {"doc_hash": "888e581f974e35efba997cf3712653091b3436156a3656997701b1406ebe50b5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5": {"doc_hash": "050525731a806295f6fa3ce26dfc695d6a08ed19c0a1f82086cee1b2ca145fd1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "57628bfe-d8df-4979-a55c-2971e0a841fa": {"doc_hash": "0f55f0a96a06b95f8442ce55913e9150603f3a125f06965dd797aae7c4681e8e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6e25327d-870e-4326-bf2b-d03d6d0991c3": {"doc_hash": "d3fb6f9ea599b69a13db4d68d13918efb127b624f22c7de606342e13cc6f892b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf": {"doc_hash": "13f5fe6b30ee5d3d006f4542b6a814a8eba3134120200bf341fb799833174f78", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e6ef620d-5c40-4c63-b223-118c47a666aa": {"doc_hash": "957bb2d2fa7d2727975fec322d39f830ab2d2f16ab8ad837c20505f10435905e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f46fcc2a-72f0-4892-91f8-fd454a27f23b": {"doc_hash": "b5925b3fe7b7139724c7a8fb9e2678448c6c2a35d9ada492abbae1afb9d81406", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6e387dea-7e1e-4563-b577-860c14b776aa": {"doc_hash": "3f2009c592f561599b94ea4cfc86507e0c35850519ae556afbb7473519e45e25", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d7b500a6-cb8a-4506-9351-7f9dc77d62b8": {"doc_hash": "e9a08d4727676dd0eb70efc5d0eb7df51cd867245c6f81a079df52d830c54b91", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc": {"doc_hash": "1710d2e2bb8897aa61195ae4931eee461300104553711777d432c6f0381bd7e0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "44429442-8eb0-47c7-b375-bb2ce61967a2": {"doc_hash": "3c7e8892f874e779fb2f892f4cc0337ec070fe6581841294a83e9e4a9b591e89", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "15508e5e-0581-42c4-bb89-c1777f8aec41": {"doc_hash": "150e92f78dc5fe7b10b0e17e148f4313b54f403da77e7df76a2e8bf095e6fe4b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a12b69b9-32d3-4654-84d9-5ccf44aaab78": {"doc_hash": "762eff7b5117f26c0fe98e244a84dbc68d1247f14fbafb8baf949c6694363b85", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0f141aa9-1d06-426f-a202-9312385e98bb": {"doc_hash": "b431898d88050f8bbb4ef41df3f795885d6752f1a74972ea751b389686703ff1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "af85b08a-f762-4125-a462-e2afbc382b44": {"doc_hash": "4ad16870c9f7d1b5179172e157e225479e2497040990dafbd82f6bd8eb0ce847", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8f092559-9129-4bcb-ad8e-ec1d02c05105": {"doc_hash": "2ad65e06f53cc69f604c48ee9e0647d761f95e91c8968cd3019f036dad0dec6d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e": {"doc_hash": "7aebd88eaa326d40eb8f47ba9c28375886cd14489816f6192d2f89163d43bd03", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ef0f0af8-58d3-493f-ade0-e1cc96ed5471": {"doc_hash": "3223ecab65e3309f45385010ecb19d26b71023bf05b9c6fb65288a60a5498071", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4910be66-9ce7-4b97-862f-ec1430d3b0a6": {"doc_hash": "b57548a20f295e81006b84195759ad99ca01ce90f4209697e25b6ef7efac2346", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d21a99ff-d968-40ed-9a7e-851effe1401f": {"doc_hash": "0d903c22b2c75d950943fe94821614285bf7bf3348ba1172043794d28738ad71", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2432c949-d88b-4f2d-8420-eecf72cea2af": {"doc_hash": "d5cbd4688e3ad75835582653063cf2467f78334e65cced2bd1b91c2117030814", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0e61edcd-513b-4a73-ace0-cec982777d5a": {"doc_hash": "ee65f62024be701be4d5f479f289a01a5bcddf14bb6b5f444667198c0d13db90", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d24dcf59-7884-4cf8-8837-ad3765b8cf11": {"doc_hash": "6c5825b476b111ee455651c433095644d6aaee2eb2932c6388906b5b16bf502c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f803dbff-382a-42fd-96e4-bdf47ea5c6a7": {"doc_hash": "593679d586d437816b6a74523656abf074ccd3ba537997e9b62ee5c69c062c18", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fd104015-ba87-478a-bd72-84d720e0c592": {"doc_hash": "47685377b3231798d517c6c16cccc8d226ec448319f62c3740e76fc0db55c776", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6f266d74-7a01-4642-8932-8d5f09171b4f": {"doc_hash": "566578b27eaaf40752ff53728b405782068b66dde6f382997da77b22045dfa17", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6982ef1e-1f3b-4380-b2ff-2744579b44b5": {"doc_hash": "c448a9cbc2c40f1842c17a887d022eeb0a46770509802c2869f59335b341c13d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8f6bbd47-204f-427f-a4a7-e49c25ec7720": {"doc_hash": "495ad8eff84374506257a98373a35e4fd108bd8059b0fd6ec85f83e975361d33", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7865805b-71e2-4d98-85ea-d90e918c2416": {"doc_hash": "dbd5721e6b6eddec1e7e8b27d48a14532b04c8de2d51737b80d9e6301f3ad8c5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2b2352f9-72b9-4f78-a12e-03cafd82ccda": {"doc_hash": "de24136df7f56d71d076a0a96744a314c900c6e21c802a39b7799b3e4f74e3be", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7885748d-4824-417f-8e71-0b3b85e2bc96": {"doc_hash": "cbaec04d0aeeea311ac7df4e3b5e91b12f53535c8225361ebc723ab69043abf3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b0b6d920-d008-49b3-b8a5-eced697cba1c": {"doc_hash": "8e5f7ac0a449b8ce98f7fa4946efbc54bb5d1cbc97474eae92b3452c5bb09eca", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f027d6b4-e46a-4fc4-a746-d37a9a307717": {"doc_hash": "7bde9cd76eee767e00360ef1b91cf385ba6ca4ccd3c3b6b4339215da1351b9d2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5": {"doc_hash": "eb6067317a3993101c1e112080c31a56fb231b66f85daf5aeeaf001c3e23b445", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c": {"doc_hash": "e643c11bf6370d991fdd1ad5880d67ed6ff2fb4e9381301c6d9107f0dbd77dec", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7d4dd152-ca51-4e2f-92f9-433bb245eb23": {"doc_hash": "f59d714ef85a8a47da114931b7347184e383005759aec3fe814de5546fac4b52", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "46a4cc72-a262-40fd-982c-05f328ae66dd": {"doc_hash": "3d4cef70b98207cbc3356f3b786a1368a224b513c02cf2827f14e3c1d1bf3858", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a608cc95-c465-48dd-be03-eb94cdd1dbd5": {"doc_hash": "6206f4cdaf460c56b66e2426cd99d4432e8265fda6faf2547ba9d99a5d5b4346", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3e33e71f-b85e-44d3-9f7f-57bd04119494": {"doc_hash": "26b027a84e6fdc8e0ed11e5fae2c9e679b0d438269f9fbffe050d2e77f480625", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53": {"doc_hash": "a6e141616e57d88ed20ee6e4bc1536410219baec59e13bbe980b294ba4d9e452", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7f0412a6-7eeb-48e0-8d34-2147df48f6dc": {"doc_hash": "145a7c8cd842225df498926423d7619708076bc16efa4f6eaec5a1621f37ea42", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75": {"doc_hash": "b2032a1db02e2163fd5a8e40b6867fdd0a95dfec4d30f8e1744b069bf2b6d1d8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "edea8ca3-456e-40b8-9167-d24124f2631e": {"doc_hash": "05432195ebb1fc10a93f85c0517e9de10bfec1dee2697de2e5c1d75514d1e822", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a482a5fc-63d2-4747-a196-f1038aca092b": {"doc_hash": "e015f86d412455598ccb9bf087dd5cecdc49412dbb1187483113ec03b24abe31", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "24e907aa-0358-4f45-b5bb-49c43cf8c6b8": {"doc_hash": "5e3428d6b164852be781117335e8951fba5c82a4cac0e1d42bdc6d6c06b0417d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9a57b1fc-8b95-4e50-a1b9-8d1c10815161": {"doc_hash": "708e596979d0f6a644cdab1c10fda8584f7dad6ed16f6eb649686e8898fb8cad", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bdecf87b-33d3-49cb-a600-360d03e9b8d2": {"doc_hash": "3d9ab7987c8cc179c2022b11359085c36861e456711c6655dd0cc25afd952311", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "17fd0707-1c16-463b-8bc5-f4709ae55110": {"doc_hash": "749b2c372914458135308a7765bd56101b43c696db1112dad4247fbe7613038a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8f2454c6-856b-4c9b-b808-6219a0542efc": {"doc_hash": "3c454ff6ad78500067c47cbd373f48541dea9fd1b779cbd2f7103319e1c78d12", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "84d11f64-94dc-48e5-af36-a4577d050866": {"doc_hash": "8f7cbfea943fc9ef815dc79b132935f51daa46128ea94c4aceb03b809ea89986", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de": {"doc_hash": "324ad93a71949ba06fa010f75b1c6c1ffc1bdf9cae672691eb6f6c036cfc49cc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "81f09c74-4561-4332-b0ff-9db38cc28347": {"doc_hash": "80b898a6e180a6f7e4443bd7e7a82478bd6bc9924c33503c7bd23cd53eecde72", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0": {"doc_hash": "2e15565cb25de3d5a385a21c5a23a8ef3fc3cac03d51ae7d5210a1890dbb08aa", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "daf5e4ca-eea3-4dcc-945e-144e75e1719d": {"doc_hash": "96f56f8614692cdbb9b9150995925d118640c085f942da42b3d89c9ffe313b94", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7ad4a1ee-b3a0-4513-b317-7020c6fd75da": {"doc_hash": "f3cef0c3f04dc777693b69c10b92b09ddf6b8bc20943717fdbe22d9390a31f61", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "54560b36-c390-42c4-bf35-861f4c2b5599": {"doc_hash": "d8fa7cf0a4f992383745d20640136ccdca69f39b3ba5d81a9505e38b115f0c1d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "16b1d492-bb21-42d8-bf6c-68d079c32b89": {"doc_hash": "faacf778f67d6cf4edaec256aa3a52ed3f0ef806a60adca214927764531d0b3e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f9e3ce0f-13c1-4e68-8c63-602006adce55": {"doc_hash": "7c52f15ae130c027ef10611c952b99731a7b5d7e122026e50f5f82b7e3a968de", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a3d1df40-6f0f-4028-856d-7e57a08b5672": {"doc_hash": "8c4eacd054ee8b9a23a09449200f8c79f43598bc407afee2803c870381325ecb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "218d058a-1b68-4c3d-98fb-96746e238c29": {"doc_hash": "e6d1db26f856a9ef9563070afda9029eeefb6c9cbe9617ddf137d65a37fb1200", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c57047e4-7fb3-4405-b7cb-2c7b4cecd722": {"doc_hash": "ab864c0dda286224a1686d8a10d8317fc9ed81d70a0181423776d680c180e336", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "67f5825e-d5a9-46cc-9734-cd7497c3baf1": {"doc_hash": "8f8400313ad566192f6377d8a527db903fea3933e25d8d8ca351b4cc5750dd9d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196": {"doc_hash": "cb1278d9f79596e61748a91b0ea658831f2e7e05f1856e0a377cbd1dbe99ca7c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "19d95440-989e-45c2-b87f-02c0f664fee7": {"doc_hash": "fd2016a624eebaae9f331868e2941395b5020168f03812c5b5c04645d1bd7ff0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9": {"doc_hash": "caefa0540530db6a435d0c6ca27ac9234f6369ea059fccc6822809054c9fa51d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d58f7ddd-b2b1-4341-9331-986618345a8b": {"doc_hash": "e6e728c0384277bb5e8f1feb178995853f90091261750a7811d124fe58fb6f92", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7211d210-1003-4227-87b2-d2ec1f0e7798": {"doc_hash": "c87270f0f8c754d31b0863d98ee8ea257581ab309b3e26d4bb988edd020bb1ea", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0b446208-8b50-4e8b-af3b-58788a7956c9": {"doc_hash": "4d127a9977a789c8c95affebd8c4979c9ba8a73be65872cd63825078f727f52a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8e63e2e3-4b8d-4476-a415-d9027fb7747f": {"doc_hash": "e1d96366c3ee94fd35bf56495f1bd66a610bd2772454fb677af2c2be77130015", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "868ad7f1-e837-4dda-a74b-692b0cde81a4": {"doc_hash": "69bfe2e0c9e8fb6b15ada943a61baf0d1d47756458bcdefa0360ae66ce6d8818", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "353eb641-1503-48e5-9172-fe9629aec9c8": {"doc_hash": "1b574c0db9506330c91afdada1269cea3eadb368dfb8eb03e88b457d2b9477a4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "81f3b61c-656c-47ad-b6fe-33154626a6b5": {"doc_hash": "d318a3a80fdb68b3ada3fada98dcf5c742c645f4a3a891e77c4870a866e1058e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "17efb5fb-a9e0-4119-9d43-24e3663d088d": {"doc_hash": "88fa1bdbc63ba4db5df96a17771daa087a830b71dd62740406b61aabff1edb5b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7753b39e-99cb-4de8-ae3d-f56f575a5c7f": {"doc_hash": "8e6cced56c17896d902aef2b9f83f78b27eeea1ed174c55dcd18dca740aa5dc7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e0a4e287-e6d1-4257-958f-d6337536e3dd": {"doc_hash": "f677518b63ccff6805629df6ae6386fe736dd4d6224dae4b090f7efc2cb18804", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3850ab66-8bc5-4b1e-b46e-e84386a203c9": {"doc_hash": "8ea9e8aa0fb2523c88bb046dcbef56aeaed0ba20cdaa5d2a7beb269e82a6c4e4", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "11b0bfa9-6732-4b08-9ee5-869e76274a83": {"doc_hash": "48c36d16baf21c13caa9cd6711b49a4ec8531b2601f56929c4117f0161cb4ef9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "43a0c982-8138-4314-bea8-0ebfebf242ea": {"doc_hash": "f1feff1b74018a53429f171680aab4193f0787ef5f3ddab469e0545df8d85d46", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2": {"doc_hash": "de1023320c41b70723dbeec025b22eaadad2d92e59369f6ae0fb10138760d4b9", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "16b9d8ee-253a-4f29-aa9a-1629aad57eb2": {"doc_hash": "2040d66fa17a1c71060ed60212a611374255ef2ebd3e475b0ddf3bedbe6c05a8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "171cf179-468a-4632-90a3-90922536712b": {"doc_hash": "996382d8b96e8400a956500e2e3104669a3f9e588b4874fc866aa7a645f91b8e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0aeb5376-9498-4d11-8e3c-dc3f85882cd7": {"doc_hash": "c320dc953e34fffc653774b2111f140799dec6ee5c1092c46724618ee5c0d233", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "253706d2-33f1-4359-8e84-dc46b5cc2f59": {"doc_hash": "c83b022cdb15347e7f8b545ea22cf5e54d202806ac8bc3f923c8f9c8b6743c6c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b41d94a6-83bf-4041-b558-9d487f4e66ba": {"doc_hash": "ae9ec1818bef8f431ef6c3505f13200c3a1ee2ab6305fe9564e4b625057cf9bd", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "16828afa-adca-450f-93ca-8728c83fa833": {"doc_hash": "ccdc3453955a519ffc0f26c629c147aa794ba36077ccf4eb61bff7ea3cc65d32", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1520c8c5-b1c6-4d4c-8324-69c7c1834e85": {"doc_hash": "beecd999807307dfe5a075573bac6bf2c423c309399eb1d14c8e0b2c67de2e3c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "3b7792b9-53ea-4106-bf44-e7a33ee7b642": {"doc_hash": "077d395707f8d7be9f776aefb529a6ceed3aaa9270a6267bc5d94b80da427507", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "78e7cdf5-faf4-46a2-baf3-d820e40b8574": {"doc_hash": "ec9e56cb821a03eaf746a130f2996e29d1a2d1defa46b4af43530f2dde40b87a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a1ad0615-5348-4fbd-985b-be4a2339c9ef": {"doc_hash": "68b7b9bcc0911e2d9e1d61f4c57bf4aa868db1c966fa42d9581263dad61c76d0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d4b5225b-646d-4cd1-981f-ecf69e6edb07": {"doc_hash": "5a307991be7082c24c2fb4569deb46905f4084659d9a9335bdf20d97ff9977f0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "edfebfb2-a7ce-4e21-8306-926c1048d2f7": {"doc_hash": "dc90cd3ceae6305b2eb905788da035faf95f490f0cbd5ce9a3ce388cfad39681", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "668af9a0-a955-4425-90e4-39afef40e0de": {"doc_hash": "7641c458f5590f81bbdf1c2800b951cde9ab1bf2a0e6080d8b2b7ebc6c7f8e00", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2e8a7104-4d11-48d9-a394-311bf329b5cd": {"doc_hash": "89d73669f877f4e832da8000dcc1295f438247c5ac8f4187eae72400c2d0e39a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "70b28e79-7a7e-4887-bd39-205ca0d7ae4d": {"doc_hash": "7c259c5fe8cc9d76c7d5242237ae60d9a9e41012ec9e843299293874d823f046", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e686bf20-07d9-4192-80ed-bf91e01c5d2d": {"doc_hash": "a4e5780c728e4bde4bade2afd5573e8c6fa9c932a79c4727fb0080e9d05c9377", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c80bcbef-751c-41ec-a783-6ec202548f42": {"doc_hash": "8d12ea49c7198bb9101558f99936663a5bc5cea2015a80d48e2dfbe4d1ce869f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f764403d-3695-45c4-80e1-07901c3428dd": {"doc_hash": "e949a920f4372265c1edb07e51ce6e5db518b01e22c8bab49e5223d3aa122b83", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ae9987d6-ad34-45d4-bf96-5ec5718aee12": {"doc_hash": "b73e5aea06b6399a66689f967759c7bf4c084dda4f27be472bdf29646348e31b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "add29601-5205-4f92-bc3a-88b5f0cd84df": {"doc_hash": "e4b5880f783f2766132aac98e4ef87a4559599aa9ad20d58b671c8e4d8f93bd1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "40372cb9-3aaa-438b-b124-c62006010334": {"doc_hash": "b96c21d15fc64150f5acf05ea573555712ade8a5db59fd95547e074ca10bb4fb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4a2725ef-2862-48aa-8d25-01f625130c6e": {"doc_hash": "a5e298305f30acdc6bab2b44e17b234b3a223d83fd721ecdeb0c37ea5df936f8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d4265bb8-f55f-4f50-8ce9-3cf3543567f7": {"doc_hash": "b77ea0149cc9132ca50314eb2eae54b61592a048b73415084f5b758a097155fe", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "319b0b44-e912-4e10-aa93-2e167cf86e24": {"doc_hash": "94101dc7617f8c263881e0708a3377e81eeda5c7f0323ee66e21fb24cfb5937d", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "32ddb322-41f6-4e3d-96fe-853f2850ef8b": {"doc_hash": "d591681225fbce855169c0c9e482fed0915394a7718d013fda515bea2fabd5dc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04": {"doc_hash": "2ed01b413d3798d99caac662f0383ba8f7528332bce09ed539df158601c59cbe", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "aaf30cb2-7643-420b-9064-ab6ca003776d": {"doc_hash": "fead48c8e85d4a1a331f2a0ebb5f5efb1d47c7d17f71e81e973a509d0da991fc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c1a4fddd-52cc-44c0-b2c4-020defcaf56c": {"doc_hash": "2028de7f7d3b8c075e67311897d0f710225d9c398e2b87bc8409de80d0113663", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "dbf0a499-9bc9-417a-b5fd-a6718fdac943": {"doc_hash": "c30b31022936e5cdc1b9c604f39934aa6831edb47d8965a6eca33a20142436cc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "65f72616-235c-4e38-8de1-3ba896e7c2e1": {"doc_hash": "808980d2add51f2ef63af206f24b177d2c9ff0afcd951298c26de7c961df3b5b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "155f65b7-75fc-4446-944e-e498f4d77238": {"doc_hash": "10ca5cb5a83e44731fe15f83490dd0a44c112988f3fe3fe4887f5f4dacaaf5ad", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "29233394-3e75-48a0-aa7a-4665fe2c925a": {"doc_hash": "8f8302b42e8f2d8cbbd3936a964a1aa285b9b830595922b826c6a65f4a2a802a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d47b9eed-b380-45a7-b64e-1d66172da6ee": {"doc_hash": "f766a9ed4701c9279bb2fe786c1e7349c924add8e12f2b88382840ba7107a2cc", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "44f0b2a3-3e5a-465d-893c-31743c152105": {"doc_hash": "27f21205fea1503ab57a7701f498d961500e998b73a6843ea7635108d08c39ad", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a562e13c-99ac-422b-a42f-8117d2f87abe": {"doc_hash": "0de9a1c59978c57ebebcd51726d88a04fcd90df1fa06c0a3294e6b1b28d8b5d2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "53918cb0-5e80-49e0-a6d1-4731f3266065": {"doc_hash": "2dffdd072e4f405c11040786c65aa8954f27d8b8bd47601bf736b63d9138d2e1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ec6c7e32-2c51-45c8-aba5-9aae1549fec0": {"doc_hash": "6717ec6f71c0d3294d8dbca52ad9fa1b7fa2b12d97b5ae707304a3938531fd22", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f": {"doc_hash": "b576899fa28733f82160ffa128003b99273bfa4d76becfdf175c922aefcedd5c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "bab7f7d9-793d-4a00-9d0b-bf704356803d": {"doc_hash": "8bea3826a389a74579d411fef415eed4d753f3744c924452bf96f405342e4b69", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "9bd19d37-ef78-45fb-90ea-eba59d81a937": {"doc_hash": "036cd5de312353b6a8433fc17df105efa0b7241c9ebfa1a9fda0390142266423", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "dd152bf5-c218-4cbb-ba45-1b1e764f0c55": {"doc_hash": "aa0b4c96d844e59762d1d63209d981ce8bf72bf95ac95ddd002931dadb3657e1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8fb231e2-4f90-4b14-8468-3d07ac773290": {"doc_hash": "47334eec201ef95a46f1fea9282474962652084d2c2e7ec95358c5d5df489a1f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a3b2df74-c935-4ea8-be5f-ab288d756178": {"doc_hash": "92c02c802442a1c074d484bc55d94cae19d827dfa5feed1e214a171960b9fc5c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "01d93d25-7867-46e4-b201-3ee6f1516a87": {"doc_hash": "74d2cc0f5dd9c413489e223c75fd29a27e2b08249771aaa9d3e579c55107d8d3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4d19174a-40a9-46ed-a89b-355616066ddb": {"doc_hash": "f4c9c9f42913e399b14dce60a3031aff7ba6faae0c260a1069ce1ce6eb650352", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "20d27745-ab79-4f2d-816e-3104ea19f2e4": {"doc_hash": "ace2e13605e0982fbf30e571ee367710e9ffc441fbc35b14ddcaba9b3e2e87d7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "408b0757-c397-4a23-b836-8413cbb8a120": {"doc_hash": "04a56107208aafa6de6b225d8b6d825927b5c96666a6386ce5154eaa1b6b7584", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b": {"doc_hash": "d2185fc6fc7d3598a29a513f0c94226c705c082e45d83d3c013438eaf3c64249", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "ab939ec0-2e0e-4e41-aea3-9c960e73e267": {"doc_hash": "b898d9b5409ef37981523aa4e381183ba14e87ff6dff1ae3d1dbd36ffca39aed", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "40918a8f-eebb-4afb-835f-2d091811b08a": {"doc_hash": "ffa142c046f4dcde304395e8f2ce44baa72ebb96672b03cb7a93aba10d292a80", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f488a81e-d260-44b3-93de-213eabd52706": {"doc_hash": "2b0295d8b51a20f6414d90bbb41fef8ba36601eb95888485055eff9d8e198ad6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d7135721-670b-450e-a297-c358a9b74c97": {"doc_hash": "2551a38ccf6683f5f952f6fb55e51e522ee52af08c2b6622ce5b9c7edcb054a7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "0d38986f-d6d7-4d44-9128-375ff38e54db": {"doc_hash": "67e38126a137b95afe1e06356281698beae1e8a900a4e4dc96eb898a4aa44021", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "8cac867e-9547-4cc3-b860-be7802b0ab51": {"doc_hash": "767f94df79cdc468c311dc352cd16cb4ba10e81802068a75d5a914a8a128ec8c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "00521dd2-3c1f-46db-b732-1208f10f3d84": {"doc_hash": "074da263cbc9e2e1e81fcd28c5d4f3b079edc479c25a34021b541ba539b3a9ed", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "d62f6427-b444-4436-b923-9807bc98a99e": {"doc_hash": "ea8521c714126ade1f1d43ae39a36d01dabd5c54deeee7c2e2b392832293b4b3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "17dccfe7-959f-4289-abc2-e4473af0f6f0": {"doc_hash": "a32e53c64cd4322c7aa8c8e168e15bafc5d2027fdd9a34e2a6914182626adeee", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "b152c13f-7ba3-4446-b2ad-7c88fbad7255": {"doc_hash": "673cf1cc5d5a56a8d0f3640cbe5db8a4edecd6f929aa0065b9f38a1e24e8ff5f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "26cd940b-e8b7-4239-a43e-83b3281aba37": {"doc_hash": "1d1e7b585648fabe0169e248ac7de9e4e22fd24591f4efb751ee8965b696bfd6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd": {"doc_hash": "3dfe9a13d2ebcf94ea53ecfd354a205ce8f8364e6583f4c6a72b2d3515df844c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "63d52fdd-238d-4e14-97ea-b6902d4d43d9": {"doc_hash": "155cfd460cb48736b1bf71a907466ebca35ee9df6d5c7a6deef77a37f12abfe6", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "752ce547-a0b6-4c98-ab51-b1b24383af77": {"doc_hash": "113cdf4b2e01402c9ceeb51d5920e65f26f8fa59335e4d0cbba1e6cc0120fb1a", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "5908c659-760b-4994-a57a-b6d413067a1d": {"doc_hash": "750f4a4669aa30222c7fbf365441fb6ceb8919945f4b0eabe156b8769971f6c8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "f9ec66e2-d616-4cc8-b08d-7a01065a920f": {"doc_hash": "d3913487706d1b51f0fa8d721800b4cc7f570c83bb12b61633ab7c99639ca51f", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "6cb3212b-05d0-4279-967e-9e0d7010703e": {"doc_hash": "dfc11c9091e6a213380dbc07ff250cdbc480a7f608d45feca455791de5d92264", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "c8b18fd3-edaa-4957-9fe3-70cefb75a219": {"doc_hash": "150aadbb2f1cac86d2ab6de929f4097d305219e7b8113ad88a2d82f4a5f3efb1", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "709622cc-616a-4b2b-b4af-1be817596fa9": {"doc_hash": "7b6006207f230874b117f8c75b0d8e4861d81f994dfb672d9429d1e2335c17ba", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "2acf1a42-ed1d-4f13-9005-d21b27cb406f": {"doc_hash": "1299eb05fa98018669b1f813ec13f284a470158dbc9e853ecb98d60c190bbd09", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "4239f2f8-03c7-490d-a01a-eba7cda70794": {"doc_hash": "7769867e4aaca793b1a02cab35e60d429c7b51f124e52ce736ddf32d542f0f24", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc": {"doc_hash": "7e6818c4c610645598f3719a31e9ce8c12312d74712db2754e8040747a78e3f8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cdefedec-9863-4033-9f58-0fb02ea90186": {"doc_hash": "d31ab5bf89f38ad3dfb22bfe626f7f591a444f9b8813d5f0e3b5d7f219b8e473", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4": {"doc_hash": "15096248c820bc3a0a10c0e0a6012d1632735537e4a15ea776b9ebaa01107082", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1c4f62d5-c087-4442-871d-0f254d498802": {"doc_hash": "21b578af7be7cdedffb0d4d11fc10ef9788443b09a7b8633591c174abee7be71", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "697efad6-3110-4218-bdcb-1c228b50d21a": {"doc_hash": "e2bfb9f4e6724b70506542ae58981ce875ce166ed4fb6e562e6dd0010d717be2", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "58c7eaed-dbab-4144-89d3-c9300a5953af": {"doc_hash": "ac50d4f2363bdc1947eea15fd6997fe8c36eaf3be8e2abfa89d99d0c4eef48c3", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36": {"doc_hash": "30a58c3a038f0fa81ff2c996a2ce158a0b75fad0df998b6928395fa2ed3fcfe8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a03633b1-2fc3-408f-9ddd-d832989d7584": {"doc_hash": "6190e79566fea62f11e021710b3419ca8bc933527691f6de4b6044d2361b485b", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "92883c5c-bc5a-4abf-81f0-48e0708f6aa0": {"doc_hash": "6c8b3fb3ecf69d4cc91ea3297584d2f15fccc758e241f8ddb8e5ac42a8b27535", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "dc516459-8dc2-4cb8-9980-9b8e61ed7fca": {"doc_hash": "fb2b45f53231264896a124ad3d2dd86a0703d0c617fa3eeb510c5daeb5878cb7", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "56ccd739-12b5-44ec-aa91-611e4b51506c": {"doc_hash": "5d2feaa2089a219d2dbca2e29943abfad9a92a00d6f91530f94b307e87d5d0fd", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "df8d2576-645e-4c4b-9c85-017c79c2748f": {"doc_hash": "00ed93fea3e08f60708ea26313519db6e445908387a5bda3467e731c5d871ab0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "e6d0141e-7999-44a0-83d1-455981ae31ff": {"doc_hash": "9a61e299d08536301e952094d13346c702766e0bb22b7a8351f0d8eecce2c0f8", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "542628c5-247c-410a-8f88-d2f8b2b4447e": {"doc_hash": "677eea8720233b5dda4a8e0fce9e8b280f588ee1d69988b7ea860521149312b5", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2": {"doc_hash": "a3cea6c76997e42d8eed3c29ec98289b8506a9c99aa61122e847f0e92259151c", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "27a3ec13-1887-458d-ba26-545296203652": {"doc_hash": "8e308f6c4a24c385489440f3b987cd7d42c3127ad71094d47202ad92506223eb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "27244290-e0d1-41dd-bfba-545992691d71": {"doc_hash": "1385acfae916a8f54cc99e9b4167706ca2080bd1c33a510c6c3c93965469368e", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "7ebace69-15d2-44d1-9d39-3a370478548e": {"doc_hash": "41ef2d5528589e1e2aeaa8fea92cb6bd09734f59007189aba4829a271fda1e24", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "258c1075-4e40-4b9a-adf0-d983d66b790c": {"doc_hash": "45380edcea95615911017b7edb0be6a20997830689f10dec8913075167b7f722", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a76a9ace-ab5f-4f4e-beec-8151f85b60aa": {"doc_hash": "9de3221658f085d1d7ac3cc7082c3e3413dcdfab289cc3829143f2a6b9e640cb", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "988cc3ed-e7a5-4b6d-88ea-e537ccc364dd": {"doc_hash": "27d92d6dc9b1a026315a50bb76806ec2355b001f6491dd859f80cc4bffaf89e0", "ref_doc_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f"}, "a0a58d4f-d41c-4d99-8d61-9e5b67eda42b": {"doc_hash": "118446f8d001bd1821a2b8df2ce9a94ad448a9028292354334125f5644469c52", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "5e867e6e-1b67-43f0-acf9-597030caeada": {"doc_hash": "e24ab373adedea487103688699e29a760eda022a51418c84ee0a63522cd8df19", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "2c006329-564a-463c-bc72-8cd76f8cbaa3": {"doc_hash": "0d5c0c792178636f37b0143bf7261a812a58a732ba98ad21f2559eaaacc73566", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "21d42433-9020-48b9-9030-a21655cebdbe": {"doc_hash": "efc546dbf2df6a1c6b9beb57865f7dbe5ef94950e444f3d8d10c3c53069b4f01", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "c9f0c1fa-9976-4ccd-b10d-86f186d34c67": {"doc_hash": "6c4c961fa95fd39728ca09ab06b53e2f350b05d14bb264fb6a47f685f3cf2fa5", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "a3aed14b-b2d8-4b0e-9c00-893d3b72561e": {"doc_hash": "5f18239dbfc280254637cc3d012d38164e1b6468332366e71fc68cd8f966dcef", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f": {"doc_hash": "d3af55775005123918c5e8772764b3b70e2dbb5852601e241d1fcbf893d8a348", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "2c60cee0-3c5b-4760-9faf-26027afcd2e0": {"doc_hash": "7b65e84c14f12af090ab53521438955f30165884eddf1daaad848a082619613d", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "28b4abb8-de97-4bf0-b20e-d41cbabf21c7": {"doc_hash": "fcf35c6752f18bc748039c6d0e1fddf2f4e0c548dd2111e36ff5016b14d1dd56", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "c94417e4-61f1-4545-97fe-5fd42530da37": {"doc_hash": "b3c7f8fdaf626713a1dc9ed58ae770486a7046896ca11afdea3b7ad025d1f8dc", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "b937cc92-b505-4a7c-be3d-2629c06df59c": {"doc_hash": "453abae942680a681884742f13770803932dc602e059af9194242b5ed9fba3fb", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "eca07f71-af5f-47d1-8c1c-78deba7637df": {"doc_hash": "2526263207066c27c09e77436f91bd2816c045c7c9258a8de015d02fa9b8485a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2": {"doc_hash": "60ba6701772d7325efeb40c7d42c4ae9e70e0de0a193cf3ebc71ca1369e8b4f4", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "e041cf85-5bb6-47d5-a0f8-3d3c8f547025": {"doc_hash": "24c1ae621806fc7e0e13e3c7f11da2fa48687567adc8e0edf88f4d8f1fccfdd4", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "2a1af6cb-041d-4c86-9f44-9a130adf20b7": {"doc_hash": "f43c830da39c2222bea36ee6b83f7aceb4adca63211e4f1122646b5e60a30215", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "631da2d0-4782-4beb-b02b-8dfa0d1664ec": {"doc_hash": "f3a8b77caf1a610960a7a497ca1573633cf001e94dd36f0bef561efc1ef9e56a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "d76bcd6d-9def-4f3f-bd23-518d72311940": {"doc_hash": "514ae5f6ab11937ae36a54d93bdceb4448430e29b6c34b025bc1fbef83905539", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "beef3088-792c-4802-8a67-2d955e94665c": {"doc_hash": "fe388184fa2c72dd4c455c1267a22b430819578b19975fcd33db1e5cfa37c21f", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "11661390-1048-4e56-97bc-7c6779c65e7f": {"doc_hash": "57aab6e04d1cd667bb42253a82a20e7ba83762dac8815698f2ae7d0c92ace210", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "4a5d1358-b36f-4426-adab-7b8f3dbdf50a": {"doc_hash": "2805da35f96d4e7641d797b98d838df9daacf946ef469fe3b78e701e9e8402a0", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "78c39e61-4f77-4657-ad1d-b19693fb7be9": {"doc_hash": "caa0f6c84e782d7e96cee036ae0fbe0015ca84f8686037777c5be0f69ed2050e", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "10116b06-2768-41a2-8c27-85a2fcfa9ac7": {"doc_hash": "e0d8d9c7e1b13a32720a1ce2c0b37b5cba24b12e6b282fd539938e81e4c9ab39", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "4cd26ab6-fcde-4333-bf48-d3a3153eb08e": {"doc_hash": "455d8ddb0134cd3428e4196fa63be01fe0efb7f960cddc1ba5b9cf8ffde1dcae", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "541c7388-228c-4530-8be8-b096a7f6de4f": {"doc_hash": "246ace98ec1f0494258598bfb64582a50c17d9bbe9779aa2575e606f1d2337c0", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "b010e078-4cd9-4b00-a10e-f5e080d711b9": {"doc_hash": "201314f68613902a9fe05733757819342d6a643663bf6e24868c90d642edca9f", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "5766380f-047e-4bb3-aeff-1439f1825321": {"doc_hash": "6213c187b6977ecb71aad83edca52eacb16017f6a477d860d651f4b54c18be86", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3": {"doc_hash": "a85ad169faedb0cff3ab7b77b1729c5da9a96f9382cf3f9c7a9884517dbe2a0c", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824": {"doc_hash": "df8b55d15bb0e443351ef385f4eea31d1e4d2110c3b70e47ac218a89ea54dc4d", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3": {"doc_hash": "6fef870a963098418d76cfefd0e6d4e3bb406ef9dafd2889a36b298c4a1a5259", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "5e39a3d5-764e-43db-9ac1-115986f817fe": {"doc_hash": "4db7440a9b638c8cbb48be3890502fe1b8f778d5a87ef3018e333f987a090c89", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "8a6047a5-1b6b-437b-a28c-22693d223eda": {"doc_hash": "45d0cd64f555aed5d04b906ef597dae5572003ce9206345c386dfcda021716c1", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "6bbfbb2b-9927-41a7-b644-27482eb95d82": {"doc_hash": "9ab4a25640498821ba2ec476ae28f857bbde1fba3492fcf1d7788bbf02552c22", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0": {"doc_hash": "59eec83b9d791afac00912ac23448325a8cff9c20260c55069236b984a54cc41", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "7071e691-c6fa-44a3-8c35-92c59c0f0cd8": {"doc_hash": "ce29bd758ec1b767a09ab9f82cabaec2d33b8f48e25078e7e0e5bda689f35a3b", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e": {"doc_hash": "5955c91a75c63117318493fa8afbf567156db246ebd2f52b9c2c4a36833a0f62", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "b87f1f02-25fc-4794-825a-4542dfc81a37": {"doc_hash": "f34ce35446925ecc882943d68634717ebfd399c3b5db6cd217d50e4c765cde00", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "0b500aad-c078-4271-80aa-e01de1bafca9": {"doc_hash": "e4a3c1cbebc99a1d00e1e21362b3e415eb7e6e3916b98e7e334c776d997b19be", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20": {"doc_hash": "9b123f4a3da96451ba2021c864d752c2b927868be91d1ab03e1ac1c10041684b", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "510c62de-0e71-48b7-9bf0-130bd2f6c6a4": {"doc_hash": "1f98d6341d201cf7d42546caa6c66ea7c2d2e5202895085881dd54158449d663", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0": {"doc_hash": "1f03ec584a5b3b0896256ce1c9af79ce28e576d852bdd35dae9eeafbc54083e6", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "13b69377-ab2d-4412-b40b-ea34e2360974": {"doc_hash": "fd3c0b4ec82c475e56d1d27f25550cd111c2599695cca563a7c374cfb3f2af3a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "6475c08b-89ad-4f27-823b-b56467d3070d": {"doc_hash": "ca0888b331ef73713b18db3ec1af64bc71969cf3a7b2cd328507190ca9d81c09", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb": {"doc_hash": "7df46d14d99742dfc99498b42ffa9511ffe3aee0be9254bae1055776869afc5a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4": {"doc_hash": "a90f8d78fd70cb2846887ad630ae4f3160fbea3a901d57b36452022a425fbdb4", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "6354e734-fd8c-49e5-98da-b705c33b2c19": {"doc_hash": "d9a319d0cbeaeccebbf4e2086bff110acf8f4a91c37181407a9beeaabdbfca0a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "269dc7ad-d7ca-474d-9c4f-7d2e61eba086": {"doc_hash": "fa706e395f2180e7ccac94ed8c2a3b2158824a44ab0a67e47f641828e7f9b31c", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "9d35bd40-163c-4ed9-9001-b327034b5797": {"doc_hash": "2a3e2eb7d4cc1e1bfbd357f46f90734af6687eade59e2688cf78b414abf1954a", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "f8f06fea-f766-49b1-b08f-5f3c296b3a01": {"doc_hash": "1a8dc499e429ce398498b41c0af001a5b5e73f62b9e271db4e750a41860bed40", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "25484219-8985-4b18-82e9-b0753d52551d": {"doc_hash": "0fb887cb9231eb51b3ac9d9f71d5599f8a1437509af21ae668bded7549de0e60", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6": {"doc_hash": "738449af9e898372445c082cc0425fff57a29b60255743f7e77b034048920655", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c": {"doc_hash": "f964a1e033bf3705cd602063f8a73b76e2e85e5702ccf9c59f4eb66c08e556a1", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "30184b58-2f0d-4edb-bc7f-6bd03fdf299e": {"doc_hash": "d2bfd4587210460c008217b5313456b5b0f78e4fd7c6d512539dfda9192559bd", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "ef32cb72-824d-44ca-b858-ccd913e0f21a": {"doc_hash": "d226f0ecd2c8aba034764cd62403f6e73498daad345231f2504c76a5bfe74141", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "013af4e5-e4f6-4739-a331-234920a73988": {"doc_hash": "8562a830ff82ba1e9968efe51cda603437a16343a1845346fdfb9f724584eb28", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "4739b0de-90c6-4635-8fd3-e9d6979fe17a": {"doc_hash": "0658d55063e5934372d88e9ced9471a041ddc6c348cb94673a4899b06802209d", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "5aabc438-0d8f-49aa-8c35-a1c20a08fb92": {"doc_hash": "f7105f927b1f098346e6f145d79693e0f1a4d6764168750951c5935eb868291d", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "2e15ce01-c37e-4fc1-aa7c-a399c537f7af": {"doc_hash": "746affc326e3da2b8c9debacefa5982a0fe4391357c0ad4f634fa8c7d2bd0cb8", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "df4e3efe-d6ac-44e7-a829-10aa07630547": {"doc_hash": "601c5d3fdbfff50aec918040f3b78159155b38dfb348952c5dfe54e86edf9099", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "4743b490-c7b0-45cf-831a-50821ebb701f": {"doc_hash": "363dd34d2c56711dcf894553fe3a6e75d1facaed4204fee298956ad440d6b198", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "c5ba7e63-fcca-4011-b5c5-523fe68fa005": {"doc_hash": "a5833a882bb0f7115cd925aa25abedc943ce5912b3ef70d8147379f43cbb20d3", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "02ab8f80-4a6b-49ff-ada7-bf82356ddebc": {"doc_hash": "602cd1758add8ad87fef6e9b23dc02a82330b776e7efcc835afbe86d0eadc683", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "6f77ac31-6018-4ca1-a8b2-fa81283e965e": {"doc_hash": "c2d8549994317ed7960dbcfc0519f0e55911bece2e492f1c2d8b00ad39dd2783", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "e1ae2018-863e-4cfe-8be8-6449aa3378b0": {"doc_hash": "0efc8d7ff019bdab2bb09432e7e3bac475c2e63bc663b7540710ac99a6bcb237", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "af8bb22e-953f-41ec-9763-6a971006f50b": {"doc_hash": "5fbd8e0e8eab79d1e9dac26473c1176827584972f6d511d00aacc00c2d89e411", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "af4f0474-0e0d-4d33-820e-807b5f0ac73b": {"doc_hash": "03ab1008fd932f7eb7883f625db1f09957407f49241a9c74ce76df2c1df28baa", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}, "ebeb2d06-4a77-42ca-9f4a-8a390b84f94e": {"doc_hash": "314ff144d0c4fe895a710f556b93a9d6c8b7261b3fc39651ce02ea84b0998cdf", "ref_doc_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e"}}, "docstore/data": {"5c7213d8-9955-42d3-ba87-318f9501399b": {"__data__": {"id_": "5c7213d8-9955-42d3-ba87-318f9501399b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "3": {"node_id": "5c0b76db-49a1-426c-8f45-557e5d6209f6", "node_type": null, "metadata": {}, "hash": "6a8178841300e882d439c0f4963d0e139a2ab1835ef232ed64a42a772c10139f"}}, "hash": "d1b093a787d4811af9b88d92a485c8de7c8d2c090ff005e5be880b8331aad6fb", "text": "# Module libvirt-common from libvirt\n\nProvides common macros and enums needed by both libvirt and libvirt-admin\nlibraries\n\n## Table of Contents\n\n### Macros\n\n    \n    \n    #define LIBVIR_CHECK_VERSION\n    #define LIBVIR_VERSION_NUMBER\n    #define VIR_TYPED_PARAM_FIELD_LENGTH\n    \n\n### Types\n\n    \n    \n    typedef enum virConnectCloseReason\n    typedef struct _virTypedParameter virTypedParameter\n    typedef enum virTypedParameterFlags\n    typedef [virTypedParameter](libvirt-libvirt-common.html#virTypedParameter) * virTypedParameterPtr\n    typedef enum virTypedParameterType\n    \n\n### Functions\n\n    \n    \n    typedef virFreeCallback\n    void\tvirFreeCallback\t\t\t(void * opaque)\n    \n    int\tvirTypedParamsAddBoolean\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t int value)\n    int\tvirTypedParamsAddDouble\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t double value)\n    int\tvirTypedParamsAddFromString\t([virTypedParameterPtr](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c0b76db-49a1-426c-8f45-557e5d6209f6": {"__data__": {"id_": "5c0b76db-49a1-426c-8f45-557e5d6209f6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "5c7213d8-9955-42d3-ba87-318f9501399b", "node_type": null, "metadata": {}, "hash": "d1b093a787d4811af9b88d92a485c8de7c8d2c090ff005e5be880b8331aad6fb"}, "3": {"node_id": "e15e06d3-033c-488f-a582-4d9cbfe4dfe5", "node_type": null, "metadata": {}, "hash": "9c4282910e65f09f5ba1cd2375735a41d7e44a2243ba96350d5538918cf0da9f"}}, "hash": "6a8178841300e882d439c0f4963d0e139a2ab1835ef232ed64a42a772c10139f", "text": "html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t int type,   \n    \t\t\t\t\t const char * value)\n    int\tvirTypedParamsAddInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t int value)\n    int\tvirTypedParamsAddLLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t long long value)\n    int\tvirTypedParamsAddString\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t const char * value)\n    int\tvirTypedParamsAddStringList\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e15e06d3-033c-488f-a582-4d9cbfe4dfe5": {"__data__": {"id_": "e15e06d3-033c-488f-a582-4d9cbfe4dfe5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "5c0b76db-49a1-426c-8f45-557e5d6209f6", "node_type": null, "metadata": {}, "hash": "6a8178841300e882d439c0f4963d0e139a2ab1835ef232ed64a42a772c10139f"}, "3": {"node_id": "5e3f9eff-fca4-4511-9bdd-50e806995cc4", "node_type": null, "metadata": {}, "hash": "a87587776a5e61bc4b6d59aa6f55a848a88674e54a08534740280781e9a99526"}}, "hash": "9c4282910e65f09f5ba1cd2375735a41d7e44a2243ba96350d5538918cf0da9f", "text": "int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t const char ** values)\n    int\tvirTypedParamsAddUInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t unsigned int value)\n    int\tvirTypedParamsAddULLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t int * maxparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t unsigned long long value)\n    void\tvirTypedParamsClear\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams)\n    void\tvirTypedParamsFree\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams)\n    [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr)\tvirTypedParamsGet\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t\t int nparams,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5e3f9eff-fca4-4511-9bdd-50e806995cc4": {"__data__": {"id_": "5e3f9eff-fca4-4511-9bdd-50e806995cc4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "e15e06d3-033c-488f-a582-4d9cbfe4dfe5", "node_type": null, "metadata": {}, "hash": "9c4282910e65f09f5ba1cd2375735a41d7e44a2243ba96350d5538918cf0da9f"}, "3": {"node_id": "d599352a-d34f-42e5-84c4-456dd87136d4", "node_type": null, "metadata": {}, "hash": "2c32e5fa9d1a4a79d708894ebc3b8f0596488353b84747d6f90067696c054bc7"}}, "hash": "a87587776a5e61bc4b6d59aa6f55a848a88674e54a08534740280781e9a99526", "text": "int nparams,   \n    \t\t\t\t\t\t const char * name)\n    int\tvirTypedParamsGetBoolean\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t int * value)\n    int\tvirTypedParamsGetDouble\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t double * value)\n    int\tvirTypedParamsGetInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t int * value)\n    int\tvirTypedParamsGetLLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t long long * value)\n    int\tvirTypedParamsGetString\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d599352a-d34f-42e5-84c4-456dd87136d4": {"__data__": {"id_": "d599352a-d34f-42e5-84c4-456dd87136d4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "5e3f9eff-fca4-4511-9bdd-50e806995cc4", "node_type": null, "metadata": {}, "hash": "a87587776a5e61bc4b6d59aa6f55a848a88674e54a08534740280781e9a99526"}, "3": {"node_id": "58d7b172-b581-4425-91dc-72d8d2b68d1e", "node_type": null, "metadata": {}, "hash": "d0889adc54fa854d6d4e95b9fd549e4f5d1d1bfe8efb9ac4565ee551e51fcc9e"}}, "hash": "2c32e5fa9d1a4a79d708894ebc3b8f0596488353b84747d6f90067696c054bc7", "text": "const char * name,   \n    \t\t\t\t\t const char ** value)\n    int\tvirTypedParamsGetUInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t unsigned int * value)\n    int\tvirTypedParamsGetULLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t unsigned long long * value)\n    \n\n## Description\n\n### Macros\u00c2\u00b6\n\n### `LIBVIR_CHECK_VERSION`\u00c2\u00b6\n\n    \n    \n    #define LIBVIR_CHECK_VERSION\n\nMacro for developers to easily check what version of the library their code is\ncompiling against. e.g. #if LIBVIR_CHECK_VERSION(1,1,3) // some code that only\nworks in 1.1.3 and newer #endif\n\n### `LIBVIR_VERSION_NUMBER`\u00c2\u00b6\n\n    \n    \n    #define LIBVIR_VERSION_NUMBER\n\nMacro providing the version of the library as version * 1,000,000 + minor *\n1000 + micro\n\n### `VIR_TYPED_PARAM_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_TYPED_PARAM_FIELD_LENGTH\n\nMacro providing the field length of [virTypedParameter](libvirt-libvirt-\ncommon.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "58d7b172-b581-4425-91dc-72d8d2b68d1e": {"__data__": {"id_": "58d7b172-b581-4425-91dc-72d8d2b68d1e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "d599352a-d34f-42e5-84c4-456dd87136d4", "node_type": null, "metadata": {}, "hash": "2c32e5fa9d1a4a79d708894ebc3b8f0596488353b84747d6f90067696c054bc7"}, "3": {"node_id": "ca88f725-88b1-42a0-a241-8758d75fc914", "node_type": null, "metadata": {}, "hash": "82abbfb71a7032fc7d824d6832ca2ec53f7942af45dc7310223ae2f0bb09c471"}}, "hash": "d0889adc54fa854d6d4e95b9fd549e4f5d1d1bfe8efb9ac4565ee551e51fcc9e", "text": "html#virTypedParameter) name\n\n### Types\u00c2\u00b6\n\n### `virConnectCloseReason`\u00c2\u00b6\n\n    \n    \n    enum virConnectCloseReason {\n    \n\nVIR_CONNECT_CLOSE_REASON_ERROR|  = | 0 (0x0)|\n\nMisc I/O error  \n  \n---|---|---|---  \nVIR_CONNECT_CLOSE_REASON_EOF|  = | 1 (0x1)|\n\nEnd-of-file from server  \n  \nVIR_CONNECT_CLOSE_REASON_KEEPALIVE|  = | 2 (0x2)|\n\nKeepalive timer triggered  \n  \nVIR_CONNECT_CLOSE_REASON_CLIENT|  = | 3 (0x3)|\n\nClient requested it  \n  \nVIR_CONNECT_CLOSE_REASON_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virTypedParameter`\u00c2\u00b6\n\n    \n    \n    struct virTypedParameter {\n    \n\nchar field[VIR_TYPED_PARAM_FIELD_LENGTH]| field|\n\nparameter name  \n  \n---|---|---  \nint| type|\n\nparameter type, [virTypedParameterType](libvirt-libvirt-\ncommon.html#virTypedParameterType)  \n  \nunion {  \n| int| i|\n\ntype is INT  \n  \n---|---|---  \nunsigned int| ui|\n\ntype is UINT  \n  \nlong long int| l|\n\ntype is LLONG  \n  \nunsigned long long int| ul|\n\ntype is ULLONG  \n  \ndouble| d|\n\ntype is DOUBLE  \n  \nchar| b|\n\ntype is BOOLEAN  \n  \nchar *| s|\n\ntype is STRING,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ca88f725-88b1-42a0-a241-8758d75fc914": {"__data__": {"id_": "ca88f725-88b1-42a0-a241-8758d75fc914", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "58d7b172-b581-4425-91dc-72d8d2b68d1e", "node_type": null, "metadata": {}, "hash": "d0889adc54fa854d6d4e95b9fd549e4f5d1d1bfe8efb9ac4565ee551e51fcc9e"}, "3": {"node_id": "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7", "node_type": null, "metadata": {}, "hash": "b0c4c21eefaa900a5034603a5c2cfe35aac5d521c906211f495e41c3d5fca13d"}}, "hash": "82abbfb71a7032fc7d824d6832ca2ec53f7942af45dc7310223ae2f0bb09c471", "text": "may not be NULL  \n  \n}| value|\n\nparameter value\n\n|  \n      \n    \n    }\n    \n\n### `virTypedParameterFlags`\u00c2\u00b6\n\nFlags related to libvirt APIs that use [virTypedParameter](libvirt-libvirt-\ncommon.html#virTypedParameter). These enums should not conflict with those of\n[virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact).\n\n    \n    \n    enum virTypedParameterFlags {\n    \n\nVIR_TYPED_PARAM_STRING_OKAY|  = | 4 (0x4; 1 << 2)|\n\n1 << 0 is reserved for [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact) 1 << 1 is reserved for\n[virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact) Older servers lacked the ability to\nhandle string typed parameters. Attempts to set a string parameter with an\nolder server will fail at the client, but attempts to retrieve parameters must\nnot return strings from a new server to an older client, so this flag exists\nto identify newer clients to newer servers. This flag is automatically set\nwhen needed, so the user does not have to worry about it; however, manually\nsetting the flag can be used to reject servers that cannot return typed\nstrings, even if no strings would be returned.  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virTypedParameterPtr`\u00c2\u00b6\n\n    \n    \n    typedef virTypedParameter * virTypedParameterPtr;\n\na pointer to a [virTypedParameter](libvirt-libvirt-\ncommon.html#virTypedParameter) structure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7": {"__data__": {"id_": "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "ca88f725-88b1-42a0-a241-8758d75fc914", "node_type": null, "metadata": {}, "hash": "82abbfb71a7032fc7d824d6832ca2ec53f7942af45dc7310223ae2f0bb09c471"}, "3": {"node_id": "4570270b-12e8-4f96-b843-6d3a87fbff7e", "node_type": null, "metadata": {}, "hash": "235d07d59e62ffa7dfa628814774703d8f61c0920dd5bc1ff2f0ef5be297a57c"}}, "hash": "b0c4c21eefaa900a5034603a5c2cfe35aac5d521c906211f495e41c3d5fca13d", "text": "### `virTypedParameterType`\u00c2\u00b6\n\nExpress the type of a [virTypedParameter](libvirt-libvirt-\ncommon.html#virTypedParameter)\n\n    \n    \n    enum virTypedParameterType {\n    \n\nVIR_TYPED_PARAM_INT|  = | 1 (0x1)|\n\ninteger case  \n  \n---|---|---|---  \nVIR_TYPED_PARAM_UINT|  = | 2 (0x2)|\n\nunsigned integer case  \n  \nVIR_TYPED_PARAM_LLONG|  = | 3 (0x3)|\n\nlong long case  \n  \nVIR_TYPED_PARAM_ULLONG|  = | 4 (0x4)|\n\nunsigned long long case  \n  \nVIR_TYPED_PARAM_DOUBLE|  = | 5 (0x5)|\n\ndouble case  \n  \nVIR_TYPED_PARAM_BOOLEAN|  = | 6 (0x6)|\n\nboolean(character) case  \n  \nVIR_TYPED_PARAM_STRING|  = | 7 (0x7)|\n\nstring case  \n  \nVIR_TYPED_PARAM_LAST|  = | 8 (0x8)  \n      \n    \n    }\n    \n\n### Functions\u00c2\u00b6\n\n### `virFreeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virFreeCallback\t\t)\t(void * opaque)\n    \n\nType for a callback cleanup function to be paired with a callback. This\nfunction will be called as a final chance to clean up the `opaque` registered\nwith the primary callback, at the time when the primary callback is\nderegistered.\n\nIt is forbidden to call any other libvirt APIs from an implementation of this\ncallback, since it can be invoked from a context which is not re-entrant safe.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4570270b-12e8-4f96-b843-6d3a87fbff7e": {"__data__": {"id_": "4570270b-12e8-4f96-b843-6d3a87fbff7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7", "node_type": null, "metadata": {}, "hash": "b0c4c21eefaa900a5034603a5c2cfe35aac5d521c906211f495e41c3d5fca13d"}, "3": {"node_id": "bd08dbcc-3d37-4897-b11d-5673a06ef304", "node_type": null, "metadata": {}, "hash": "c54fac8fd2d33d7ba0ee9b8badc50e08b60afa56bbbb033a65932cf6ed80164f"}}, "hash": "235d07d59e62ffa7dfa628814774703d8f61c0920dd5bc1ff2f0ef5be297a57c", "text": "Failure to abide by this requirement may lead to application deadlocks or\ncrashes.\n\nopaque\n\n    opaque user data provided at registration\n  \n\n### `virTypedParamsAddBoolean`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddBoolean\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t int value)\n\nAdds new parameter called `name` with boolean type and sets its value to\n`value`. If `params` array points to NULL or to a space that is not large\nenough to accommodate the new parameter (`maxparams` < `nparams` \\+ 1), the\nfunction allocates more space for it and updates `maxparams`. On success,\n`nparams` is incremented by one. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bd08dbcc-3d37-4897-b11d-5673a06ef304": {"__data__": {"id_": "bd08dbcc-3d37-4897-b11d-5673a06ef304", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "4570270b-12e8-4f96-b843-6d3a87fbff7e", "node_type": null, "metadata": {}, "hash": "235d07d59e62ffa7dfa628814774703d8f61c0920dd5bc1ff2f0ef5be297a57c"}, "3": {"node_id": "be2ce339-abe2-4370-bb07-99c66abee3ea", "node_type": null, "metadata": {}, "hash": "b671d4bdfaca0faee71fded058386e054d1f95e35a03478e527e7a415835ac96"}}, "hash": "c54fac8fd2d33d7ba0ee9b8badc50e08b60afa56bbbb033a65932cf6ed80164f", "text": "### `virTypedParamsAddDouble`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddDouble\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t double value)\n\nAdds new parameter called `name` with double type and sets its value to\n`value`. If `params` array points to NULL or to a space that is not large\nenough to accommodate the new parameter (`maxparams` < `nparams` \\+ 1), the\nfunction allocates more space for it and updates `maxparams`. On success,\n`nparams` is incremented by one. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "be2ce339-abe2-4370-bb07-99c66abee3ea": {"__data__": {"id_": "be2ce339-abe2-4370-bb07-99c66abee3ea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "bd08dbcc-3d37-4897-b11d-5673a06ef304", "node_type": null, "metadata": {}, "hash": "c54fac8fd2d33d7ba0ee9b8badc50e08b60afa56bbbb033a65932cf6ed80164f"}, "3": {"node_id": "2403f8cc-2d66-4f08-b62a-afd998c7f2d2", "node_type": null, "metadata": {}, "hash": "3ef36c015c53f659768fd35ec7d4927d7a975c67357a02f878249789bfea7049"}}, "hash": "b671d4bdfaca0faee71fded058386e054d1f95e35a03478e527e7a415835ac96", "text": "### `virTypedParamsAddFromString`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddFromString\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t int type,\n    \t\t\t\t\t const char * value)\n\nAdds new parameter called `name` with the requested `type` and parses its\nvalue from the `value` string. If the requested type is string, the function\ncreates its own copy of the `value` string, which needs to be freed using\n[virTypedParamsFree](libvirt-libvirt-common.html#virTypedParamsFree) or\n[virTypedParamsClear](libvirt-libvirt-common.html#virTypedParamsClear). If\n`params` array points to NULL or to a space that is not large enough to\naccommodate the new parameter (`maxparams` < `nparams` \\+ 1), the function\nallocates more space for it and updates `maxparams`. On success, `nparams` is\nincremented by one. The function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter already exists in\n`params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\ntype\n\n    type of the parameter\nvalue\n\n    the value to store into the new parameter encoded as a string\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2403f8cc-2d66-4f08-b62a-afd998c7f2d2": {"__data__": {"id_": "2403f8cc-2d66-4f08-b62a-afd998c7f2d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "be2ce339-abe2-4370-bb07-99c66abee3ea", "node_type": null, "metadata": {}, "hash": "b671d4bdfaca0faee71fded058386e054d1f95e35a03478e527e7a415835ac96"}, "3": {"node_id": "010fad0f-5faa-45eb-a4e0-62538a560fc6", "node_type": null, "metadata": {}, "hash": "bf64c8a9657b23eb924006821227f6f321f9e827f62d3a1ccec88d4f6f5efd60"}}, "hash": "3ef36c015c53f659768fd35ec7d4927d7a975c67357a02f878249789bfea7049", "text": "### `virTypedParamsAddInt`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t int value)\n\nAdds new parameter called `name` with int type and sets its value to `value`.\nIf `params` array points to NULL or to a space that is not large enough to\naccommodate the new parameter (`maxparams` < `nparams` \\+ 1), the function\nallocates more space for it and updates `maxparams`. On success, `nparams` is\nincremented by one. The function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter already exists in\n`params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.\n\n### `virTypedParamsAddLLong`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddLLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t long long value)\n\nAdds new parameter called `name` with long long int type and sets its value to\n`value`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "010fad0f-5faa-45eb-a4e0-62538a560fc6": {"__data__": {"id_": "010fad0f-5faa-45eb-a4e0-62538a560fc6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "2403f8cc-2d66-4f08-b62a-afd998c7f2d2", "node_type": null, "metadata": {}, "hash": "3ef36c015c53f659768fd35ec7d4927d7a975c67357a02f878249789bfea7049"}, "3": {"node_id": "02d6362e-4847-489e-8947-fcee603d1c9c", "node_type": null, "metadata": {}, "hash": "9aa93b59463f50b3dc5ed7a02fa4b429c9be2976022a735d46b3435259739a16"}}, "hash": "bf64c8a9657b23eb924006821227f6f321f9e827f62d3a1ccec88d4f6f5efd60", "text": "If `params` array points to NULL or to a space that is not large\nenough to accommodate the new parameter (`maxparams` < `nparams` \\+ 1), the\nfunction allocates more space for it and updates `maxparams`. On success,\n`nparams` is incremented by one. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.\n\n### `virTypedParamsAddString`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddString\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t const char * value)\n\nAdds new parameter called `name` with char * type and sets its value to\n`value`. The function creates its own copy of `value` string, which needs to\nbe freed using [virTypedParamsFree](libvirt-libvirt-\ncommon.html#virTypedParamsFree) or [virTypedParamsClear](libvirt-libvirt-\ncommon.html#virTypedParamsClear). If `params` array points to NULL or to a\nspace that is not large enough to accommodate the new parameter (`maxparams` <\n`nparams` \\+ 1), the function allocates more space for it and updates\n`maxparams`. On success, `nparams` is incremented by one.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "02d6362e-4847-489e-8947-fcee603d1c9c": {"__data__": {"id_": "02d6362e-4847-489e-8947-fcee603d1c9c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "010fad0f-5faa-45eb-a4e0-62538a560fc6", "node_type": null, "metadata": {}, "hash": "bf64c8a9657b23eb924006821227f6f321f9e827f62d3a1ccec88d4f6f5efd60"}, "3": {"node_id": "634f8ad8-ee5e-4a17-addc-e0e08fb620de", "node_type": null, "metadata": {}, "hash": "4a5737d2091ccab774da90a55b27239492edcf07f4eb24a66f3ae3cd835681a9"}}, "hash": "9aa93b59463f50b3dc5ed7a02fa4b429c9be2976022a735d46b3435259739a16", "text": "On success, `nparams` is incremented by one. The function fails\nwith [VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error\nif the parameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.\n\n### `virTypedParamsAddStringList`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddStringList\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t const char ** values)\n\nPacks NULL-terminated list of strings `values` into `params` under the key\n`name`.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to store values to\nvalues\n\n    the values to store into the new parameters\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "634f8ad8-ee5e-4a17-addc-e0e08fb620de": {"__data__": {"id_": "634f8ad8-ee5e-4a17-addc-e0e08fb620de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "02d6362e-4847-489e-8947-fcee603d1c9c", "node_type": null, "metadata": {}, "hash": "9aa93b59463f50b3dc5ed7a02fa4b429c9be2976022a735d46b3435259739a16"}, "3": {"node_id": "c6509fbc-8974-453c-9c1f-d81cfed12577", "node_type": null, "metadata": {}, "hash": "12176bfaad2567567a57f1665a117cc05d1b389f8785a054777eef836a39e39c"}}, "hash": "4a5737d2091ccab774da90a55b27239492edcf07f4eb24a66f3ae3cd835681a9", "text": "### `virTypedParamsAddUInt`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddUInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t unsigned int value)\n\nAdds new parameter called `name` with unsigned int type and sets its value to\n`value`. If `params` array points to NULL or to a space that is not large\nenough to accommodate the new parameter (`maxparams` < `nparams` \\+ 1), the\nfunction allocates more space for it and updates `maxparams`. On success,\n`nparams` is incremented by one. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.\n\n### `virTypedParamsAddULLong`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsAddULLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t int * maxparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t unsigned long long value)\n\nAdds new parameter called `name` with unsigned long long type and sets its\nvalue to `value`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c6509fbc-8974-453c-9c1f-d81cfed12577": {"__data__": {"id_": "c6509fbc-8974-453c-9c1f-d81cfed12577", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "634f8ad8-ee5e-4a17-addc-e0e08fb620de", "node_type": null, "metadata": {}, "hash": "4a5737d2091ccab774da90a55b27239492edcf07f4eb24a66f3ae3cd835681a9"}, "3": {"node_id": "a32ce559-1f49-4471-9f7c-b3c7f8b8e882", "node_type": null, "metadata": {}, "hash": "207bf25dfc78945c5fb5198712c48482fb5f2aac41bbcf15db5fb75effbd3adb"}}, "hash": "12176bfaad2567567a57f1665a117cc05d1b389f8785a054777eef836a39e39c", "text": "If `params` array points to NULL or to a space that is not\nlarge enough to accommodate the new parameter (`maxparams` < `nparams` \\+ 1),\nthe function allocates more space for it and updates `maxparams`. On success,\n`nparams` is incremented by one. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter already exists in `params`.\n\nparams\n\n    pointer to the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nmaxparams\n\n    maximum number of parameters that can be stored in `params` array without allocating more memory\nname\n\n    name of the parameter to find\nvalue\n\n    the value to store into the new parameter\nReturns\n\n    0 on success, -1 on error.\n\n### `virTypedParamsClear`\u00c2\u00b6\n\n    \n    \n    void\tvirTypedParamsClear\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams)\n\nFrees all memory used by string parameters. The memory occupied by `params` is\nnot freed; use [virTypedParamsFree](libvirt-libvirt-\ncommon.html#virTypedParamsFree) if you want it to be freed too.\n\nparams\n\n    the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\n\n### `virTypedParamsFree`\u00c2\u00b6\n\n    \n    \n    void\tvirTypedParamsFree\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams)\n\nFrees all memory used by string parameters and the memory occupied by\n`params`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a32ce559-1f49-4471-9f7c-b3c7f8b8e882": {"__data__": {"id_": "a32ce559-1f49-4471-9f7c-b3c7f8b8e882", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "c6509fbc-8974-453c-9c1f-d81cfed12577", "node_type": null, "metadata": {}, "hash": "12176bfaad2567567a57f1665a117cc05d1b389f8785a054777eef836a39e39c"}, "3": {"node_id": "7dcbfe22-8e7c-43bc-8145-6322f630fe60", "node_type": null, "metadata": {}, "hash": "e09d6e7d0faa0085b48a3f37eb97adcae76af6136c89c0fc6b7e37e002f1c413"}}, "hash": "207bf25dfc78945c5fb5198712c48482fb5f2aac41bbcf15db5fb75effbd3adb", "text": "params\n\n    the array of typed parameters\nnparams\n\n    number of parameters in the `params` array\n\n### `virTypedParamsGet`\u00c2\u00b6\n\n    \n    \n    [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr)\tvirTypedParamsGet\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t\t int nparams,\n    \t\t\t\t\t\t const char * name)\n\nFinds typed parameter called `name`.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nReturns\n\n    pointer to the parameter or NULL if it does not exist in `params`. This function does not raise an error, even when returning NULL.\n\n### `virTypedParamsGetBoolean`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetBoolean\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t int * value)\n\nFinds typed parameter called `name` and store its boolean value in `value`.\nThe function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7dcbfe22-8e7c-43bc-8145-6322f630fe60": {"__data__": {"id_": "7dcbfe22-8e7c-43bc-8145-6322f630fe60", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "a32ce559-1f49-4471-9f7c-b3c7f8b8e882", "node_type": null, "metadata": {}, "hash": "207bf25dfc78945c5fb5198712c48482fb5f2aac41bbcf15db5fb75effbd3adb"}, "3": {"node_id": "4c87a049-09c7-4395-8ba6-3c0c31308334", "node_type": null, "metadata": {}, "hash": "70f61ba47a22eebf275372a4e02561b5eaa6e5b923b2088edd65483c0f90df34"}}, "hash": "e09d6e7d0faa0085b48a3f37eb97adcae76af6136c89c0fc6b7e37e002f1c413", "text": "### `virTypedParamsGetDouble`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetDouble\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t double * value)\n\nFinds typed parameter called `name` and store its double value in `value`. The\nfunction fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.\n\n### `virTypedParamsGetInt`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t int * value)\n\nFinds typed parameter called `name` and store its int value in `value`. The\nfunction fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c87a049-09c7-4395-8ba6-3c0c31308334": {"__data__": {"id_": "4c87a049-09c7-4395-8ba6-3c0c31308334", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "7dcbfe22-8e7c-43bc-8145-6322f630fe60", "node_type": null, "metadata": {}, "hash": "e09d6e7d0faa0085b48a3f37eb97adcae76af6136c89c0fc6b7e37e002f1c413"}, "3": {"node_id": "660ef555-b587-4fb4-9183-e7131608da73", "node_type": null, "metadata": {}, "hash": "77a12769aecc1f3bcba01180d4ddbf58df810a12aad5289ddbfb8a7ea6950ebb"}}, "hash": "70f61ba47a22eebf275372a4e02561b5eaa6e5b923b2088edd65483c0f90df34", "text": "params\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.\n\n### `virTypedParamsGetLLong`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetLLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t long long * value)\n\nFinds typed parameter called `name` and store its long long int value in\n`value`. The function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.\n\n### `virTypedParamsGetString`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetString\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t const char ** value)\n\nFinds typed parameter called `name` and store its char * value in `value`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "660ef555-b587-4fb4-9183-e7131608da73": {"__data__": {"id_": "660ef555-b587-4fb4-9183-e7131608da73", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "4c87a049-09c7-4395-8ba6-3c0c31308334", "node_type": null, "metadata": {}, "hash": "70f61ba47a22eebf275372a4e02561b5eaa6e5b923b2088edd65483c0f90df34"}, "3": {"node_id": "888c81d8-79a8-4f16-966a-1b4fb38cdab4", "node_type": null, "metadata": {}, "hash": "2654ce258f0a5962d05a96fcaa071f64aba6c2aba47b7d2afc27ac2f0d1296bd"}}, "hash": "77a12769aecc1f3bcba01180d4ddbf58df810a12aad5289ddbfb8a7ea6950ebb", "text": "The\nfunction does not create a copy of the string and the caller must not free the\nstring `value` points to. The function fails with\n[VIR_ERR_INVALID_ARG](libvirt-virterror.html#VIR_ERR_INVALID_ARG) error if the\nparameter does not have the expected type. By passing NULL as `value`, the\nfunction may be used to check presence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.\n\n### `virTypedParamsGetUInt`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetUInt\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t unsigned int * value)\n\nFinds typed parameter called `name` and store its unsigned int value in\n`value`. The function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "888c81d8-79a8-4f16-966a-1b4fb38cdab4": {"__data__": {"id_": "888c81d8-79a8-4f16-966a-1b4fb38cdab4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4d3387cc-c038-4a36-b963-1cbf76a78ac7", "node_type": null, "metadata": {}, "hash": "9bc811115737f3d31e44c02bbc74f041e6dc4360784323b3bdb023201a16d0d0"}, "2": {"node_id": "660ef555-b587-4fb4-9183-e7131608da73", "node_type": null, "metadata": {}, "hash": "77a12769aecc1f3bcba01180d4ddbf58df810a12aad5289ddbfb8a7ea6950ebb"}}, "hash": "2654ce258f0a5962d05a96fcaa071f64aba6c2aba47b7d2afc27ac2f0d1296bd", "text": "### `virTypedParamsGetULLong`\u00c2\u00b6\n\n    \n    \n    int\tvirTypedParamsGetULLong\t\t([virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t unsigned long long * value)\n\nFinds typed parameter called `name` and store its unsigned long long int value\nin `value`. The function fails with [VIR_ERR_INVALID_ARG](libvirt-\nvirterror.html#VIR_ERR_INVALID_ARG) error if the parameter does not have the\nexpected type. By passing NULL as `value`, the function may be used to check\npresence and type of the parameter.\n\nparams\n\n    array of typed parameters\nnparams\n\n    number of parameters in the `params` array\nname\n\n    name of the parameter to find\nvalue\n\n    where to store the parameter's value\nReturns\n\n    1 on success, 0 when the parameter does not exist in `params`, or -1 on error.\n\n[Home](../index.html)\n\n  * [Download](../downloads.html)\n  * [Contribute](../contribute.html)\n  * [Docs](../docs.html)\n\nWebsite Wiki Developers list Users list\n\n### Contact\n\n  * [email](../contact.html#mailing-lists)\n  * [irc](../contact.html#irc)\n\n### Community\n\n  * [fosstodon](https://fosstodon.org/tags/libvirt)\n  * [stackoverflow](https://stackoverflow.com/questions/tagged/libvirt)\n  * [serverfault](https://serverfault.com/questions/tagged/libvirt)\n\nParticipants in the libvirt project agree to abide by [the project code of\nconduct](../governance.html#code-of-conduct)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e4ec6cec-0523-4c97-8eac-40a857dc7238": {"__data__": {"id_": "e4ec6cec-0523-4c97-8eac-40a857dc7238", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "3": {"node_id": "89b255f3-e437-4f42-8b37-fcb1292cfcfb", "node_type": null, "metadata": {}, "hash": "d5cddf6217f0fa479b86b2d0ea9720c87d25b09a5caef3f00bac23489aa96a8f"}}, "hash": "da801e87aee12e99a9eeb16eb00b9a6642859d3c2108a13e7a146c2a9efa5c15", "text": "# Module libvirt-domain from libvirt\n\nProvides APIs for the management of domains\n\n## Table of Contents\n\n### Macros\n\n    \n    \n    #define VIR_COPY_CPUMAP\n    #define VIR_CPU_MAPLEN\n    #define VIR_CPU_USABLE\n    #define VIR_CPU_USED\n    #define VIR_DOMAIN_BANDWIDTH_IN_AVERAGE\n    #define VIR_DOMAIN_BANDWIDTH_IN_BURST\n    #define VIR_DOMAIN_BANDWIDTH_IN_FLOOR\n    #define VIR_DOMAIN_BANDWIDTH_IN_PEAK\n    #define VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE\n    #define VIR_DOMAIN_BANDWIDTH_OUT_BURST\n    #define VIR_DOMAIN_BANDWIDTH_OUT_PEAK\n    #define VIR_DOMAIN_BLKIO_DEVICE_READ_BPS\n    #define VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS\n    #define VIR_DOMAIN_BLKIO_DEVICE_WEIGHT\n    #define VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS\n    #define VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS\n    #define VIR_DOMAIN_BLKIO_FIELD_LENGTH\n    #define VIR_DOMAIN_BLKIO_WEIGHT\n    #define VIR_DOMAIN_BLOCK_COPY_BANDWIDTH\n    #define VIR_DOMAIN_BLOCK_COPY_BUF_SIZE\n    #define VIR_DOMAIN_BLOCK_COPY_GRANULARITY\n    #define VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "89b255f3-e437-4f42-8b37-fcb1292cfcfb": {"__data__": {"id_": "89b255f3-e437-4f42-8b37-fcb1292cfcfb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e4ec6cec-0523-4c97-8eac-40a857dc7238", "node_type": null, "metadata": {}, "hash": "da801e87aee12e99a9eeb16eb00b9a6642859d3c2108a13e7a146c2a9efa5c15"}, "3": {"node_id": "5821c9aa-1ee5-42b5-a985-905cd6451d2d", "node_type": null, "metadata": {}, "hash": "7eadf1d2391e30aa21e3e7a79c5b1ed05454e083d73c0b7b5d668fd0e47735a0"}}, "hash": "d5cddf6217f0fa479b86b2d0ea9720c87d25b09a5caef3f00bac23489aa96a8f", "text": "#define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX\n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX\n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX\n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX\n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC\n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5821c9aa-1ee5-42b5-a985-905cd6451d2d": {"__data__": {"id_": "5821c9aa-1ee5-42b5-a985-905cd6451d2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "89b255f3-e437-4f42-8b37-fcb1292cfcfb", "node_type": null, "metadata": {}, "hash": "d5cddf6217f0fa479b86b2d0ea9720c87d25b09a5caef3f00bac23489aa96a8f"}, "3": {"node_id": "d971f70d-8f5e-47ab-b608-b8f17ff196e3", "node_type": null, "metadata": {}, "hash": "aef87a0559fdf72115d39f9fecfab4c50077b51b0e3ec7ea65355d1465e32815"}}, "hash": "7eadf1d2391e30aa21e3e7a79c5b1ed05454e083d73c0b7b5d668fd0e47735a0", "text": "#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_BLOCK_STATS_ERRS\n    #define VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH\n    #define VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ\n    #define VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES\n    #define VIR_DOMAIN_BLOCK_STATS_READ_BYTES\n    #define VIR_DOMAIN_BLOCK_STATS_READ_REQ\n    #define VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES\n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES\n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_REQ\n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES\n    #define VIR_DOMAIN_CPU_STATS_CPUTIME\n    #define VIR_DOMAIN_CPU_STATS_SYSTEMTIME\n    #define VIR_DOMAIN_CPU_STATS_USERTIME\n    #define VIR_DOMAIN_CPU_STATS_VCPUTIME\n    #define VIR_DOMAIN_EVENT_CALLBACK\n    #define VIR_DOMAIN_IOTHREAD_POLL_GROW\n    #define VIR_DOMAIN_IOTHREAD_POLL_MAX_NS\n    #define VIR_DOMAIN_IOTHREAD_POLL_SHRINK\n    #define VIR_DOMAIN_IOTHREAD_THREAD_POOL_MAX\n    #define VIR_DOMAIN_IOTHREAD_THREAD_POOL_MIN\n    #define VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d971f70d-8f5e-47ab-b608-b8f17ff196e3": {"__data__": {"id_": "d971f70d-8f5e-47ab-b608-b8f17ff196e3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5821c9aa-1ee5-42b5-a985-905cd6451d2d", "node_type": null, "metadata": {}, "hash": "7eadf1d2391e30aa21e3e7a79c5b1ed05454e083d73c0b7b5d668fd0e47735a0"}, "3": {"node_id": "e6311dd3-9eda-4477-bd2d-d775de7f60cf", "node_type": null, "metadata": {}, "hash": "5c33b2343a24a0ab6a72df324264b979d4c38620d0904b1aa71f29ebb1cdb10e"}}, "hash": "aef87a0559fdf72115d39f9fecfab4c50077b51b0e3ec7ea65355d1465e32815", "text": "#define VIR_DOMAIN_JOB_COMPRESSION_BYTES\n    #define VIR_DOMAIN_JOB_COMPRESSION_CACHE\n    #define VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES\n    #define VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW\n    #define VIR_DOMAIN_JOB_COMPRESSION_PAGES\n    #define VIR_DOMAIN_JOB_DATA_PROCESSED\n    #define VIR_DOMAIN_JOB_DATA_REMAINING\n    #define VIR_DOMAIN_JOB_DATA_TOTAL\n    #define VIR_DOMAIN_JOB_DISK_BPS\n    #define VIR_DOMAIN_JOB_DISK_PROCESSED\n    #define VIR_DOMAIN_JOB_DISK_REMAINING\n    #define VIR_DOMAIN_JOB_DISK_TEMP_TOTAL\n    #define VIR_DOMAIN_JOB_DISK_TEMP_USED\n    #define VIR_DOMAIN_JOB_DISK_TOTAL\n    #define VIR_DOMAIN_JOB_DOWNTIME\n    #define VIR_DOMAIN_JOB_DOWNTIME_NET\n    #define VIR_DOMAIN_JOB_ERRMSG\n    #define VIR_DOMAIN_JOB_MEMORY_BPS\n    #define VIR_DOMAIN_JOB_MEMORY_CONSTANT\n    #define VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE\n    #define VIR_DOMAIN_JOB_MEMORY_ITERATION\n    #define VIR_DOMAIN_JOB_MEMORY_NORMAL\n    #define VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e6311dd3-9eda-4477-bd2d-d775de7f60cf": {"__data__": {"id_": "e6311dd3-9eda-4477-bd2d-d775de7f60cf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d971f70d-8f5e-47ab-b608-b8f17ff196e3", "node_type": null, "metadata": {}, "hash": "aef87a0559fdf72115d39f9fecfab4c50077b51b0e3ec7ea65355d1465e32815"}, "3": {"node_id": "46ad0bc2-736d-401f-be71-ba554c97d6be", "node_type": null, "metadata": {}, "hash": "f4148fa2d03833db106f658df7111c8e46f136ad3b8b45aa17ac8e23ea05c1c3"}}, "hash": "5c33b2343a24a0ab6a72df324264b979d4c38620d0904b1aa71f29ebb1cdb10e", "text": "#define VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE\n    #define VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS\n    #define VIR_DOMAIN_JOB_MEMORY_PROCESSED\n    #define VIR_DOMAIN_JOB_MEMORY_REMAINING\n    #define VIR_DOMAIN_JOB_MEMORY_TOTAL\n    #define VIR_DOMAIN_JOB_OPERATION\n    #define VIR_DOMAIN_JOB_SETUP_TIME\n    #define VIR_DOMAIN_JOB_SUCCESS\n    #define VIR_DOMAIN_JOB_TIME_ELAPSED\n    #define VIR_DOMAIN_JOB_TIME_ELAPSED_NET\n    #define VIR_DOMAIN_JOB_TIME_REMAINING\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER\n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS\n    #define VIR_DOMAIN_MEMORY_FIELD_LENGTH\n    #define VIR_DOMAIN_MEMORY_HARD_LIMIT\n    #define VIR_DOMAIN_MEMORY_MIN_GUARANTEE", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "46ad0bc2-736d-401f-be71-ba554c97d6be": {"__data__": {"id_": "46ad0bc2-736d-401f-be71-ba554c97d6be", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e6311dd3-9eda-4477-bd2d-d775de7f60cf", "node_type": null, "metadata": {}, "hash": "5c33b2343a24a0ab6a72df324264b979d4c38620d0904b1aa71f29ebb1cdb10e"}, "3": {"node_id": "107d7ad7-52a3-4bcc-9380-66805e7cee41", "node_type": null, "metadata": {}, "hash": "bcebe70dd0abc0d88b45b408f71009319579eb0e314ae156cf06f506eb93e5fe"}}, "hash": "f4148fa2d03833db106f658df7111c8e46f136ad3b8b45aa17ac8e23ea05c1c3", "text": "VIR_DOMAIN_MEMORY_MIN_GUARANTEE\n    #define VIR_DOMAIN_MEMORY_PARAM_UNLIMITED\n    #define VIR_DOMAIN_MEMORY_SOFT_LIMIT\n    #define VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT\n    #define VIR_DOMAIN_NUMA_MODE\n    #define VIR_DOMAIN_NUMA_NODESET\n    #define VIR_DOMAIN_SAVE_PARAM_DXML\n    #define VIR_DOMAIN_SAVE_PARAM_FILE\n    #define VIR_DOMAIN_SCHEDULER_CAP\n    #define VIR_DOMAIN_SCHEDULER_CPU_SHARES\n    #define VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD\n    #define VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA\n    #define VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD\n    #define VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA\n    #define VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD\n    #define VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA\n    #define VIR_DOMAIN_SCHEDULER_LIMIT\n    #define VIR_DOMAIN_SCHEDULER_RESERVATION\n    #define VIR_DOMAIN_SCHEDULER_SHARES\n    #define VIR_DOMAIN_SCHEDULER_VCPU_PERIOD\n    #define VIR_DOMAIN_SCHEDULER_VCPU_QUOTA\n    #define VIR_DOMAIN_SCHEDULER_WEIGHT\n    #define VIR_DOMAIN_SCHED_FIELD_LENGTH\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "107d7ad7-52a3-4bcc-9380-66805e7cee41": {"__data__": {"id_": "107d7ad7-52a3-4bcc-9380-66805e7cee41", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "46ad0bc2-736d-401f-be71-ba554c97d6be", "node_type": null, "metadata": {}, "hash": "f4148fa2d03833db106f658df7111c8e46f136ad3b8b45aa17ac8e23ea05c1c3"}, "3": {"node_id": "1905586b-1736-4090-b50a-8fce79c4a69e", "node_type": null, "metadata": {}, "hash": "73b51cffd3e12c100526fcb5f22349e89ac6379c99ab007d9acdb717b81b31ac"}}, "hash": "bcebe70dd0abc0d88b45b408f71009319579eb0e314ae156cf06f506eb93e5fe", "text": "VIR_DOMAIN_SCHED_FIELD_LENGTH\n    #define VIR_DOMAIN_SEND_KEY_MAX_KEYS\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_DISK\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1905586b-1736-4090-b50a-8fce79c4a69e": {"__data__": {"id_": "1905586b-1736-4090-b50a-8fce79c4a69e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "107d7ad7-52a3-4bcc-9380-66805e7cee41", "node_type": null, "metadata": {}, "hash": "bcebe70dd0abc0d88b45b408f71009319579eb0e314ae156cf06f506eb93e5fe"}, "3": {"node_id": "45d94581-e19f-4128-9f9b-996a2b6a3c7e", "node_type": null, "metadata": {}, "hash": "25944d435d28dba647e04a18bb7e2f07243b01cfc1fc6db043c41c8e5588fae1"}}, "hash": "73b51cffd3e12c100526fcb5f22349e89ac6379c99ab007d9acdb717b81b31ac", "text": "#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX\n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH\n    #define VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES\n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN\n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD\n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA\n    #define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD\n    #define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA\n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN\n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD\n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA\n    #define VIR_DOMAIN_TUNABLE_CPU_VCPUPIN\n    #define VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD\n    #define VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA\n    #define VIR_GET_CPUMAP\n    #define VIR_KEYCODE_SET_RFB\n    #define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "45d94581-e19f-4128-9f9b-996a2b6a3c7e": {"__data__": {"id_": "45d94581-e19f-4128-9f9b-996a2b6a3c7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1905586b-1736-4090-b50a-8fce79c4a69e", "node_type": null, "metadata": {}, "hash": "73b51cffd3e12c100526fcb5f22349e89ac6379c99ab007d9acdb717b81b31ac"}, "3": {"node_id": "f3d041f9-a990-49ea-b03d-cd9252091b7c", "node_type": null, "metadata": {}, "hash": "6d49fdd28279b6c2512a0797791e21262b7fe4a53c3511583210db7694d2abb2"}}, "hash": "25944d435d28dba647e04a18bb7e2f07243b01cfc1fc6db043c41c8e5588fae1", "text": "#define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL\n    #define VIR_MIGRATE_PARAM_BANDWIDTH\n    #define VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY\n    #define VIR_MIGRATE_PARAM_COMPRESSION\n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS\n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL\n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS\n    #define VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE\n    #define VIR_MIGRATE_PARAM_COMPRESSION_ZLIB_LEVEL\n    #define VIR_MIGRATE_PARAM_COMPRESSION_ZSTD_LEVEL\n    #define VIR_MIGRATE_PARAM_DEST_NAME\n    #define VIR_MIGRATE_PARAM_DEST_XML\n    #define VIR_MIGRATE_PARAM_DISKS_PORT\n    #define VIR_MIGRATE_PARAM_DISKS_URI\n    #define VIR_MIGRATE_PARAM_GRAPHICS_URI\n    #define VIR_MIGRATE_PARAM_LISTEN_ADDRESS\n    #define VIR_MIGRATE_PARAM_MIGRATE_DISKS\n    #define VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS\n    #define VIR_MIGRATE_PARAM_PERSIST_XML\n    #define VIR_MIGRATE_PARAM_TLS_DESTINATION\n    #define VIR_MIGRATE_PARAM_URI\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f3d041f9-a990-49ea-b03d-cd9252091b7c": {"__data__": {"id_": "f3d041f9-a990-49ea-b03d-cd9252091b7c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "45d94581-e19f-4128-9f9b-996a2b6a3c7e", "node_type": null, "metadata": {}, "hash": "25944d435d28dba647e04a18bb7e2f07243b01cfc1fc6db043c41c8e5588fae1"}, "3": {"node_id": "d9d32335-2193-40f0-893e-9417d38815be", "node_type": null, "metadata": {}, "hash": "ac44a68961af0d91c4796d80b2889352b46d39353d3dd26902ffe2f43c91b7bf"}}, "hash": "6d49fdd28279b6c2512a0797791e21262b7fe4a53c3511583210db7694d2abb2", "text": "#define VIR_MIGRATE_PARAM_URI\n    #define VIR_PERF_PARAM_ALIGNMENT_FAULTS\n    #define VIR_PERF_PARAM_BRANCH_INSTRUCTIONS\n    #define VIR_PERF_PARAM_BRANCH_MISSES\n    #define VIR_PERF_PARAM_BUS_CYCLES\n    #define VIR_PERF_PARAM_CACHE_MISSES\n    #define VIR_PERF_PARAM_CACHE_REFERENCES\n    #define VIR_PERF_PARAM_CMT\n    #define VIR_PERF_PARAM_CONTEXT_SWITCHES\n    #define VIR_PERF_PARAM_CPU_CLOCK\n    #define VIR_PERF_PARAM_CPU_CYCLES\n    #define VIR_PERF_PARAM_CPU_MIGRATIONS\n    #define VIR_PERF_PARAM_EMULATION_FAULTS\n    #define VIR_PERF_PARAM_INSTRUCTIONS\n    #define VIR_PERF_PARAM_MBML\n    #define VIR_PERF_PARAM_MBMT\n    #define VIR_PERF_PARAM_PAGE_FAULTS\n    #define VIR_PERF_PARAM_PAGE_FAULTS_MAJ\n    #define VIR_PERF_PARAM_PAGE_FAULTS_MIN\n    #define VIR_PERF_PARAM_REF_CPU_CYCLES\n    #define VIR_PERF_PARAM_STALLED_CYCLES_BACKEND\n    #define VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND\n    #define VIR_PERF_PARAM_TASK_CLOCK\n    #define VIR_UNUSE_CPU\n    #define VIR_USE_CPU\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d9d32335-2193-40f0-893e-9417d38815be": {"__data__": {"id_": "d9d32335-2193-40f0-893e-9417d38815be", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f3d041f9-a990-49ea-b03d-cd9252091b7c", "node_type": null, "metadata": {}, "hash": "6d49fdd28279b6c2512a0797791e21262b7fe4a53c3511583210db7694d2abb2"}, "3": {"node_id": "5329b6bc-cb6b-4347-b4d8-7e6fce07d150", "node_type": null, "metadata": {}, "hash": "888427e9c0ab11a71cb823f019e9dea072d813e2fc4caf93bfcfe5c6161c9cde"}}, "hash": "ac44a68961af0d91c4796d80b2889352b46d39353d3dd26902ffe2f43c91b7bf", "text": "#define VIR_USE_CPU\n    #define _virBlkioParameter\n    #define _virMemoryParameter\n    #define _virSchedParameter\n    \n\n### Types\n\n    \n    \n    typedef struct _virTypedParameter virBlkioParameter\n    typedef [virBlkioParameter](libvirt-libvirt-domain.html#virBlkioParameter) * virBlkioParameterPtr\n    typedef enum virBlkioParameterType\n    typedef enum virConnectDomainEventAgentLifecycleReason\n    typedef enum virConnectDomainEventAgentLifecycleState\n    typedef enum virConnectDomainEventBlockJobStatus\n    typedef enum virConnectDomainEventDiskChangeReason\n    typedef enum virConnectGetAllDomainStatsFlags\n    typedef enum virConnectListAllDomainsFlags\n    typedef struct _virDomain virDomain\n    typedef enum virDomainAbortJobFlagsValues\n    typedef enum virDomainAgentResponseTimeoutValues\n    typedef enum virDomainAuthorizedSSHKeysSetFlags\n    typedef enum virDomainBackupBeginFlags\n    typedef enum virDomainBlockCommitFlags\n    typedef enum virDomainBlockCopyFlags\n    typedef struct _virDomainBlockInfo virDomainBlockInfo\n    typedef [virDomainBlockInfo](libvirt-libvirt-domain.html#virDomainBlockInfo) * virDomainBlockInfoPtr\n    typedef enum virDomainBlockJobAbortFlags\n    typedef unsigned long long virDomainBlockJobCursor\n    typedef struct _virDomainBlockJobInfo virDomainBlockJobInfo\n    typedef enum virDomainBlockJobInfoFlags\n    typedef [virDomainBlockJobInfo](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5329b6bc-cb6b-4347-b4d8-7e6fce07d150": {"__data__": {"id_": "5329b6bc-cb6b-4347-b4d8-7e6fce07d150", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d9d32335-2193-40f0-893e-9417d38815be", "node_type": null, "metadata": {}, "hash": "ac44a68961af0d91c4796d80b2889352b46d39353d3dd26902ffe2f43c91b7bf"}, "3": {"node_id": "83f3255e-20f2-4f85-bbe1-af4ab457c49e", "node_type": null, "metadata": {}, "hash": "6736d7c454e97b4996544e235f904b24884b80d7df3b9b021c7a82df7490dd86"}}, "hash": "888427e9c0ab11a71cb823f019e9dea072d813e2fc4caf93bfcfe5c6161c9cde", "text": "html#virDomainBlockJobInfo) * virDomainBlockJobInfoPtr\n    typedef enum virDomainBlockJobSetSpeedFlags\n    typedef enum virDomainBlockJobType\n    typedef enum virDomainBlockPullFlags\n    typedef enum virDomainBlockRebaseFlags\n    typedef enum virDomainBlockResizeFlags\n    typedef [virDomainBlockStatsStruct](libvirt-libvirt-domain.html#virDomainBlockStatsStruct) * virDomainBlockStatsPtr\n    typedef struct _virDomainBlockStats virDomainBlockStatsStruct\n    typedef enum virDomainBlockedReason\n    typedef enum virDomainChannelFlags\n    typedef enum virDomainConsoleFlags\n    typedef enum virDomainControlErrorReason\n    typedef struct _virDomainControlInfo virDomainControlInfo\n    typedef [virDomainControlInfo](libvirt-libvirt-domain.html#virDomainControlInfo) * virDomainControlInfoPtr\n    typedef enum virDomainControlState\n    typedef enum virDomainCoreDumpFlags\n    typedef enum virDomainCoreDumpFormat\n    typedef enum virDomainCrashedReason\n    typedef enum virDomainCreateFlags\n    typedef enum virDomainDefineFlags\n    typedef enum virDomainDestroyFlagsValues\n    typedef enum virDomainDeviceModifyFlags\n    typedef enum virDomainDirtyRateCalcFlags\n    typedef enum virDomainDirtyRateStatus\n    typedef struct _virDomainDiskError virDomainDiskError\n    typedef enum virDomainDiskErrorCode\n    typedef [virDomainDiskError](libvirt-libvirt-domain.html#virDomainDiskError) * virDomainDiskErrorPtr\n    typedef enum virDomainEventCrashedDetailType\n    typedef enum virDomainEventDefinedDetailType\n    typedef struct _virDomainEventGraphicsAddress virDomainEventGraphicsAddress\n    typedef [virDomainEventGraphicsAddress](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "83f3255e-20f2-4f85-bbe1-af4ab457c49e": {"__data__": {"id_": "83f3255e-20f2-4f85-bbe1-af4ab457c49e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5329b6bc-cb6b-4347-b4d8-7e6fce07d150", "node_type": null, "metadata": {}, "hash": "888427e9c0ab11a71cb823f019e9dea072d813e2fc4caf93bfcfe5c6161c9cde"}, "3": {"node_id": "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a", "node_type": null, "metadata": {}, "hash": "fd597287f4c37dda1ca5c9ce8f915154ca5c8af95c983c2dd56397ff85ef0a13"}}, "hash": "6736d7c454e97b4996544e235f904b24884b80d7df3b9b021c7a82df7490dd86", "text": "html#virDomainEventGraphicsAddress) * virDomainEventGraphicsAddressPtr\n    typedef enum virDomainEventGraphicsAddressType\n    typedef enum virDomainEventGraphicsPhase\n    typedef struct _virDomainEventGraphicsSubject virDomainEventGraphicsSubject\n    typedef struct _virDomainEventGraphicsSubjectIdentity virDomainEventGraphicsSubjectIdentity\n    typedef [virDomainEventGraphicsSubjectIdentity](libvirt-libvirt-domain.html#virDomainEventGraphicsSubjectIdentity) * virDomainEventGraphicsSubjectIdentityPtr\n    typedef [virDomainEventGraphicsSubject](libvirt-libvirt-domain.html#virDomainEventGraphicsSubject) * virDomainEventGraphicsSubjectPtr\n    typedef enum virDomainEventID\n    typedef enum virDomainEventIOErrorAction\n    typedef enum virDomainEventPMSuspendedDetailType\n    typedef enum virDomainEventResumedDetailType\n    typedef enum virDomainEventShutdownDetailType\n    typedef enum virDomainEventStartedDetailType\n    typedef enum virDomainEventStoppedDetailType\n    typedef enum virDomainEventSuspendedDetailType\n    typedef enum virDomainEventTrayChangeReason\n    typedef enum virDomainEventType\n    typedef enum virDomainEventUndefinedDetailType\n    typedef enum virDomainEventWatchdogAction\n    typedef enum virDomainFDAssociateFlags\n    typedef struct _virDomainFSInfo virDomainFSInfo\n    typedef [virDomainFSInfo](libvirt-libvirt-domain.html#virDomainFSInfo) * virDomainFSInfoPtr\n    typedef enum virDomainGetHostnameFlags\n    typedef enum virDomainGetJobStatsFlags\n    typedef enum virDomainGuestInfoTypes\n    typedef struct _virDomainIOThreadInfo virDomainIOThreadInfo\n    typedef [virDomainIOThreadInfo](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a": {"__data__": {"id_": "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "83f3255e-20f2-4f85-bbe1-af4ab457c49e", "node_type": null, "metadata": {}, "hash": "6736d7c454e97b4996544e235f904b24884b80d7df3b9b021c7a82df7490dd86"}, "3": {"node_id": "34b936e2-70c4-4844-9a59-964456dfe02b", "node_type": null, "metadata": {}, "hash": "8d36c84cd6bb4220d1a43e38c7e9df9a622f6b56eaad4f00f10d060805355c67"}}, "hash": "fd597287f4c37dda1ca5c9ce8f915154ca5c8af95c983c2dd56397ff85ef0a13", "text": "html#virDomainIOThreadInfo) * virDomainIOThreadInfoPtr\n    typedef struct _virDomainInterfaceIPAddress virDomainIPAddress\n    typedef [virDomainIPAddress](libvirt-libvirt-domain.html#virDomainIPAddress) * virDomainIPAddressPtr\n    typedef struct _virDomainInfo virDomainInfo\n    typedef [virDomainInfo](libvirt-libvirt-domain.html#virDomainInfo) * virDomainInfoPtr\n    typedef struct _virDomainInterface virDomainInterface\n    typedef enum virDomainInterfaceAddressesSource\n    typedef [virDomainInterface](libvirt-libvirt-domain.html#virDomainInterface) * virDomainInterfacePtr\n    typedef [virDomainInterfaceStatsStruct](libvirt-libvirt-domain.html#virDomainInterfaceStatsStruct) * virDomainInterfaceStatsPtr\n    typedef struct _virDomainInterfaceStats virDomainInterfaceStatsStruct\n    typedef struct _virDomainJobInfo virDomainJobInfo\n    typedef [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo) * virDomainJobInfoPtr\n    typedef enum virDomainJobOperation\n    typedef enum virDomainJobType\n    typedef enum virDomainLifecycle\n    typedef enum virDomainLifecycleAction\n    typedef enum virDomainMemoryFailureActionType\n    typedef enum virDomainMemoryFailureFlags\n    typedef enum virDomainMemoryFailureRecipientType\n    typedef enum virDomainMemoryFlags\n    typedef enum virDomainMemoryModFlags\n    typedef [virDomainMemoryStatStruct](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "34b936e2-70c4-4844-9a59-964456dfe02b": {"__data__": {"id_": "34b936e2-70c4-4844-9a59-964456dfe02b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a", "node_type": null, "metadata": {}, "hash": "fd597287f4c37dda1ca5c9ce8f915154ca5c8af95c983c2dd56397ff85ef0a13"}, "3": {"node_id": "11f54bfb-956a-4b64-a11b-e098695310bd", "node_type": null, "metadata": {}, "hash": "00b1d74b1a3288bcb448ba08b8f5b1e6fcb68ee013795d8c248452f8dff6078d"}}, "hash": "8d36c84cd6bb4220d1a43e38c7e9df9a622f6b56eaad4f00f10d060805355c67", "text": "html#virDomainMemoryStatStruct) * virDomainMemoryStatPtr\n    typedef struct _virDomainMemoryStat virDomainMemoryStatStruct\n    typedef enum virDomainMemoryStatTags\n    typedef enum virDomainMessageType\n    typedef enum virDomainMetadataType\n    typedef enum virDomainMigrateFlags\n    typedef enum virDomainMigrateMaxSpeedFlags\n    typedef enum virDomainModificationImpact\n    typedef enum virDomainNostateReason\n    typedef enum virDomainNumatuneMemMode\n    typedef enum virDomainOpenGraphicsFlags\n    typedef enum virDomainPMSuspendedDiskReason\n    typedef enum virDomainPMSuspendedReason\n    typedef enum virDomainPausedReason\n    typedef enum virDomainProcessSignal\n    typedef [virDomain](libvirt-libvirt-domain.html#virDomain) * virDomainPtr\n    typedef enum virDomainRebootFlagValues\n    typedef enum virDomainRunningReason\n    typedef enum virDomainSaveImageXMLFlags\n    typedef enum virDomainSaveRestoreFlags\n    typedef enum virDomainSetTimeFlags\n    typedef enum virDomainSetUserPasswordFlags\n    typedef enum virDomainShutdownFlagValues\n    typedef enum virDomainShutdownReason\n    typedef enum virDomainShutoffReason\n    typedef enum virDomainState\n    typedef struct _virDomainStatsRecord virDomainStatsRecord\n    typedef [virDomainStatsRecord](libvirt-libvirt-domain.html#virDomainStatsRecord) * virDomainStatsRecordPtr\n    typedef enum virDomainStatsTypes\n    typedef enum virDomainUndefineFlagsValues\n    typedef enum virDomainVcpuFlags\n    typedef enum virDomainXMLFlags\n    typedef enum virKeycodeSet\n    typedef struct _virTypedParameter virMemoryParameter\n    typedef [virMemoryParameter](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "11f54bfb-956a-4b64-a11b-e098695310bd": {"__data__": {"id_": "11f54bfb-956a-4b64-a11b-e098695310bd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "34b936e2-70c4-4844-9a59-964456dfe02b", "node_type": null, "metadata": {}, "hash": "8d36c84cd6bb4220d1a43e38c7e9df9a622f6b56eaad4f00f10d060805355c67"}, "3": {"node_id": "b012d190-1028-41a3-bf50-7cdde489f2bf", "node_type": null, "metadata": {}, "hash": "1060101d4e722703620626865e9124e3acaf45c52248c220ccd23ede9af9134f"}}, "hash": "00b1d74b1a3288bcb448ba08b8f5b1e6fcb68ee013795d8c248452f8dff6078d", "text": "html#virMemoryParameter) * virMemoryParameterPtr\n    typedef enum virMemoryParameterType\n    typedef struct _virTypedParameter virSchedParameter\n    typedef [virSchedParameter](libvirt-libvirt-domain.html#virSchedParameter) * virSchedParameterPtr\n    typedef enum virSchedParameterType\n    typedef enum virVcpuHostCpuState\n    typedef struct _virVcpuInfo virVcpuInfo\n    typedef [virVcpuInfo](libvirt-libvirt-domain.html#virVcpuInfo) * virVcpuInfoPtr\n    typedef enum virVcpuState\n    \n\n### Functions\n\n    \n    \n    typedef virConnectDomainEventAgentLifecycleCallback\n    void\tvirConnectDomainEventAgentLifecycleCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t int state,   \n    \t\t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventBalloonChangeCallback\n    void\tvirConnectDomainEventBalloonChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t unsigned long long actual,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventBlockJobCallback\n    void\tvirConnectDomainEventBlockJobCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b012d190-1028-41a3-bf50-7cdde489f2bf": {"__data__": {"id_": "b012d190-1028-41a3-bf50-7cdde489f2bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "11f54bfb-956a-4b64-a11b-e098695310bd", "node_type": null, "metadata": {}, "hash": "00b1d74b1a3288bcb448ba08b8f5b1e6fcb68ee013795d8c248452f8dff6078d"}, "3": {"node_id": "9580b141-c56f-41ba-893f-fd3c9589ba31", "node_type": null, "metadata": {}, "hash": "b3610babc801fa849225ce2148d55bb44cab9a4a7639690adc7da0ef4b904e8c"}}, "hash": "1060101d4e722703620626865e9124e3acaf45c52248c220ccd23ede9af9134f", "text": "html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t const char * disk,   \n    \t\t\t\t\t\t int type,   \n    \t\t\t\t\t\t int status,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventBlockThresholdCallback\n    void\tvirConnectDomainEventBlockThresholdCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * dev,   \n    \t\t\t\t\t\t\t const char * path,   \n    \t\t\t\t\t\t\t unsigned long long threshold,   \n    \t\t\t\t\t\t\t unsigned long long excess,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventCallback\n    int\tvirConnectDomainEventCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t int event,   \n    \t\t\t\t\t int detail,   \n    \t\t\t\t\t void * opaque)\n    \n    int\tvirConnectDomainEventDeregister\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virConnectDomainEventCallback](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9580b141-c56f-41ba-893f-fd3c9589ba31": {"__data__": {"id_": "9580b141-c56f-41ba-893f-fd3c9589ba31", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b012d190-1028-41a3-bf50-7cdde489f2bf", "node_type": null, "metadata": {}, "hash": "1060101d4e722703620626865e9124e3acaf45c52248c220ccd23ede9af9134f"}, "3": {"node_id": "d472ea12-44d2-4b5f-a705-7d365f2fb19a", "node_type": null, "metadata": {}, "hash": "6e2237f1427867d21d3a7cd9bf4366176e82ccd92adcc4bfb12a3ec3bd223309"}}, "hash": "b3610babc801fa849225ce2148d55bb44cab9a4a7639690adc7da0ef4b904e8c", "text": "html#virConnectDomainEventCallback) cb)\n    int\tvirConnectDomainEventDeregisterAny\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t int callbackID)\n    typedef virConnectDomainEventDeviceAddedCallback\n    void\tvirConnectDomainEventDeviceAddedCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventDeviceRemovalFailedCallback\n    void\tvirConnectDomainEventDeviceRemovalFailedCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventDeviceRemovedCallback\n    void\tvirConnectDomainEventDeviceRemovedCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventDiskChangeCallback\n    void\tvirConnectDomainEventDiskChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d472ea12-44d2-4b5f-a705-7d365f2fb19a": {"__data__": {"id_": "d472ea12-44d2-4b5f-a705-7d365f2fb19a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9580b141-c56f-41ba-893f-fd3c9589ba31", "node_type": null, "metadata": {}, "hash": "b3610babc801fa849225ce2148d55bb44cab9a4a7639690adc7da0ef4b904e8c"}, "3": {"node_id": "52cac3d0-f41b-4f3a-acdb-1a757d901788", "node_type": null, "metadata": {}, "hash": "747b75507eff2c8a57ddb1bb37852145d48b8e97506e15ce28a6780e157f3324"}}, "hash": "6e2237f1427867d21d3a7cd9bf4366176e82ccd92adcc4bfb12a3ec3bd223309", "text": "html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t const char * oldSrcPath,   \n    \t\t\t\t\t\t const char * newSrcPath,   \n    \t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventGenericCallback\n    void\tvirConnectDomainEventGenericCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventGraphicsCallback\n    void\tvirConnectDomainEventGraphicsCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t int phase,   \n    \t\t\t\t\t\t const [virDomainEventGraphicsAddress](libvirt-libvirt-domain.html#virDomainEventGraphicsAddress) * local,   \n    \t\t\t\t\t\t const [virDomainEventGraphicsAddress](libvirt-libvirt-domain.html#virDomainEventGraphicsAddress) * remote,   \n    \t\t\t\t\t\t const char * authScheme,   \n    \t\t\t\t\t\t const [virDomainEventGraphicsSubject](libvirt-libvirt-domain.html#virDomainEventGraphicsSubject) * subject,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "52cac3d0-f41b-4f3a-acdb-1a757d901788": {"__data__": {"id_": "52cac3d0-f41b-4f3a-acdb-1a757d901788", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d472ea12-44d2-4b5f-a705-7d365f2fb19a", "node_type": null, "metadata": {}, "hash": "6e2237f1427867d21d3a7cd9bf4366176e82ccd92adcc4bfb12a3ec3bd223309"}, "3": {"node_id": "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4", "node_type": null, "metadata": {}, "hash": "be6f0cc87378ca465b98d62fd8944008e98ca7505fe949ab7cde2f12db707395"}}, "hash": "747b75507eff2c8a57ddb1bb37852145d48b8e97506e15ce28a6780e157f3324", "text": "html#virDomainEventGraphicsSubject) * subject,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventIOErrorCallback\n    void\tvirConnectDomainEventIOErrorCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t const char * srcPath,   \n    \t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t int action,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventIOErrorReasonCallback\n    void\tvirConnectDomainEventIOErrorReasonCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * srcPath,   \n    \t\t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t\t int action,   \n    \t\t\t\t\t\t\t const char * reason,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventJobCompletedCallback\n    void\tvirConnectDomainEventJobCompletedCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4": {"__data__": {"id_": "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "52cac3d0-f41b-4f3a-acdb-1a757d901788", "node_type": null, "metadata": {}, "hash": "747b75507eff2c8a57ddb1bb37852145d48b8e97506e15ce28a6780e157f3324"}, "3": {"node_id": "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a", "node_type": null, "metadata": {}, "hash": "116aa0b76b63eb8d28f1f05265d7f8f5d9962c7a0f7a6a35bd0ce02515962cc8"}}, "hash": "be6f0cc87378ca465b98d62fd8944008e98ca7505fe949ab7cde2f12db707395", "text": "html#virTypedParameterPtr) params,   \n    \t\t\t\t\t\t\t int nparams,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventMemoryDeviceSizeChangeCallback\n    void\tvirConnectDomainEventMemoryDeviceSizeChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t const char * alias,   \n    \t\t\t\t\t\t\t unsigned long long size,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventMemoryFailureCallback\n    void\tvirConnectDomainEventMemoryFailureCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t int recipient,   \n    \t\t\t\t\t\t\t int action,   \n    \t\t\t\t\t\t\t unsigned int flags,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventMetadataChangeCallback\n    void\tvirConnectDomainEventMetadataChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t int type,   \n    \t\t\t\t\t\t\t const char * nsuri,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a": {"__data__": {"id_": "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4", "node_type": null, "metadata": {}, "hash": "be6f0cc87378ca465b98d62fd8944008e98ca7505fe949ab7cde2f12db707395"}, "3": {"node_id": "0034b34f-4e9e-423a-a9a4-59e9d16b31cc", "node_type": null, "metadata": {}, "hash": "104d74ad636eb6a4c25733f0a93e9a4d8a3c53eca419fa190f992bae66a159c9"}}, "hash": "116aa0b76b63eb8d28f1f05265d7f8f5d9962c7a0f7a6a35bd0ce02515962cc8", "text": "void * opaque)\n    \n    typedef virConnectDomainEventMigrationIterationCallback\n    void\tvirConnectDomainEventMigrationIterationCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t int iteration,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventPMSuspendCallback\n    void\tvirConnectDomainEventPMSuspendCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventPMSuspendDiskCallback\n    void\tvirConnectDomainEventPMSuspendDiskCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventPMWakeupCallback\n    void\tvirConnectDomainEventPMWakeupCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0034b34f-4e9e-423a-a9a4-59e9d16b31cc": {"__data__": {"id_": "0034b34f-4e9e-423a-a9a4-59e9d16b31cc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a", "node_type": null, "metadata": {}, "hash": "116aa0b76b63eb8d28f1f05265d7f8f5d9962c7a0f7a6a35bd0ce02515962cc8"}, "3": {"node_id": "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171", "node_type": null, "metadata": {}, "hash": "b2e155c681c43912460e07b8ccba91eda0042a3535637a21595695645affa4ae"}}, "hash": "104d74ad636eb6a4c25733f0a93e9a4d8a3c53eca419fa190f992bae66a159c9", "text": "html#virDomainPtr) dom,   \n    \t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventRTCChangeCallback\n    void\tvirConnectDomainEventRTCChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t long long utcoffset,   \n    \t\t\t\t\t\t void * opaque)\n    \n    int\tvirConnectDomainEventRegister\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virConnectDomainEventCallback](libvirt-libvirt-domain.html#virConnectDomainEventCallback) cb,   \n    \t\t\t\t\t void * opaque,   \n    \t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) freecb)\n    int\tvirConnectDomainEventRegisterAny\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t int eventID,   \n    \t\t\t\t\t\t [virConnectDomainEventGenericCallback](libvirt-libvirt-domain.html#virConnectDomainEventGenericCallback) cb,   \n    \t\t\t\t\t\t void * opaque,   \n    \t\t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171": {"__data__": {"id_": "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0034b34f-4e9e-423a-a9a4-59e9d16b31cc", "node_type": null, "metadata": {}, "hash": "104d74ad636eb6a4c25733f0a93e9a4d8a3c53eca419fa190f992bae66a159c9"}, "3": {"node_id": "0f03eba0-de0b-4b57-9690-191c94cb3abd", "node_type": null, "metadata": {}, "hash": "30bbcf5bf5912810553c22c899178ae4933a528fe5f2c776baccf6efc2379fb5"}}, "hash": "b2e155c681c43912460e07b8ccba91eda0042a3535637a21595695645affa4ae", "text": "html#virFreeCallback) freecb)\n    typedef virConnectDomainEventTrayChangeCallback\n    void\tvirConnectDomainEventTrayChangeCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t const char * devAlias,   \n    \t\t\t\t\t\t int reason,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventTunableCallback\n    void\tvirConnectDomainEventTunableCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t\t int nparams,   \n    \t\t\t\t\t\t void * opaque)\n    \n    typedef virConnectDomainEventWatchdogCallback\n    void\tvirConnectDomainEventWatchdogCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t\t int action,   \n    \t\t\t\t\t\t void * opaque)\n    \n    char *\tvirConnectDomainXMLFromNative\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * nativeFormat,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f03eba0-de0b-4b57-9690-191c94cb3abd": {"__data__": {"id_": "0f03eba0-de0b-4b57-9690-191c94cb3abd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171", "node_type": null, "metadata": {}, "hash": "b2e155c681c43912460e07b8ccba91eda0042a3535637a21595695645affa4ae"}, "3": {"node_id": "915b6227-574b-459e-b3ab-b0fa2adeaaeb", "node_type": null, "metadata": {}, "hash": "0dcd3d03665281e5a23b38eed1e396f9e2d6ed78f15bb43fe994befa49bbeb67"}}, "hash": "30bbcf5bf5912810553c22c899178ae4933a528fe5f2c776baccf6efc2379fb5", "text": "const char * nativeFormat,   \n    \t\t\t\t\t const char * nativeConfig,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirConnectDomainXMLToNative\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * nativeFormat,   \n    \t\t\t\t\t const char * domainXml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectGetAllDomainStats\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned int stats,   \n    \t\t\t\t\t [virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) ** retStats,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirConnectGetDomainCapabilities\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * emulatorbin,   \n    \t\t\t\t\t const char * arch,   \n    \t\t\t\t\t const char * machine,   \n    \t\t\t\t\t const char * virttype,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectListAllDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) ** domains,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectListDefinedDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "915b6227-574b-459e-b3ab-b0fa2adeaaeb": {"__data__": {"id_": "915b6227-574b-459e-b3ab-b0fa2adeaaeb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0f03eba0-de0b-4b57-9690-191c94cb3abd", "node_type": null, "metadata": {}, "hash": "30bbcf5bf5912810553c22c899178ae4933a528fe5f2c776baccf6efc2379fb5"}, "3": {"node_id": "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3", "node_type": null, "metadata": {}, "hash": "c42008f5b2990a28ad106441d1f8af5ee838c7efe4a5c4d02489a709cbb50114"}}, "hash": "0dcd3d03665281e5a23b38eed1e396f9e2d6ed78f15bb43fe994befa49bbeb67", "text": "html#virConnectPtr) conn,   \n    \t\t\t\t\t char ** const names,   \n    \t\t\t\t\t int maxnames)\n    int\tvirConnectListDomains\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int * ids,   \n    \t\t\t\t\t int maxids)\n    int\tvirConnectNumOfDefinedDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirConnectNumOfDomains\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirDomainAbortJob\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainAbortJobFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainAddIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int iothread_id,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainAgentSetResponseTimeout\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t\t int timeout,   \n    \t\t\t\t\t\t unsigned int flags)\n    int\tvirDomainAttachDevice\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * xml)\n    int\tvirDomainAttachDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * xml,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3": {"__data__": {"id_": "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "915b6227-574b-459e-b3ab-b0fa2adeaaeb", "node_type": null, "metadata": {}, "hash": "0dcd3d03665281e5a23b38eed1e396f9e2d6ed78f15bb43fe994befa49bbeb67"}, "3": {"node_id": "74ca926e-37e8-460f-8c05-15600a59a916", "node_type": null, "metadata": {}, "hash": "27a3383c6484050d386bbbf8f9343d427b0e25f91a1b731a6b530fb58a27031b"}}, "hash": "c42008f5b2990a28ad106441d1f8af5ee838c7efe4a5c4d02489a709cbb50114", "text": "const char * xml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainAuthorizedSSHKeysGet\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * user,   \n    \t\t\t\t\t char *** keys,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainAuthorizedSSHKeysSet\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * user,   \n    \t\t\t\t\t const char ** keys,   \n    \t\t\t\t\t unsigned int nkeys,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBackupBegin\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * backupXML,   \n    \t\t\t\t\t const char * checkpointXML,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainBackupGetXMLDesc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockCommit\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t const char * base,   \n    \t\t\t\t\t const char * top,   \n    \t\t\t\t\t unsigned long bandwidth,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "74ca926e-37e8-460f-8c05-15600a59a916": {"__data__": {"id_": "74ca926e-37e8-460f-8c05-15600a59a916", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3", "node_type": null, "metadata": {}, "hash": "c42008f5b2990a28ad106441d1f8af5ee838c7efe4a5c4d02489a709cbb50114"}, "3": {"node_id": "8c43aed9-0d90-4175-a210-591a8d8420d0", "node_type": null, "metadata": {}, "hash": "aefb9dd8926a97a05ab85713f06d73fda05e59316ba6f420d7113a61bcb20111"}}, "hash": "27a3383c6484050d386bbbf8f9343d427b0e25f91a1b731a6b530fb58a27031b", "text": "unsigned long bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockCopy\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t const char * destxml,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockJobAbort\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockJobSetSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t unsigned long bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockPeek\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t unsigned long long offset,   \n    \t\t\t\t\t size_t size,   \n    \t\t\t\t\t void * buffer,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockPull\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8c43aed9-0d90-4175-a210-591a8d8420d0": {"__data__": {"id_": "8c43aed9-0d90-4175-a210-591a8d8420d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "74ca926e-37e8-460f-8c05-15600a59a916", "node_type": null, "metadata": {}, "hash": "27a3383c6484050d386bbbf8f9343d427b0e25f91a1b731a6b530fb58a27031b"}, "3": {"node_id": "be6efeee-97f9-4e7c-945c-0371da1404dd", "node_type": null, "metadata": {}, "hash": "8fdfd534f283a34380fced7572d90dac224ee1a3985fbcf30c09804457115450"}}, "hash": "aefb9dd8926a97a05ab85713f06d73fda05e59316ba6f420d7113a61bcb20111", "text": "const char * disk,   \n    \t\t\t\t\t unsigned long bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockRebase\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t const char * base,   \n    \t\t\t\t\t unsigned long bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockResize\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t unsigned long long size,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainBlockStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virDomainBlockStatsPtr](libvirt-libvirt-domain.html#virDomainBlockStatsPtr) stats,   \n    \t\t\t\t\t size_t size)\n    int\tvirDomainBlockStatsFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainCoreDump\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "be6efeee-97f9-4e7c-945c-0371da1404dd": {"__data__": {"id_": "be6efeee-97f9-4e7c-945c-0371da1404dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8c43aed9-0d90-4175-a210-591a8d8420d0", "node_type": null, "metadata": {}, "hash": "aefb9dd8926a97a05ab85713f06d73fda05e59316ba6f420d7113a61bcb20111"}, "3": {"node_id": "fa6c6498-897b-484c-996c-158042702e26", "node_type": null, "metadata": {}, "hash": "9d21936e0976a70682d1f40393fac4486fc82ab6f4acde5cf4abd9cd82e5a2a0"}}, "hash": "8fdfd534f283a34380fced7572d90dac224ee1a3985fbcf30c09804457115450", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * to,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainCoreDumpWithFormat\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * to,   \n    \t\t\t\t\t unsigned int dumpformat,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainCreate\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainCreateLinux\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * xmlDesc,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainCreateWithFiles\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int nfiles,   \n    \t\t\t\t\t int * files,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainCreateWithFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainCreateXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * xmlDesc,   \n    \t\t\t\t\t unsigned int flags)\n    [virDomainPtr](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fa6c6498-897b-484c-996c-158042702e26": {"__data__": {"id_": "fa6c6498-897b-484c-996c-158042702e26", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "be6efeee-97f9-4e7c-945c-0371da1404dd", "node_type": null, "metadata": {}, "hash": "8fdfd534f283a34380fced7572d90dac224ee1a3985fbcf30c09804457115450"}, "3": {"node_id": "a6adba8d-d7f6-410e-803e-e3b0522de68c", "node_type": null, "metadata": {}, "hash": "5860aceb6cf44f17d2fe6f82f69edd1b0381631cbffa9ac07c7e1e321d17c07d"}}, "hash": "9d21936e0976a70682d1f40393fac4486fc82ab6f4acde5cf4abd9cd82e5a2a0", "text": "html#virDomainPtr)\tvirDomainCreateXMLWithFiles\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t const char * xmlDesc,   \n    \t\t\t\t\t\t unsigned int nfiles,   \n    \t\t\t\t\t\t int * files,   \n    \t\t\t\t\t\t unsigned int flags)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainDefineXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * xml)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainDefineXMLFlags\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * xml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainDelIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int iothread_id,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainDestroy\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainDestroyFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainDetachDevice\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * xml)\n    int\tvirDomainDetachDeviceAlias\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a6adba8d-d7f6-410e-803e-e3b0522de68c": {"__data__": {"id_": "a6adba8d-d7f6-410e-803e-e3b0522de68c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fa6c6498-897b-484c-996c-158042702e26", "node_type": null, "metadata": {}, "hash": "9d21936e0976a70682d1f40393fac4486fc82ab6f4acde5cf4abd9cd82e5a2a0"}, "3": {"node_id": "55af4377-5b27-4e86-9a5e-1a564486d794", "node_type": null, "metadata": {}, "hash": "5439e659715863be9083983fdc712760b5065e4381f829979dd3c3bebf07f3bc"}}, "hash": "5860aceb6cf44f17d2fe6f82f69edd1b0381631cbffa9ac07c7e1e321d17c07d", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * alias,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainDetachDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * xml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainFDAssociate\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t unsigned int nfds,   \n    \t\t\t\t\t int * fds,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainFSFreeze\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char ** mountpoints,   \n    \t\t\t\t\t unsigned int nmountpoints,   \n    \t\t\t\t\t unsigned int flags)\n    void\tvirDomainFSInfoFree\t\t([virDomainFSInfoPtr](libvirt-libvirt-domain.html#virDomainFSInfoPtr) info)\n    int\tvirDomainFSThaw\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char ** mountpoints,   \n    \t\t\t\t\t unsigned int nmountpoints,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainFSTrim\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * mountPoint,   \n    \t\t\t\t\t unsigned long long minimum,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "55af4377-5b27-4e86-9a5e-1a564486d794": {"__data__": {"id_": "55af4377-5b27-4e86-9a5e-1a564486d794", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a6adba8d-d7f6-410e-803e-e3b0522de68c", "node_type": null, "metadata": {}, "hash": "5860aceb6cf44f17d2fe6f82f69edd1b0381631cbffa9ac07c7e1e321d17c07d"}, "3": {"node_id": "134f7331-87b2-4acc-b634-a4c65235f388", "node_type": null, "metadata": {}, "hash": "273074d621ccb6679ddcc8dfe2e04b0170e4e073159a7a693e6a39aeda20d933"}}, "hash": "5439e659715863be9083983fdc712760b5065e4381f829979dd3c3bebf07f3bc", "text": "unsigned long long minimum,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainFree\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetAutostart\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int * autostart)\n    int\tvirDomainGetBlkioParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetBlockInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virDomainBlockInfoPtr](libvirt-libvirt-domain.html#virDomainBlockInfoPtr) info,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetBlockIoTune\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetBlockJobInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "134f7331-87b2-4acc-b634-a4c65235f388": {"__data__": {"id_": "134f7331-87b2-4acc-b634-a4c65235f388", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "55af4377-5b27-4e86-9a5e-1a564486d794", "node_type": null, "metadata": {}, "hash": "5439e659715863be9083983fdc712760b5065e4381f829979dd3c3bebf07f3bc"}, "3": {"node_id": "ad086af0-6d69-4a18-9746-c1a1f8baabc8", "node_type": null, "metadata": {}, "hash": "3f7c908b4f677adbe1ef6b38f774bb714ec2e8536df5574edd74b40245a641a4"}}, "hash": "273074d621ccb6679ddcc8dfe2e04b0170e4e073159a7a693e6a39aeda20d933", "text": "html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virDomainBlockJobInfoPtr](libvirt-libvirt-domain.html#virDomainBlockJobInfoPtr) info,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetCPUStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t unsigned int nparams,   \n    \t\t\t\t\t int start_cpu,   \n    \t\t\t\t\t unsigned int ncpus,   \n    \t\t\t\t\t unsigned int flags)\n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirDomainGetConnect\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n    int\tvirDomainGetControlInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virDomainControlInfoPtr](libvirt-libvirt-domain.html#virDomainControlInfoPtr) info,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetDiskErrors\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t [virDomainDiskErrorPtr](libvirt-libvirt-domain.html#virDomainDiskErrorPtr) errors,   \n    \t\t\t\t\t unsigned int maxerrors,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetEmulatorPinInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad086af0-6d69-4a18-9746-c1a1f8baabc8": {"__data__": {"id_": "ad086af0-6d69-4a18-9746-c1a1f8baabc8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "134f7331-87b2-4acc-b634-a4c65235f388", "node_type": null, "metadata": {}, "hash": "273074d621ccb6679ddcc8dfe2e04b0170e4e073159a7a693e6a39aeda20d933"}, "3": {"node_id": "877bedea-1e72-481f-b795-7f1a85efd9a6", "node_type": null, "metadata": {}, "hash": "6f8ca03a675f1cb956bbe60a48f8a80c4b8fb49b950154f2f9e490dff7ee9bfc"}}, "hash": "3f7c908b4f677adbe1ef6b38f774bb714ec2e8536df5574edd74b40245a641a4", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned char * cpumap,   \n    \t\t\t\t\t int maplen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetFSInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t [virDomainFSInfoPtr](libvirt-libvirt-domain.html#virDomainFSInfoPtr) ** info,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetGuestInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int types,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetGuestVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t unsigned int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainGetHostname\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    unsigned int\tvirDomainGetID\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetIOThreadInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "877bedea-1e72-481f-b795-7f1a85efd9a6": {"__data__": {"id_": "877bedea-1e72-481f-b795-7f1a85efd9a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ad086af0-6d69-4a18-9746-c1a1f8baabc8", "node_type": null, "metadata": {}, "hash": "3f7c908b4f677adbe1ef6b38f774bb714ec2e8536df5574edd74b40245a641a4"}, "3": {"node_id": "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015", "node_type": null, "metadata": {}, "hash": "b16c139805084a708b59706684f2006ff2d59bbc841d9d7cc781d973eff1d577"}}, "hash": "6f8ca03a675f1cb956bbe60a48f8a80c4b8fb49b950154f2f9e490dff7ee9bfc", "text": "html#virDomainPtr) dom,   \n    \t\t\t\t\t [virDomainIOThreadInfoPtr](libvirt-libvirt-domain.html#virDomainIOThreadInfoPtr) ** info,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virDomainInfoPtr](libvirt-libvirt-domain.html#virDomainInfoPtr) info)\n    int\tvirDomainGetInterfaceParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * device,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetJobInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virDomainJobInfoPtr](libvirt-libvirt-domain.html#virDomainJobInfoPtr) info)\n    int\tvirDomainGetJobStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int * type,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetLaunchSecurityInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015": {"__data__": {"id_": "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "877bedea-1e72-481f-b795-7f1a85efd9a6", "node_type": null, "metadata": {}, "hash": "6f8ca03a675f1cb956bbe60a48f8a80c4b8fb49b950154f2f9e490dff7ee9bfc"}, "3": {"node_id": "c6795180-11ba-4666-8e54-0ecb53ed8480", "node_type": null, "metadata": {}, "hash": "94de933534c1a4d0e4daf6d5f1d200702d36b842c8f96af9fd0d78bf0e80031c"}}, "hash": "b16c139805084a708b59706684f2006ff2d59bbc841d9d7cc781d973eff1d577", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    unsigned long\tvirDomainGetMaxMemory\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetMaxVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetMemoryParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetMessages\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t char *** msgs,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainGetMetadata\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int type,   \n    \t\t\t\t\t const char * uri,   \n    \t\t\t\t\t unsigned int flags)\n    const char *\tvirDomainGetName\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetNumaParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c6795180-11ba-4666-8e54-0ecb53ed8480": {"__data__": {"id_": "c6795180-11ba-4666-8e54-0ecb53ed8480", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015", "node_type": null, "metadata": {}, "hash": "b16c139805084a708b59706684f2006ff2d59bbc841d9d7cc781d973eff1d577"}, "3": {"node_id": "32855e67-9e0f-4388-a61f-49830ffdcd72", "node_type": null, "metadata": {}, "hash": "88e07eb9eb54dea3a0f4a516ed0bcd706cfaa749f954bb989ffbb16846b29c08"}}, "hash": "94de933534c1a4d0e4daf6d5f1d200702d36b842c8f96af9fd0d78bf0e80031c", "text": "html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainGetOSType\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainGetPerfEvents\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetSchedulerParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams)\n    int\tvirDomainGetSchedulerParametersFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t\t int * nparams,   \n    \t\t\t\t\t\t unsigned int flags)\n    char *\tvirDomainGetSchedulerType\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int * nparams)\n    int\tvirDomainGetSecurityLabel\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virSecurityLabelPtr](libvirt-libvirt-host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "32855e67-9e0f-4388-a61f-49830ffdcd72": {"__data__": {"id_": "32855e67-9e0f-4388-a61f-49830ffdcd72", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c6795180-11ba-4666-8e54-0ecb53ed8480", "node_type": null, "metadata": {}, "hash": "94de933534c1a4d0e4daf6d5f1d200702d36b842c8f96af9fd0d78bf0e80031c"}, "3": {"node_id": "5471c1af-2d62-4d4f-98c1-c890bb4a7528", "node_type": null, "metadata": {}, "hash": "878899cd4087ec98edde25701c6c30902d599870942c6392eaf531fc6b473fb0"}}, "hash": "88e07eb9eb54dea3a0f4a516ed0bcd706cfaa749f954bb989ffbb16846b29c08", "text": "html#virSecurityLabelPtr) seclabel)\n    int\tvirDomainGetSecurityLabelList\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virSecurityLabelPtr](libvirt-libvirt-host.html#virSecurityLabelPtr) * seclabels)\n    int\tvirDomainGetState\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int * state,   \n    \t\t\t\t\t int * reason,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetTime\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t long long * seconds,   \n    \t\t\t\t\t unsigned int * nseconds,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetUUID\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned char * uuid)\n    int\tvirDomainGetUUIDString\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t char * buf)\n    int\tvirDomainGetVcpuPinInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int ncpumaps,   \n    \t\t\t\t\t unsigned char * cpumaps,   \n    \t\t\t\t\t int maplen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainGetVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5471c1af-2d62-4d4f-98c1-c890bb4a7528": {"__data__": {"id_": "5471c1af-2d62-4d4f-98c1-c890bb4a7528", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "32855e67-9e0f-4388-a61f-49830ffdcd72", "node_type": null, "metadata": {}, "hash": "88e07eb9eb54dea3a0f4a516ed0bcd706cfaa749f954bb989ffbb16846b29c08"}, "3": {"node_id": "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc", "node_type": null, "metadata": {}, "hash": "c09950a4028b0dac6bdae08731d91313e31f0615dce3ce7082f65836db43d923"}}, "hash": "878899cd4087ec98edde25701c6c30902d599870942c6392eaf531fc6b473fb0", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t [virVcpuInfoPtr](libvirt-libvirt-domain.html#virVcpuInfoPtr) info,   \n    \t\t\t\t\t int maxinfo,   \n    \t\t\t\t\t unsigned char * cpumaps,   \n    \t\t\t\t\t int maplen)\n    int\tvirDomainGetVcpusFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainGetXMLDesc\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainHasManagedSaveImage\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int flags)\n    void\tvirDomainIOThreadInfoFree\t([virDomainIOThreadInfoPtr](libvirt-libvirt-domain.html#virDomainIOThreadInfoPtr) info)\n    int\tvirDomainInjectNMI\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainInterfaceAddresses\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t [virDomainInterfacePtr](libvirt-libvirt-domain.html#virDomainInterfacePtr) ** ifaces,   \n    \t\t\t\t\t unsigned int source,   \n    \t\t\t\t\t unsigned int flags)\n    void\tvirDomainInterfaceFree\t\t([virDomainInterfacePtr](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc": {"__data__": {"id_": "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5471c1af-2d62-4d4f-98c1-c890bb4a7528", "node_type": null, "metadata": {}, "hash": "878899cd4087ec98edde25701c6c30902d599870942c6392eaf531fc6b473fb0"}, "3": {"node_id": "4de9ddc0-de95-4e3b-8369-f457a433c903", "node_type": null, "metadata": {}, "hash": "81982882dfbd1dd029bbce2ae7f3442c8c937adeb3be827cd56edb8025913ef3"}}, "hash": "c09950a4028b0dac6bdae08731d91313e31f0615dce3ce7082f65836db43d923", "text": "html#virDomainInterfacePtr) iface)\n    int\tvirDomainInterfaceStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * device,   \n    \t\t\t\t\t [virDomainInterfaceStatsPtr](libvirt-libvirt-domain.html#virDomainInterfaceStatsPtr) stats,   \n    \t\t\t\t\t size_t size)\n    int\tvirDomainIsActive\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n    int\tvirDomainIsPersistent\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n    int\tvirDomainIsUpdated\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n    int\tvirDomainListGetStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) * doms,   \n    \t\t\t\t\t unsigned int stats,   \n    \t\t\t\t\t [virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) ** retStats,   \n    \t\t\t\t\t unsigned int flags)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByID\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int id)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByName\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * name)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByUUID\t([virConnectPtr](libvirt-libvirt-host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4de9ddc0-de95-4e3b-8369-f457a433c903": {"__data__": {"id_": "4de9ddc0-de95-4e3b-8369-f457a433c903", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc", "node_type": null, "metadata": {}, "hash": "c09950a4028b0dac6bdae08731d91313e31f0615dce3ce7082f65836db43d923"}, "3": {"node_id": "763133ca-a0f6-4645-bfcd-ff6b0f0651a1", "node_type": null, "metadata": {}, "hash": "f7c52ddb6dd31921913bc354714def9f0ff3f7b2cc579ed76fff7022a38446f3"}}, "hash": "81982882dfbd1dd029bbce2ae7f3442c8c937adeb3be827cd56edb8025913ef3", "text": "html#virConnectPtr) conn,   \n    \t\t\t\t\t const unsigned char * uuid)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByUUIDString\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t const char * uuidstr)\n    int\tvirDomainManagedSave\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainManagedSaveDefineXML\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * dxml,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainManagedSaveGetXMLDesc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainManagedSaveRemove\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMemoryPeek\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned long long start,   \n    \t\t\t\t\t size_t size,   \n    \t\t\t\t\t void * buffer,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMemoryStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t [virDomainMemoryStatPtr](libvirt-libvirt-domain.html#virDomainMemoryStatPtr) stats,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "763133ca-a0f6-4645-bfcd-ff6b0f0651a1": {"__data__": {"id_": "763133ca-a0f6-4645-bfcd-ff6b0f0651a1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4de9ddc0-de95-4e3b-8369-f457a433c903", "node_type": null, "metadata": {}, "hash": "81982882dfbd1dd029bbce2ae7f3442c8c937adeb3be827cd56edb8025913ef3"}, "3": {"node_id": "9734cbf8-3919-48fe-b5bf-33d3cfc33ced", "node_type": null, "metadata": {}, "hash": "eb2486b32ab905c5e7a35e0a541b65837dd65d3d6a8580c93c6ad0840e02929a"}}, "hash": "f7c52ddb6dd31921913bc354714def9f0ff3f7b2cc579ed76fff7022a38446f3", "text": "html#virDomainMemoryStatPtr) stats,   \n    \t\t\t\t\t unsigned int nr_stats,   \n    \t\t\t\t\t unsigned int flags)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,   \n    \t\t\t\t\t unsigned long flags,   \n    \t\t\t\t\t const char * dname,   \n    \t\t\t\t\t const char * uri,   \n    \t\t\t\t\t unsigned long bandwidth)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate2\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,   \n    \t\t\t\t\t const char * dxml,   \n    \t\t\t\t\t unsigned long flags,   \n    \t\t\t\t\t const char * dname,   \n    \t\t\t\t\t const char * uri,   \n    \t\t\t\t\t unsigned long bandwidth)\n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate3\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9734cbf8-3919-48fe-b5bf-33d3cfc33ced": {"__data__": {"id_": "9734cbf8-3919-48fe-b5bf-33d3cfc33ced", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "763133ca-a0f6-4645-bfcd-ff6b0f0651a1", "node_type": null, "metadata": {}, "hash": "f7c52ddb6dd31921913bc354714def9f0ff3f7b2cc579ed76fff7022a38446f3"}, "3": {"node_id": "7b056adf-d876-434f-8472-8552d84b576d", "node_type": null, "metadata": {}, "hash": "ae9954434ef88950c7f3284e934e5e8a660e20ef5e8ce94c2de6ecafaa07ad8c"}}, "hash": "eb2486b32ab905c5e7a35e0a541b65837dd65d3d6a8580c93c6ad0840e02929a", "text": "html#virTypedParameterPtr) params,   \n    \t\t\t\t\t unsigned int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateGetCompressionCache\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t\t unsigned long long * cacheSize,   \n    \t\t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateGetMaxDowntime\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long long * downtime,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateGetMaxSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long * bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateSetCompressionCache\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t\t unsigned long long cacheSize,   \n    \t\t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateSetMaxDowntime\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long long downtime,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateSetMaxSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long bandwidth,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateStartPostCopy\t([virDomainPtr](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7b056adf-d876-434f-8472-8552d84b576d": {"__data__": {"id_": "7b056adf-d876-434f-8472-8552d84b576d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9734cbf8-3919-48fe-b5bf-33d3cfc33ced", "node_type": null, "metadata": {}, "hash": "eb2486b32ab905c5e7a35e0a541b65837dd65d3d6a8580c93c6ad0840e02929a"}, "3": {"node_id": "4d50b644-801b-470b-a6d4-58f70a6572ad", "node_type": null, "metadata": {}, "hash": "851397c42afd9fbf436ba9956ac16281a935ecbd1d45d2c2ed804877aa43c2e1"}}, "hash": "ae9954434ef88950c7f3284e934e5e8a660e20ef5e8ce94c2de6ecafaa07ad8c", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainMigrateToURI\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * duri,   \n    \t\t\t\t\t unsigned long flags,   \n    \t\t\t\t\t const char * dname,   \n    \t\t\t\t\t unsigned long bandwidth)\n    int\tvirDomainMigrateToURI2\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * dconnuri,   \n    \t\t\t\t\t const char * miguri,   \n    \t\t\t\t\t const char * dxml,   \n    \t\t\t\t\t unsigned long flags,   \n    \t\t\t\t\t const char * dname,   \n    \t\t\t\t\t unsigned long bandwidth)\n    int\tvirDomainMigrateToURI3\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * dconnuri,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t unsigned int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainOpenChannel\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * name,   \n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) st,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4d50b644-801b-470b-a6d4-58f70a6572ad": {"__data__": {"id_": "4d50b644-801b-470b-a6d4-58f70a6572ad", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7b056adf-d876-434f-8472-8552d84b576d", "node_type": null, "metadata": {}, "hash": "ae9954434ef88950c7f3284e934e5e8a660e20ef5e8ce94c2de6ecafaa07ad8c"}, "3": {"node_id": "38153a6c-29d1-4950-b6c5-816c16babf6d", "node_type": null, "metadata": {}, "hash": "37febc3d1a974a61f6a4c1fedaff73b9ab7a88431d3ec21e3c75c0f7ee4bbd2f"}}, "hash": "851397c42afd9fbf436ba9956ac16281a935ecbd1d45d2c2ed804877aa43c2e1", "text": "html#virStreamPtr) st,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainOpenConsole\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * dev_name,   \n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) st,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainOpenGraphics\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int idx,   \n    \t\t\t\t\t int fd,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainOpenGraphicsFD\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int idx,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainPMSuspendForDuration\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int target,   \n    \t\t\t\t\t unsigned long long duration,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainPMWakeup\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainPinEmulator\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned char * cpumap,   \n    \t\t\t\t\t int maplen,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "38153a6c-29d1-4950-b6c5-816c16babf6d": {"__data__": {"id_": "38153a6c-29d1-4950-b6c5-816c16babf6d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4d50b644-801b-470b-a6d4-58f70a6572ad", "node_type": null, "metadata": {}, "hash": "851397c42afd9fbf436ba9956ac16281a935ecbd1d45d2c2ed804877aa43c2e1"}, "3": {"node_id": "64ed6eea-0bed-4bab-bf2c-88b71d040353", "node_type": null, "metadata": {}, "hash": "a92711175636a4dd06df193e023e8e796017cb8d2d278a33bf5884194bbfe37e"}}, "hash": "37febc3d1a974a61f6a4c1fedaff73b9ab7a88431d3ec21e3c75c0f7ee4bbd2f", "text": "int maplen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainPinIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int iothread_id,   \n    \t\t\t\t\t unsigned char * cpumap,   \n    \t\t\t\t\t int maplen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainPinVcpu\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int vcpu,   \n    \t\t\t\t\t unsigned char * cpumap,   \n    \t\t\t\t\t int maplen)\n    int\tvirDomainPinVcpuFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int vcpu,   \n    \t\t\t\t\t unsigned char * cpumap,   \n    \t\t\t\t\t int maplen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainReboot\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainRef\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainRename\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * new_name,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64ed6eea-0bed-4bab-bf2c-88b71d040353": {"__data__": {"id_": "64ed6eea-0bed-4bab-bf2c-88b71d040353", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "38153a6c-29d1-4950-b6c5-816c16babf6d", "node_type": null, "metadata": {}, "hash": "37febc3d1a974a61f6a4c1fedaff73b9ab7a88431d3ec21e3c75c0f7ee4bbd2f"}, "3": {"node_id": "a57d837d-e570-40e5-8bbb-31e991e116d2", "node_type": null, "metadata": {}, "hash": "ec174130817a66dd998a28b674e1d6fcbbab510fe7bcbaa5b2993711ffede17f"}}, "hash": "a92711175636a4dd06df193e023e8e796017cb8d2d278a33bf5884194bbfe37e", "text": "const char * new_name,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainReset\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainRestore\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * from)\n    int\tvirDomainRestoreFlags\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * from,   \n    \t\t\t\t\t const char * dxml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainRestoreParams\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainResume\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainSave\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * to)\n    int\tvirDomainSaveFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * to,   \n    \t\t\t\t\t const char * dxml,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a57d837d-e570-40e5-8bbb-31e991e116d2": {"__data__": {"id_": "a57d837d-e570-40e5-8bbb-31e991e116d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "64ed6eea-0bed-4bab-bf2c-88b71d040353", "node_type": null, "metadata": {}, "hash": "a92711175636a4dd06df193e023e8e796017cb8d2d278a33bf5884194bbfe37e"}, "3": {"node_id": "96c0b7c2-8dd2-477e-939a-c47f02a83e74", "node_type": null, "metadata": {}, "hash": "5a10babff6afaac34a37368f8a5bd9903faba2abab51d2da526e38fdb969b738"}}, "hash": "ec174130817a66dd998a28b674e1d6fcbbab510fe7bcbaa5b2993711ffede17f", "text": "const char * dxml,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSaveImageDefineXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * file,   \n    \t\t\t\t\t const char * dxml,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainSaveImageGetXMLDesc\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * file,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSaveParams\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirDomainScreenshot\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) stream,   \n    \t\t\t\t\t unsigned int screen,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSendKey\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int codeset,   \n    \t\t\t\t\t unsigned int holdtime,   \n    \t\t\t\t\t unsigned int * keycodes,   \n    \t\t\t\t\t int nkeycodes,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "96c0b7c2-8dd2-477e-939a-c47f02a83e74": {"__data__": {"id_": "96c0b7c2-8dd2-477e-939a-c47f02a83e74", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a57d837d-e570-40e5-8bbb-31e991e116d2", "node_type": null, "metadata": {}, "hash": "ec174130817a66dd998a28b674e1d6fcbbab510fe7bcbaa5b2993711ffede17f"}, "3": {"node_id": "ad344d8b-09fe-4915-a31c-ab5119d9c29e", "node_type": null, "metadata": {}, "hash": "eb7d586e32737124cfd3c29b7b755be95f584672b8fd26a357d3acb14c685c8b"}}, "hash": "5a10babff6afaac34a37368f8a5bd9903faba2abab51d2da526e38fdb969b738", "text": "int nkeycodes,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSendProcessSignal\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t long long pid_value,   \n    \t\t\t\t\t unsigned int signum,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetAutostart\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int autostart)\n    int\tvirDomainSetBlkioParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetBlockIoTune\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * disk,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetBlockThreshold\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * dev,   \n    \t\t\t\t\t unsigned long long threshold,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad344d8b-09fe-4915-a31c-ab5119d9c29e": {"__data__": {"id_": "ad344d8b-09fe-4915-a31c-ab5119d9c29e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "96c0b7c2-8dd2-477e-939a-c47f02a83e74", "node_type": null, "metadata": {}, "hash": "5a10babff6afaac34a37368f8a5bd9903faba2abab51d2da526e38fdb969b738"}, "3": {"node_id": "535c7947-183f-401d-8033-8cb7fd030b2d", "node_type": null, "metadata": {}, "hash": "62703989e9448e407ece6e0c1fd102dfbee0076e75c4ebc48abd71188ba82701"}}, "hash": "eb7d586e32737124cfd3c29b7b755be95f584672b8fd26a357d3acb14c685c8b", "text": "unsigned long long threshold,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetGuestVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * cpumap,   \n    \t\t\t\t\t int state,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetIOThreadParams\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int iothread_id,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetInterfaceParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * device,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetLaunchSecurityState\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetLifecycleAction\t([virDomainPtr](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "535c7947-183f-401d-8033-8cb7fd030b2d": {"__data__": {"id_": "535c7947-183f-401d-8033-8cb7fd030b2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ad344d8b-09fe-4915-a31c-ab5119d9c29e", "node_type": null, "metadata": {}, "hash": "eb7d586e32737124cfd3c29b7b755be95f584672b8fd26a357d3acb14c685c8b"}, "3": {"node_id": "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9", "node_type": null, "metadata": {}, "hash": "dede1458616ce3ea4ea26b2f838d7ba567342fb735d851044d0437a7c9bfb592"}}, "hash": "62703989e9448e407ece6e0c1fd102dfbee0076e75c4ebc48abd71188ba82701", "text": "html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int type,   \n    \t\t\t\t\t unsigned int action,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetMaxMemory\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long memory)\n    int\tvirDomainSetMemory\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long memory)\n    int\tvirDomainSetMemoryFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned long memory,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetMemoryParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetMemoryStatsPeriod\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int period,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetMetadata\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int type,   \n    \t\t\t\t\t const char * metadata,   \n    \t\t\t\t\t const char * key,   \n    \t\t\t\t\t const char * uri,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9": {"__data__": {"id_": "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "535c7947-183f-401d-8033-8cb7fd030b2d", "node_type": null, "metadata": {}, "hash": "62703989e9448e407ece6e0c1fd102dfbee0076e75c4ebc48abd71188ba82701"}, "3": {"node_id": "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2", "node_type": null, "metadata": {}, "hash": "3bb006905e329723a5a44add035f332de36b22ed3164ce64d53069884acc6095"}}, "hash": "dede1458616ce3ea4ea26b2f838d7ba567342fb735d851044d0437a7c9bfb592", "text": "const char * uri,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetNumaParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetPerfEvents\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetSchedulerParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams)\n    int\tvirDomainSetSchedulerParametersFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t\t int nparams,   \n    \t\t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetTime\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t long long seconds,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2": {"__data__": {"id_": "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9", "node_type": null, "metadata": {}, "hash": "dede1458616ce3ea4ea26b2f838d7ba567342fb735d851044d0437a7c9bfb592"}, "3": {"node_id": "302677d6-9ee2-422c-82d8-c4a77f7a4101", "node_type": null, "metadata": {}, "hash": "bd7ebc8d5c4e143298097db8c8a5633c90e6e1c50641b766a447e5a23d1f0840"}}, "hash": "3bb006905e329723a5a44add035f332de36b22ed3164ce64d53069884acc6095", "text": "long long seconds,   \n    \t\t\t\t\t unsigned int nseconds,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetUserPassword\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,   \n    \t\t\t\t\t const char * user,   \n    \t\t\t\t\t const char * password,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetVcpu\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * vcpumap,   \n    \t\t\t\t\t int state,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainSetVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int nvcpus)\n    int\tvirDomainSetVcpusFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int nvcpus,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainShutdown\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainShutdownFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainStartDirtyRateCalc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t int seconds,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "302677d6-9ee2-422c-82d8-c4a77f7a4101": {"__data__": {"id_": "302677d6-9ee2-422c-82d8-c4a77f7a4101", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2", "node_type": null, "metadata": {}, "hash": "3bb006905e329723a5a44add035f332de36b22ed3164ce64d53069884acc6095"}, "3": {"node_id": "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa", "node_type": null, "metadata": {}, "hash": "240a1707b48515026b9d0e225bf6aec343fdc5e60ee44fb43f638934d0c07793"}}, "hash": "bd7ebc8d5c4e143298097db8c8a5633c90e6e1c50641b766a447e5a23d1f0840", "text": "int seconds,   \n    \t\t\t\t\t unsigned int flags)\n    void\tvirDomainStatsRecordListFree\t([virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) * stats)\n    int\tvirDomainSuspend\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainUndefine\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n    int\tvirDomainUndefineFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirDomainUpdateDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,   \n    \t\t\t\t\t const char * xml,   \n    \t\t\t\t\t unsigned int flags)\n    \n\n## Description\n\n### Macros\u00c2\u00b6\n\n### `VIR_COPY_CPUMAP`\u00c2\u00b6\n\n    \n    \n    #define VIR_COPY_CPUMAP\n\nThis macro is to be used in conjunction with [virDomainGetVcpus](libvirt-\nlibvirt-domain.html#virDomainGetVcpus)() and [virDomainPinVcpu](libvirt-\nlibvirt-domain.html#virDomainPinVcpu)() APIs. [VIR_COPY_CPUMAP](libvirt-\nlibvirt-domain.html#VIR_COPY_CPUMAP) macro extracts the cpumap of the\nspecified vcpu from cpumaps array and copies it into cpumap to be used later\nby [virDomainPinVcpu](libvirt-libvirt-domain.html#virDomainPinVcpu)() API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa": {"__data__": {"id_": "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "302677d6-9ee2-422c-82d8-c4a77f7a4101", "node_type": null, "metadata": {}, "hash": "bd7ebc8d5c4e143298097db8c8a5633c90e6e1c50641b766a447e5a23d1f0840"}, "3": {"node_id": "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8", "node_type": null, "metadata": {}, "hash": "3970c57f29dce52db09ca80dff3f90387bc38332fc39932d0e7648742158ffe8"}}, "hash": "240a1707b48515026b9d0e225bf6aec343fdc5e60ee44fb43f638934d0c07793", "text": "### `VIR_CPU_MAPLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_CPU_MAPLEN\n\nThis macro is to be used in conjunction with [virDomainPinVcpu](libvirt-\nlibvirt-domain.html#virDomainPinVcpu)() API. It returns the length (in bytes)\nrequired to store the complete CPU map between a single virtual & all physical\nCPUs of a domain.\n\n### `VIR_CPU_USABLE`\u00c2\u00b6\n\n    \n    \n    #define VIR_CPU_USABLE\n\nThis macro is to be used in conjunction with [virDomainGetVcpus](libvirt-\nlibvirt-domain.html#virDomainGetVcpus)() API. [VIR_CPU_USABLE](libvirt-\nlibvirt-domain.html#VIR_CPU_USABLE) macro returns a non-zero value (true) if\nthe cpu is usable by the vcpu, and 0 otherwise.\n\n### `VIR_CPU_USED`\u00c2\u00b6\n\n    \n    \n    #define VIR_CPU_USED\n\nThis macro can be used in conjunction with [virNodeGetCPUMap](libvirt-libvirt-\nhost.html#virNodeGetCPUMap)() API. It returns non-zero if the bit of the\nrelated CPU is set.\n\n### `VIR_DOMAIN_BANDWIDTH_IN_AVERAGE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_IN_AVERAGE\n\nMacro represents the inbound average of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BANDWIDTH_IN_BURST`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_IN_BURST\n\nMacro represents the inbound burst of NIC bandwidth, as a uint.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8": {"__data__": {"id_": "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa", "node_type": null, "metadata": {}, "hash": "240a1707b48515026b9d0e225bf6aec343fdc5e60ee44fb43f638934d0c07793"}, "3": {"node_id": "bc1ba310-278e-4a94-9e98-18a31080ada5", "node_type": null, "metadata": {}, "hash": "0d6c7a5158e61854a3c34133a65a9968085e858fafe6d4078d8203b955c5625c"}}, "hash": "3970c57f29dce52db09ca80dff3f90387bc38332fc39932d0e7648742158ffe8", "text": "### `VIR_DOMAIN_BANDWIDTH_IN_FLOOR`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_IN_FLOOR\n\nMacro represents the inbound floor of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BANDWIDTH_IN_PEAK`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_IN_PEAK\n\nMacro represents the inbound peak of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE\n\nMacro represents the outbound average of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BANDWIDTH_OUT_BURST`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_OUT_BURST\n\nMacro represents the outbound burst of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BANDWIDTH_OUT_PEAK`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BANDWIDTH_OUT_PEAK\n\nMacro represents the outbound peak of NIC bandwidth, as a uint.\n\n### `VIR_DOMAIN_BLKIO_DEVICE_READ_BPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_DEVICE_READ_BPS\n\nMacro for the blkio tunable throttle.read_iops_device: it represents the bytes\nof reading the block device per second, as a string. The string is parsed as a\nseries of /path/to/device, read_bps elements, separated by ','.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bc1ba310-278e-4a94-9e98-18a31080ada5": {"__data__": {"id_": "bc1ba310-278e-4a94-9e98-18a31080ada5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8", "node_type": null, "metadata": {}, "hash": "3970c57f29dce52db09ca80dff3f90387bc38332fc39932d0e7648742158ffe8"}, "3": {"node_id": "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8", "node_type": null, "metadata": {}, "hash": "6bd9fe934ae27c642b2512b6afd62651c35478e50e0c4e71c66c837a408963e7"}}, "hash": "0d6c7a5158e61854a3c34133a65a9968085e858fafe6d4078d8203b955c5625c", "text": "### `VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS\n\nMacro for the blkio tunable throttle.read_iops_device: it represents the\nnumber of reading the block device per second, as a string. The string is\nparsed as a series of /path/to/device, read_iops elements, separated by ','.\n\n### `VIR_DOMAIN_BLKIO_DEVICE_WEIGHT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_DEVICE_WEIGHT\n\nMacro for the blkio tunable weight_device: it represents the per-device\nweight, as a string. The string is parsed as a series of\n/path/to/device,weight elements, separated by ','.\n\n### `VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS\n\nMacro for the blkio tunable throttle.read_iops_device: it represents the\nnumber of reading the block device per second, as a string. The string is\nparsed as a series of /path/to/device, write_bps elements, separated by ','.\n\n### `VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS\n\nMacro for the blkio tunable throttle.write_iops_device: it represents the\nnumber of writing the block device per second, as a string. The string is\nparsed as a series of /path/to/device, write_iops elements, separated by ','.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8": {"__data__": {"id_": "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bc1ba310-278e-4a94-9e98-18a31080ada5", "node_type": null, "metadata": {}, "hash": "0d6c7a5158e61854a3c34133a65a9968085e858fafe6d4078d8203b955c5625c"}, "3": {"node_id": "4c9269c5-076e-4249-88bb-4365580459c6", "node_type": null, "metadata": {}, "hash": "e208c5a97d9574485ed2c99d67491255487cb58baba996d1aa888585573e7dd5"}}, "hash": "6bd9fe934ae27c642b2512b6afd62651c35478e50e0c4e71c66c837a408963e7", "text": "### `VIR_DOMAIN_BLKIO_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_FIELD_LENGTH\n\nMacro providing the field length of [virBlkioParameter](libvirt-libvirt-\ndomain.html#virBlkioParameter). Provided for backwards compatibility;\n[VIR_TYPED_PARAM_FIELD_LENGTH](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_FIELD_LENGTH) is the preferred value.\n\n### `VIR_DOMAIN_BLKIO_WEIGHT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLKIO_WEIGHT\n\nMacro for the Blkio tunable weight: it represents the io weight the guest can\nuse, as a uint.\n\n### `VIR_DOMAIN_BLOCK_COPY_BANDWIDTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_COPY_BANDWIDTH\n\nMacro for the [virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy) bandwidth tunable: it represents the maximum\nbandwidth in bytes/s, and is used while getting the copy operation into the\nmirrored phase, with a type of ullong. For compatibility with\n[virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)(), values larger than 2^52 bytes/sec (a\n32-bit MiB/s value) may be rejected on input due to overflow considerations\n(but do you really have an interface with that much bandwidth?), and values\nlarger than 2^31 bytes/sec may cause overflow problems if queried in\nbytes/sec. Hypervisors may further restrict the set of valid values.\nSpecifying 0 is the same as omitting this parameter, to request no bandwidth\nlimiting.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c9269c5-076e-4249-88bb-4365580459c6": {"__data__": {"id_": "4c9269c5-076e-4249-88bb-4365580459c6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8", "node_type": null, "metadata": {}, "hash": "6bd9fe934ae27c642b2512b6afd62651c35478e50e0c4e71c66c837a408963e7"}, "3": {"node_id": "6416223a-b3d5-4528-acf5-bb4ffccfbe85", "node_type": null, "metadata": {}, "hash": "4824680ef05f8cc152f81860abfc56a62124c38e8182152aa622222c69082d99"}}, "hash": "e208c5a97d9574485ed2c99d67491255487cb58baba996d1aa888585573e7dd5", "text": "Some hypervisors may lack support for this parameter, while still\nallowing a subsequent change of bandwidth via\n[virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)(). The actual speed can be determined\nwith [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)().\n\n### `VIR_DOMAIN_BLOCK_COPY_BUF_SIZE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_COPY_BUF_SIZE\n\nMacro for the [virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy) buffer size tunable: it represents how much\ndata in bytes can be in flight between source and destination, as an unsigned\nlong long. Specifying 0 is the same as omitting this parameter, to request the\nhypervisor default.\n\n### `VIR_DOMAIN_BLOCK_COPY_GRANULARITY`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_COPY_GRANULARITY\n\nMacro for the [virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy) granularity tunable: it represents the\ngranularity in bytes at which the copy operation recognizes dirty blocks that\nneed copying, as an unsigned int. Hypervisors may restrict this to be a power\nof two or fall within a certain range. Specifying 0 is the same as omitting\nthis parameter, to request the hypervisor default.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME\n\nMacro for the BlockIoTune tunable weight: it represents a group name to allow\nsharing of I/O throttling quota between multiple drives, as a string.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6416223a-b3d5-4528-acf5-bb4ffccfbe85": {"__data__": {"id_": "6416223a-b3d5-4528-acf5-bb4ffccfbe85", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4c9269c5-076e-4249-88bb-4365580459c6", "node_type": null, "metadata": {}, "hash": "e208c5a97d9574485ed2c99d67491255487cb58baba996d1aa888585573e7dd5"}, "3": {"node_id": "7a29816e-aec4-4c2c-8f6a-f3a11d288eca", "node_type": null, "metadata": {}, "hash": "d37726cfa1b78cea5380ebfa786d10a5bb3fecaf06113966710102329816083c"}}, "hash": "4824680ef05f8cc152f81860abfc56a62124c38e8182152aa622222c69082d99", "text": "### `VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the read bytes per\nsecond permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum read bytes\nper second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by read_bytes_sec_max, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the read I/O\noperations per second permitted through a block device, as a ullong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a29816e-aec4-4c2c-8f6a-f3a11d288eca": {"__data__": {"id_": "7a29816e-aec4-4c2c-8f6a-f3a11d288eca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6416223a-b3d5-4528-acf5-bb4ffccfbe85", "node_type": null, "metadata": {}, "hash": "4824680ef05f8cc152f81860abfc56a62124c38e8182152aa622222c69082d99"}, "3": {"node_id": "b85b6e24-f6df-4b6b-a470-ee6fcc2851da", "node_type": null, "metadata": {}, "hash": "20bd8ad479f23128969d005b51fedaf221559a48b6c2a8d35f31ab80f64e9746"}}, "hash": "d37726cfa1b78cea5380ebfa786d10a5bb3fecaf06113966710102329816083c", "text": "### `VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum read I/O\noperations per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by read_iops_sec_max, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the size I/O\noperations per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the total bytes per\nsecond permitted through a block device, as a ullong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b85b6e24-f6df-4b6b-a470-ee6fcc2851da": {"__data__": {"id_": "b85b6e24-f6df-4b6b-a470-ee6fcc2851da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7a29816e-aec4-4c2c-8f6a-f3a11d288eca", "node_type": null, "metadata": {}, "hash": "d37726cfa1b78cea5380ebfa786d10a5bb3fecaf06113966710102329816083c"}, "3": {"node_id": "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56", "node_type": null, "metadata": {}, "hash": "87054a84a9729db8b73f7f89a4cfe23bb671f92fc2ba10a22ec2bd34515464a8"}}, "hash": "20bd8ad479f23128969d005b51fedaf221559a48b6c2a8d35f31ab80f64e9746", "text": "### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum total\nbytes per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by total_bytes_sec_max, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the total I/O\noperations per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum I/O\noperations per second permitted through a block device, as a ullong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56": {"__data__": {"id_": "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b85b6e24-f6df-4b6b-a470-ee6fcc2851da", "node_type": null, "metadata": {}, "hash": "20bd8ad479f23128969d005b51fedaf221559a48b6c2a8d35f31ab80f64e9746"}, "3": {"node_id": "e77b7044-6c31-48b9-b59c-5dcaafc4335f", "node_type": null, "metadata": {}, "hash": "2952f1c99d02e350f91e3aa21abd463de47336d10d54002121682b06ec6ed9ea"}}, "hash": "87054a84a9729db8b73f7f89a4cfe23bb671f92fc2ba10a22ec2bd34515464a8", "text": "### `VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by total_iops_sec_max, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the write bytes per\nsecond permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum write\nbytes per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by write_bytes_sec_max, as a ullong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e77b7044-6c31-48b9-b59c-5dcaafc4335f": {"__data__": {"id_": "e77b7044-6c31-48b9-b59c-5dcaafc4335f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56", "node_type": null, "metadata": {}, "hash": "87054a84a9729db8b73f7f89a4cfe23bb671f92fc2ba10a22ec2bd34515464a8"}, "3": {"node_id": "2581f9e9-1a1e-46d1-80e1-6e57054fca54", "node_type": null, "metadata": {}, "hash": "a0c3be27fca8c63adcbc287a8a18315a3c2f487598da018b403cbc9a50c8c67a"}}, "hash": "2952f1c99d02e350f91e3aa21abd463de47336d10d54002121682b06ec6ed9ea", "text": "### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC\n\nMacro for the BlockIoTune tunable weight: it represents the write I/O\noperations per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX\n\nMacro for the BlockIoTune tunable weight: it represents the maximum write I/O\noperations per second permitted through a block device, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH\n\nMacro for the BlockIoTune tunable weight: it represents the duration in\nseconds for the burst allowed by write_iops_sec_max, as a ullong.\n\n### `VIR_DOMAIN_BLOCK_STATS_ERRS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_ERRS\n\nIn Xen this returns the mysterious 'oo_req', as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH\n\nMacro providing the field length of parameter names when using\n[virDomainBlockStatsFlags](libvirt-libvirt-\ndomain.html#virDomainBlockStatsFlags)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2581f9e9-1a1e-46d1-80e1-6e57054fca54": {"__data__": {"id_": "2581f9e9-1a1e-46d1-80e1-6e57054fca54", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e77b7044-6c31-48b9-b59c-5dcaafc4335f", "node_type": null, "metadata": {}, "hash": "2952f1c99d02e350f91e3aa21abd463de47336d10d54002121682b06ec6ed9ea"}, "3": {"node_id": "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb", "node_type": null, "metadata": {}, "hash": "c3a2be6f00bb32b89cccead5edf103ba834ee534e5f51aded8a91b485dbc8aad"}}, "hash": "a0c3be27fca8c63adcbc287a8a18315a3c2f487598da018b403cbc9a50c8c67a", "text": "### `VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ\n\nMacro represents the total flush requests of the block device, as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES\n\nMacro represents the total time spend on cache flushing in nano-seconds of the\nblock device, as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_READ_BYTES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_READ_BYTES\n\nMacro represents the total number of read bytes of the block device, as an\nllong.\n\n### `VIR_DOMAIN_BLOCK_STATS_READ_REQ`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_READ_REQ\n\nMacro represents the total read requests of the block device, as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES\n\nMacro represents the total time spend on cache reads in nano-seconds of the\nblock device, as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES\n\nMacro represents the total number of write bytes of the block device, as an\nllong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb": {"__data__": {"id_": "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2581f9e9-1a1e-46d1-80e1-6e57054fca54", "node_type": null, "metadata": {}, "hash": "a0c3be27fca8c63adcbc287a8a18315a3c2f487598da018b403cbc9a50c8c67a"}, "3": {"node_id": "2fa28ff6-46ab-47d6-b051-0c8a826a5d27", "node_type": null, "metadata": {}, "hash": "ace54d7a3d24d155b27bcf9cb7c7bce6ec0ee8b941a5714b63c0a93426c52bed"}}, "hash": "c3a2be6f00bb32b89cccead5edf103ba834ee534e5f51aded8a91b485dbc8aad", "text": "### `VIR_DOMAIN_BLOCK_STATS_WRITE_REQ`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_REQ\n\nMacro represents the total write requests of the block device, as an llong.\n\n### `VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES\n\nMacro represents the total time spend on cache writes in nano-seconds of the\nblock device, as an llong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2fa28ff6-46ab-47d6-b051-0c8a826a5d27": {"__data__": {"id_": "2fa28ff6-46ab-47d6-b051-0c8a826a5d27", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb", "node_type": null, "metadata": {}, "hash": "c3a2be6f00bb32b89cccead5edf103ba834ee534e5f51aded8a91b485dbc8aad"}, "3": {"node_id": "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4", "node_type": null, "metadata": {}, "hash": "37ca58837b971a423efe069784fb37f5126b72c259fe311b388ececbaafd3fb1"}}, "hash": "ace54d7a3d24d155b27bcf9cb7c7bce6ec0ee8b941a5714b63c0a93426c52bed", "text": "### `VIR_DOMAIN_CPU_STATS_CPUTIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_CPU_STATS_CPUTIME\n\ncpu usage (sum of both vcpu and hypervisor usage) in nanoseconds, as a ullong\n\n### `VIR_DOMAIN_CPU_STATS_SYSTEMTIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_CPU_STATS_SYSTEMTIME\n\ncpu time charged to system instructions in nanoseconds, as a ullong\n\n### `VIR_DOMAIN_CPU_STATS_USERTIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_CPU_STATS_USERTIME\n\ncpu time charged to user instructions in nanoseconds, as a ullong\n\n### `VIR_DOMAIN_CPU_STATS_VCPUTIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_CPU_STATS_VCPUTIME\n\nvcpu usage in nanoseconds (cpu_time excluding hypervisor time), as a ullong\n\n### `VIR_DOMAIN_EVENT_CALLBACK`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_EVENT_CALLBACK\n\nUsed to cast the event specific callback into the generic one for use for\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\n### `VIR_DOMAIN_IOTHREAD_POLL_GROW`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_IOTHREAD_POLL_GROW\n\nThis provides a value for the dynamic polling adjustment algorithm to use to\ngrow its polling interval up to the poll_max_ns value. A value of 0 (zero)\nallows the hypervisor to choose its own value. The algorithm to use for\nadjustment is hypervisor specific.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4": {"__data__": {"id_": "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2fa28ff6-46ab-47d6-b051-0c8a826a5d27", "node_type": null, "metadata": {}, "hash": "ace54d7a3d24d155b27bcf9cb7c7bce6ec0ee8b941a5714b63c0a93426c52bed"}, "3": {"node_id": "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4", "node_type": null, "metadata": {}, "hash": "3fe32494ba4c00af0b56a97a0b18df566741634fb05115084d9e354014630141"}}, "hash": "37ca58837b971a423efe069784fb37f5126b72c259fe311b388ececbaafd3fb1", "text": "The algorithm to use for\nadjustment is hypervisor specific. Accepted type is\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT) or\nsince 9.3.0 [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_IOTHREAD_POLL_MAX_NS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_IOTHREAD_POLL_MAX_NS\n\nThe maximum polling time that can be used by polling algorithm in ns. The\npolling time starts at 0 (zero) and is the time spent by the guest to process\nIOThread data before returning the CPU to the host. The polling time will be\ndynamically modified over time based on the poll_grow and poll_shrink\nparameters provided. A value set too large will cause more CPU time to be\nallocated the guest. A value set too small will not provide enough cycles for\nthe guest to process data. Accepted type is [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_IOTHREAD_POLL_SHRINK`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_IOTHREAD_POLL_SHRINK\n\nThis provides a value for the dynamic polling adjustment algorithm to use to\nshrink its polling interval when the polling interval exceeds the poll_max_ns\nvalue. A value of 0 (zero) allows the hypervisor to choose its own value. The\nalgorithm to use for adjustment is hypervisor specific.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4": {"__data__": {"id_": "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4", "node_type": null, "metadata": {}, "hash": "37ca58837b971a423efe069784fb37f5126b72c259fe311b388ececbaafd3fb1"}, "3": {"node_id": "fb35cca5-7833-4c3d-b779-d258881511ab", "node_type": null, "metadata": {}, "hash": "d41c929f0cfe0aad1be9a1fe67bd86a02712f73acdea58c8b168ea4ec455eec1"}}, "hash": "3fe32494ba4c00af0b56a97a0b18df566741634fb05115084d9e354014630141", "text": "The\nalgorithm to use for adjustment is hypervisor specific. Accepted type is\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT) or\nsince 9.3.0 [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_IOTHREAD_THREAD_POOL_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_IOTHREAD_THREAD_POOL_MAX\n\nSets the upper bound for thread pool size. A value of -1 disables this bound\nleaving hypervisor use its default value, though this value is not accepted\nfor running domains. Since the upper band has to be equal to or greater than\nlower bound value of 0 is not accepted. Accepted type is\n[VIR_TYPED_PARAM_INT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_INT).\n\n### `VIR_DOMAIN_IOTHREAD_THREAD_POOL_MIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_IOTHREAD_THREAD_POOL_MIN\n\nSets the lower bound for thread pool size. A value of -1 disables this bound\nleaving hypervisor use its default value, though this value is not accepted\nfor running domains. Accepted type is [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fb35cca5-7833-4c3d-b779-d258881511ab": {"__data__": {"id_": "fb35cca5-7833-4c3d-b779-d258881511ab", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4", "node_type": null, "metadata": {}, "hash": "3fe32494ba4c00af0b56a97a0b18df566741634fb05115084d9e354014630141"}, "3": {"node_id": "5af123aa-cd9d-4868-9235-e6204eec706c", "node_type": null, "metadata": {}, "hash": "683c56b54a9f3032d6bb3a08af766301847462f248fae47ab1c21ca21e78a1ec"}}, "hash": "d41c929f0cfe0aad1be9a1fe67bd86a02712f73acdea58c8b168ea4ec455eec1", "text": "### `VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: current percentage guest CPUs are throttled to when auto-convergence\ndecided migration was not converging, as [VIR_TYPED_PARAM_INT](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_INT).\n\n### `VIR_DOMAIN_JOB_COMPRESSION_BYTES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_COMPRESSION_BYTES\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of compressed bytes transferred since the beginning of\nmigration, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_COMPRESSION_CACHE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_COMPRESSION_CACHE\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: size of the cache (in bytes) used for compressing repeatedly\ntransferred memory pages during live migration, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5af123aa-cd9d-4868-9235-e6204eec706c": {"__data__": {"id_": "5af123aa-cd9d-4868-9235-e6204eec706c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fb35cca5-7833-4c3d-b779-d258881511ab", "node_type": null, "metadata": {}, "hash": "d41c929f0cfe0aad1be9a1fe67bd86a02712f73acdea58c8b168ea4ec455eec1"}, "3": {"node_id": "6825a01d-b377-448d-a63f-43e4f13f653e", "node_type": null, "metadata": {}, "hash": "95d21a87c4274d895066d25ac5c43d83bf4a9464293f471e59168944fe8e5695"}}, "hash": "683c56b54a9f3032d6bb3a08af766301847462f248fae47ab1c21ca21e78a1ec", "text": "### `VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of repeatedly changing pages that were not found in compression\ncache and thus could not be compressed, as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of repeatedly changing pages that were found in compression\ncache but were sent uncompressed because the result of compression was larger\nthan the original page as a whole, as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_COMPRESSION_PAGES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_COMPRESSION_PAGES\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of compressed pages transferred since the beginning of\nmigration, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6825a01d-b377-448d-a63f-43e4f13f653e": {"__data__": {"id_": "6825a01d-b377-448d-a63f-43e4f13f653e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5af123aa-cd9d-4868-9235-e6204eec706c", "node_type": null, "metadata": {}, "hash": "683c56b54a9f3032d6bb3a08af766301847462f248fae47ab1c21ca21e78a1ec"}, "3": {"node_id": "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf", "node_type": null, "metadata": {}, "hash": "fca486d80edcee498c646c65fa177b1c325d1c9747c6fd5a77331232e0f41981"}}, "hash": "95d21a87c4274d895066d25ac5c43d83bf4a9464293f471e59168944fe8e5695", "text": "### `VIR_DOMAIN_JOB_DATA_PROCESSED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DATA_PROCESSED\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of bytes transferred from the beginning of the job, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThis field corresponds to dataProcessed field in [virDomainJobInfo](libvirt-\nlibvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_DATA_REMAINING`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DATA_REMAINING\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of bytes that still need to be transferred, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThis field corresponds to dataRemaining field in [virDomainJobInfo](libvirt-\nlibvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_DATA_TOTAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DATA_TOTAL\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: total number of bytes supposed to be transferred, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf": {"__data__": {"id_": "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6825a01d-b377-448d-a63f-43e4f13f653e", "node_type": null, "metadata": {}, "hash": "95d21a87c4274d895066d25ac5c43d83bf4a9464293f471e59168944fe8e5695"}, "3": {"node_id": "cb5b8960-5ecf-40b6-929e-6376cbee6516", "node_type": null, "metadata": {}, "hash": "fc0de4e63251ba1086f2d3cc6a780e4517c26510eaa28e9c8998583874d59f17"}}, "hash": "fca486d80edcee498c646c65fa177b1c325d1c9747c6fd5a77331232e0f41981", "text": "For [VIR_DOMAIN_JOB_UNBOUNDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_UNBOUNDED) jobs, this may be less than the sum of\n[VIR_DOMAIN_JOB_DATA_PROCESSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_PROCESSED) and\n[VIR_DOMAIN_JOB_DATA_REMAINING](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_REMAINING) in the event that the hypervisor\nhas to repeat some data, e.g., due to dirtied pages during migration. For\n[VIR_DOMAIN_JOB_BOUNDED](libvirt-libvirt-domain.html#VIR_DOMAIN_JOB_BOUNDED)\njobs, [VIR_DOMAIN_JOB_DATA_TOTAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_TOTAL) shall always equal\n[VIR_DOMAIN_JOB_DATA_PROCESSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_PROCESSED) \\+\n[VIR_DOMAIN_JOB_DATA_REMAINING](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_REMAINING). This field corresponds to\ndataTotal field in [virDomainJobInfo](libvirt-libvirt-\ndomain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_DISK_BPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_BPS\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: network throughput used while migrating disks in Bytes per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cb5b8960-5ecf-40b6-929e-6376cbee6516": {"__data__": {"id_": "cb5b8960-5ecf-40b6-929e-6376cbee6516", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf", "node_type": null, "metadata": {}, "hash": "fca486d80edcee498c646c65fa177b1c325d1c9747c6fd5a77331232e0f41981"}, "3": {"node_id": "7e9f4602-db6e-4328-b90a-3c10018a92c0", "node_type": null, "metadata": {}, "hash": "d7c242a9d690ee4e6658bb7c3d3c89f751c1419b349f8ebd72ed9e91ca51a4c1"}}, "hash": "fc0de4e63251ba1086f2d3cc6a780e4517c26510eaa28e9c8998583874d59f17", "text": "### `VIR_DOMAIN_JOB_DISK_PROCESSED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_PROCESSED\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_PROCESSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_PROCESSED) but only tracking guest disk\nprogress, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to fileProcessed\nfield in [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_DISK_REMAINING`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_REMAINING\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_REMAINING](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_REMAINING) but only tracking guest disk\nprogress, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to fileRemaining\nfield in [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7e9f4602-db6e-4328-b90a-3c10018a92c0": {"__data__": {"id_": "7e9f4602-db6e-4328-b90a-3c10018a92c0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cb5b8960-5ecf-40b6-929e-6376cbee6516", "node_type": null, "metadata": {}, "hash": "fc0de4e63251ba1086f2d3cc6a780e4517c26510eaa28e9c8998583874d59f17"}, "3": {"node_id": "8338732a-ae04-4256-ae52-91cb2eeba798", "node_type": null, "metadata": {}, "hash": "c76f716777f9870bff7cfa70c3cb787f63b5e2495ba128c5b217da25a4b72485"}}, "hash": "d7c242a9d690ee4e6658bb7c3d3c89f751c1419b349f8ebd72ed9e91ca51a4c1", "text": "### `VIR_DOMAIN_JOB_DISK_TEMP_TOTAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_TEMP_TOTAL\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: possible total temporary disk space for the job in bytes as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_DISK_TEMP_USED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_TEMP_USED\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: current usage of temporary disk space for the job in bytes as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_DISK_TOTAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DISK_TOTAL\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_TOTAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_TOTAL) but only tracking guest disk progress,\nas [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to fileTotal field\nin [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8338732a-ae04-4256-ae52-91cb2eeba798": {"__data__": {"id_": "8338732a-ae04-4256-ae52-91cb2eeba798", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7e9f4602-db6e-4328-b90a-3c10018a92c0", "node_type": null, "metadata": {}, "hash": "d7c242a9d690ee4e6658bb7c3d3c89f751c1419b349f8ebd72ed9e91ca51a4c1"}, "3": {"node_id": "3baf1305-2c48-49a4-9a62-ecba00fbf6ae", "node_type": null, "metadata": {}, "hash": "883e0220f42b2ab841c36f91a5ab9005ffb771aa0a0c168719112a4f9015998f"}}, "hash": "c76f716777f9870bff7cfa70c3cb787f63b5e2495ba128c5b217da25a4b72485", "text": "### `VIR_DOMAIN_JOB_DOWNTIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DOWNTIME\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: downtime (ms) that is expected to happen during migration, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThe real computed downtime between the time guest CPUs were paused and the\ntime they were resumed is reported for completed migration.\n\n### `VIR_DOMAIN_JOB_DOWNTIME_NET`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_DOWNTIME_NET\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: real measured downtime (ms) NOT including the time required to transfer\ncontrol flow from the source host to the destination host, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_ERRMSG`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_ERRMSG\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: Present only in statistics for a completed job. Optional error message\nfor a failed job.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3baf1305-2c48-49a4-9a62-ecba00fbf6ae": {"__data__": {"id_": "3baf1305-2c48-49a4-9a62-ecba00fbf6ae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8338732a-ae04-4256-ae52-91cb2eeba798", "node_type": null, "metadata": {}, "hash": "c76f716777f9870bff7cfa70c3cb787f63b5e2495ba128c5b217da25a4b72485"}, "3": {"node_id": "104ad691-9035-41b1-b09e-bf4bcd19b999", "node_type": null, "metadata": {}, "hash": "0d6cd66a918445d352e5845e594f48ec938c8a1f60ac21a8aa1d57c2c01ec49e"}}, "hash": "883e0220f42b2ab841c36f91a5ab9005ffb771aa0a0c168719112a4f9015998f", "text": "Optional error message\nfor a failed job.\n\n### `VIR_DOMAIN_JOB_MEMORY_BPS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_BPS\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: network throughput used while migrating memory in Bytes per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_MEMORY_CONSTANT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_CONSTANT\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of pages filled with a constant byte (all bytes in a single page\nare identical) transferred since the beginning of the migration job, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThe most common example of such pages are zero pages, i.e., pages filled with\nzero bytes.\n\n### `VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of memory pages dirtied by the guest per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThis statistics makes sense only when live migration is running.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "104ad691-9035-41b1-b09e-bf4bcd19b999": {"__data__": {"id_": "104ad691-9035-41b1-b09e-bf4bcd19b999", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3baf1305-2c48-49a4-9a62-ecba00fbf6ae", "node_type": null, "metadata": {}, "hash": "883e0220f42b2ab841c36f91a5ab9005ffb771aa0a0c168719112a4f9015998f"}, "3": {"node_id": "543ed356-8bb1-4d4a-9f45-6146e085c083", "node_type": null, "metadata": {}, "hash": "d9bda5e9cdcf59527f7a2e1773903ecb1fa3e65976e99b2268e10b5f3cc82aed"}}, "hash": "0d6cd66a918445d352e5845e594f48ec938c8a1f60ac21a8aa1d57c2c01ec49e", "text": "This statistics makes sense only when live migration is running.\n\n### `VIR_DOMAIN_JOB_MEMORY_ITERATION`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_ITERATION\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: current iteration over domain's memory during live migration, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThis is set to zero when memory starts to be transferred and the value is\nincreased by one every time a new iteration is started to transfer memory\npages dirtied since the last iteration.\n\n### `VIR_DOMAIN_JOB_MEMORY_NORMAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_NORMAL\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of pages that were transferred without any kind of compression\n(i.e., pages which were not filled with a constant byte and which could not be\ncompressed) transferred since the beginning of the migration job, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number of bytes transferred as normal pages, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "543ed356-8bb1-4d4a-9f45-6146e085c083": {"__data__": {"id_": "543ed356-8bb1-4d4a-9f45-6146e085c083", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "104ad691-9035-41b1-b09e-bf4bcd19b999", "node_type": null, "metadata": {}, "hash": "0d6cd66a918445d352e5845e594f48ec938c8a1f60ac21a8aa1d57c2c01ec49e"}, "3": {"node_id": "beb0514c-9b23-4860-a86a-2e45055b5fb6", "node_type": null, "metadata": {}, "hash": "f95efecd0bda8180f6c556920b0098737b5ccf81aff4465a23fa900d365c9e0a"}}, "hash": "d9bda5e9cdcf59527f7a2e1773903ecb1fa3e65976e99b2268e10b5f3cc82aed", "text": "See [VIR_DOMAIN_JOB_MEMORY_NORMAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_MEMORY_NORMAL) for more details.\n\n### `VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: memory page size in bytes, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). If present, this parameter can be used to\nconvert other page based statistics, such as\n[VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE) or\n[VIR_DOMAIN_JOB_COMPRESSION_PAGES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_COMPRESSION_PAGES) to bytes.\n\n### `VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: number page requests received from the destination host during post-\ncopy migration, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This counter is incremented whenever the\nmigrated domain tries to access a memory page which has not been transferred\nfrom the source host yet.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "beb0514c-9b23-4860-a86a-2e45055b5fb6": {"__data__": {"id_": "beb0514c-9b23-4860-a86a-2e45055b5fb6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "543ed356-8bb1-4d4a-9f45-6146e085c083", "node_type": null, "metadata": {}, "hash": "d9bda5e9cdcf59527f7a2e1773903ecb1fa3e65976e99b2268e10b5f3cc82aed"}, "3": {"node_id": "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77", "node_type": null, "metadata": {}, "hash": "4b7ce8ae89e76293ddd66a0f1d1b9193ec83c32d3a2fee348ab290eb4cd09e8e"}}, "hash": "f95efecd0bda8180f6c556920b0098737b5ccf81aff4465a23fa900d365c9e0a", "text": "### `VIR_DOMAIN_JOB_MEMORY_PROCESSED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_PROCESSED\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_PROCESSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_PROCESSED) but only tracking guest memory\nprogress, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to memProcessed\nfield in [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_MEMORY_REMAINING`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_REMAINING\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_REMAINING](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_REMAINING) but only tracking guest memory\nprogress, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to memRemaining\nfield in [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77": {"__data__": {"id_": "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "beb0514c-9b23-4860-a86a-2e45055b5fb6", "node_type": null, "metadata": {}, "hash": "f95efecd0bda8180f6c556920b0098737b5ccf81aff4465a23fa900d365c9e0a"}, "3": {"node_id": "60dc5da6-2440-4ba2-a718-7297c4589354", "node_type": null, "metadata": {}, "hash": "000cf4a8173ae7945421dff96294d0302b335038ca570fd2f0497e28f15e1eb2"}}, "hash": "4b7ce8ae89e76293ddd66a0f1d1b9193ec83c32d3a2fee348ab290eb4cd09e8e", "text": "### `VIR_DOMAIN_JOB_MEMORY_TOTAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_MEMORY_TOTAL\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: as [VIR_DOMAIN_JOB_DATA_TOTAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_DATA_TOTAL) but only tracking guest memory\nprogress, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to memTotal field\nin [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_OPERATION`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_OPERATION\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: the operation which started the job as [VIR_TYPED_PARAM_INT](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_INT). The values correspond to the items\nin [virDomainJobOperation](libvirt-libvirt-domain.html#virDomainJobOperation)\nenum.\n\n### `VIR_DOMAIN_JOB_SETUP_TIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_SETUP_TIME\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: total time in milliseconds spent preparing the migration in the 'setup'\nphase before the iterations begin, as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "60dc5da6-2440-4ba2-a718-7297c4589354": {"__data__": {"id_": "60dc5da6-2440-4ba2-a718-7297c4589354", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77", "node_type": null, "metadata": {}, "hash": "4b7ce8ae89e76293ddd66a0f1d1b9193ec83c32d3a2fee348ab290eb4cd09e8e"}, "3": {"node_id": "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6", "node_type": null, "metadata": {}, "hash": "7d678146ac8349ac2c854dd3bcdfc2084f42975aad422f4cf45377718b8a67d7"}}, "hash": "000cf4a8173ae7945421dff96294d0302b335038ca570fd2f0497e28f15e1eb2", "text": "### `VIR_DOMAIN_JOB_SUCCESS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_SUCCESS\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: Present only in statistics for a completed job. Successful completion\nof the job as [VIR_TYPED_PARAM_BOOLEAN](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_BOOLEAN).\n\n### `VIR_DOMAIN_JOB_TIME_ELAPSED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_TIME_ELAPSED\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: time (ms) since the beginning of the job, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\nThis field corresponds to timeElapsed field in [virDomainJobInfo](libvirt-\nlibvirt-domain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_JOB_TIME_ELAPSED_NET`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_TIME_ELAPSED_NET\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: time (ms) since the beginning of the migration job NOT including the\ntime required to transfer control flow from the source host to the destination\nhost, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6": {"__data__": {"id_": "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "60dc5da6-2440-4ba2-a718-7297c4589354", "node_type": null, "metadata": {}, "hash": "000cf4a8173ae7945421dff96294d0302b335038ca570fd2f0497e28f15e1eb2"}, "3": {"node_id": "21e6feac-9169-41eb-b0d0-18749a7cb54e", "node_type": null, "metadata": {}, "hash": "fe6b97c9145635685dcd61490c96f544cf45cf3f41fb164dea3061844c91a47a"}}, "hash": "7d678146ac8349ac2c854dd3bcdfc2084f42975aad422f4cf45377718b8a67d7", "text": "### `VIR_DOMAIN_JOB_TIME_REMAINING`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_JOB_TIME_REMAINING\n\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)\nfield: remaining time (ms) for [VIR_DOMAIN_JOB_BOUNDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_BOUNDED) jobs, as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG). This field corresponds to\ntimeRemaining field in [virDomainJobInfo](libvirt-libvirt-\ndomain.html#virDomainJobInfo).\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR\n\nMacro represents the API major version of the SEV host, as\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR\n\nMacro represents the API minor version of the SEV guest, as\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "21e6feac-9169-41eb-b0d0-18749a7cb54e": {"__data__": {"id_": "21e6feac-9169-41eb-b0d0-18749a7cb54e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6", "node_type": null, "metadata": {}, "hash": "7d678146ac8349ac2c854dd3bcdfc2084f42975aad422f4cf45377718b8a67d7"}, "3": {"node_id": "94017d59-32e1-4cc8-962c-c7c04b126ca1", "node_type": null, "metadata": {}, "hash": "cca46a7911c6230469ca56036ad0643982ab1e73a6a57f6abff2d255379465a8"}}, "hash": "fe6b97c9145635685dcd61490c96f544cf45cf3f41fb164dea3061844c91a47a", "text": "### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID\n\nMacro represents the build ID of the SEV host, as\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT\n\nMacro represents the launch measurement of the SEV guest, as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY\n\nMacro represents the policy of the SEV guest, as\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET\n\nA macro used to represent the SEV launch secret. The secret is a\nbase64-encoded [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING) containing an encrypted launch secret. The\nsecret is created by the domain owner after the SEV launch measurement is\nretrieved and verified.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "94017d59-32e1-4cc8-962c-c7c04b126ca1": {"__data__": {"id_": "94017d59-32e1-4cc8-962c-c7c04b126ca1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "21e6feac-9169-41eb-b0d0-18749a7cb54e", "node_type": null, "metadata": {}, "hash": "fe6b97c9145635685dcd61490c96f544cf45cf3f41fb164dea3061844c91a47a"}, "3": {"node_id": "09272dbc-82cf-4e48-8144-0d78033cc81d", "node_type": null, "metadata": {}, "hash": "2cd20339017f88c544346028535ca363dbdb836baea1280500e7f331b03ab566"}}, "hash": "cca46a7911c6230469ca56036ad0643982ab1e73a6a57f6abff2d255379465a8", "text": "### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER\n\nA macro used to represent the SEV launch secret header. The secret header is a\nbase64-encoded [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING) containing artifacts needed by the SEV\nfirmware to recover the plain text of the launch secret. See section \"6.6\nLAUNCH_SECRET\" in the SEV API specification for a detailed description of the\nsecret header.\n\n### `VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS\n\nA macro used to represent the physical address within the guest's memory where\nthe secret will be set, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). If not specified, the address will be\ndetermined by the hypervisor.\n\n### `VIR_DOMAIN_MEMORY_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_FIELD_LENGTH\n\nMacro providing the field length of [virMemoryParameter](libvirt-libvirt-\ndomain.html#virMemoryParameter). Provided for backwards compatibility;\n[VIR_TYPED_PARAM_FIELD_LENGTH](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_FIELD_LENGTH) is the preferred value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "09272dbc-82cf-4e48-8144-0d78033cc81d": {"__data__": {"id_": "09272dbc-82cf-4e48-8144-0d78033cc81d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "94017d59-32e1-4cc8-962c-c7c04b126ca1", "node_type": null, "metadata": {}, "hash": "cca46a7911c6230469ca56036ad0643982ab1e73a6a57f6abff2d255379465a8"}, "3": {"node_id": "d22954ac-da60-49cc-b13d-bf4b7d1263b1", "node_type": null, "metadata": {}, "hash": "0c1e368200c0029a336a4562c3a090f152f8ee1b4f16030249cbd52938b9db1a"}}, "hash": "2cd20339017f88c544346028535ca363dbdb836baea1280500e7f331b03ab566", "text": "### `VIR_DOMAIN_MEMORY_HARD_LIMIT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_HARD_LIMIT\n\nMacro for the memory tunable hard_limit: it represents the maximum memory the\nguest can use, as a ullong.\n\n### `VIR_DOMAIN_MEMORY_MIN_GUARANTEE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_MIN_GUARANTEE\n\nMacro for the memory tunable min_guarantee: it represents the minimum memory\nguaranteed to be reserved for the guest, as a ullong.\n\n### `VIR_DOMAIN_MEMORY_PARAM_UNLIMITED`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_PARAM_UNLIMITED\n\nMacro providing the [virMemoryParameter](libvirt-libvirt-\ndomain.html#virMemoryParameter) value that indicates \"unlimited\"\n\n### `VIR_DOMAIN_MEMORY_SOFT_LIMIT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_SOFT_LIMIT\n\nMacro for the memory tunable soft_limit: it represents the memory upper limit\nenforced during memory contention, as a ullong.\n\n### `VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT\n\nMacro for the swap tunable swap_hard_limit: it represents the maximum swap\nplus memory the guest can use, as a ullong. This limit has to be more than\n[VIR_DOMAIN_MEMORY_HARD_LIMIT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_HARD_LIMIT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d22954ac-da60-49cc-b13d-bf4b7d1263b1": {"__data__": {"id_": "d22954ac-da60-49cc-b13d-bf4b7d1263b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "09272dbc-82cf-4e48-8144-0d78033cc81d", "node_type": null, "metadata": {}, "hash": "2cd20339017f88c544346028535ca363dbdb836baea1280500e7f331b03ab566"}, "3": {"node_id": "95edb3cc-a0b5-496d-bf5c-1a8520224322", "node_type": null, "metadata": {}, "hash": "76332c051d9c3434695868942c849dfa9c387b6c0728e51a997fe8eba836be07"}}, "hash": "0c1e368200c0029a336a4562c3a090f152f8ee1b4f16030249cbd52938b9db1a", "text": "### `VIR_DOMAIN_NUMA_MODE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_NUMA_MODE\n\nMacro for typed parameter name that lists the numa mode of a domain, as an int\ncontaining a [virDomainNumatuneMemMode](libvirt-libvirt-\ndomain.html#virDomainNumatuneMemMode) value.\n\n### `VIR_DOMAIN_NUMA_NODESET`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_NUMA_NODESET\n\nMacro for typed parameter name that lists the numa nodeset of a domain, as a\nstring.\n\n### `VIR_DOMAIN_SAVE_PARAM_DXML`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SAVE_PARAM_DXML\n\nan optional parameter used to adjust guest xml on restore. If the hypervisor\nsupports it, it can be used to alter host-specific portions of the domain XML\nthat will be used when restoring an image. For example, it is possible to\nalter the device while the domain is stopped.\n\n### `VIR_DOMAIN_SAVE_PARAM_FILE`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SAVE_PARAM_FILE\n\nthe parameter used to specify the savestate file to save to or restore from.\n\n### `VIR_DOMAIN_SCHEDULER_CAP`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_CAP\n\nMacro represents the maximum scheduler cap, when using the credit scheduler,\nas a uint.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "95edb3cc-a0b5-496d-bf5c-1a8520224322": {"__data__": {"id_": "95edb3cc-a0b5-496d-bf5c-1a8520224322", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d22954ac-da60-49cc-b13d-bf4b7d1263b1", "node_type": null, "metadata": {}, "hash": "0c1e368200c0029a336a4562c3a090f152f8ee1b4f16030249cbd52938b9db1a"}, "3": {"node_id": "fd193a71-522f-4a0c-bc1d-6962b6e391bb", "node_type": null, "metadata": {}, "hash": "a294a4b0c64154420760b60a8f21fb13b39b29242d66a3a4de771578a6e3b14b"}}, "hash": "76332c051d9c3434695868942c849dfa9c387b6c0728e51a997fe8eba836be07", "text": "### `VIR_DOMAIN_SCHEDULER_CPU_SHARES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_CPU_SHARES\n\nMacro represents proportional weight of the scheduler used on the host cpu,\nwhen using the posix scheduler, as a ullong.\n\n### `VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD\n\nMacro represents the enforcement period for a quota in microseconds, when\nusing the posix scheduler, for all emulator activity not tied to vcpus, as a\nullong.\n\n### `VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for all\nemulator activity not tied to vcpus, when using the posix scheduler, as an\nllong.\n\n### `VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\nwhole domain, when using the posix scheduler, as a ullong.\n\n### `VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for whole\ndomain, when using the posix scheduler, as an llong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fd193a71-522f-4a0c-bc1d-6962b6e391bb": {"__data__": {"id_": "fd193a71-522f-4a0c-bc1d-6962b6e391bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "95edb3cc-a0b5-496d-bf5c-1a8520224322", "node_type": null, "metadata": {}, "hash": "76332c051d9c3434695868942c849dfa9c387b6c0728e51a997fe8eba836be07"}, "3": {"node_id": "d103b0ce-3608-4719-a183-f2645553bc1d", "node_type": null, "metadata": {}, "hash": "70e0ebe51ce60ccfb597613e18fd3e42714dc510ac28235816e6547cad70f390"}}, "hash": "a294a4b0c64154420760b60a8f21fb13b39b29242d66a3a4de771578a6e3b14b", "text": "### `VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\nIOThreads only, when using the posix scheduler, as a ullong.\n\n### `VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for\nIOThreads only, when using the posix scheduler, as an llong.\n\n### `VIR_DOMAIN_SCHEDULER_LIMIT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_LIMIT\n\nMacro represents the scheduler limit value, when using the allocation\nscheduler, as an llong.\n\n### `VIR_DOMAIN_SCHEDULER_RESERVATION`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_RESERVATION\n\nMacro represents the scheduler reservation value, when using the allocation\nscheduler, as an llong.\n\n### `VIR_DOMAIN_SCHEDULER_SHARES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_SHARES\n\nMacro represents the scheduler shares value, when using the allocation\nscheduler, as an int.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d103b0ce-3608-4719-a183-f2645553bc1d": {"__data__": {"id_": "d103b0ce-3608-4719-a183-f2645553bc1d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fd193a71-522f-4a0c-bc1d-6962b6e391bb", "node_type": null, "metadata": {}, "hash": "a294a4b0c64154420760b60a8f21fb13b39b29242d66a3a4de771578a6e3b14b"}, "3": {"node_id": "2d04edc1-6437-4098-b808-11a8c7e7cdbd", "node_type": null, "metadata": {}, "hash": "71de46c09de925d3f9cee641daf95cbf2978829856239c41e1382835afb88087"}}, "hash": "70e0ebe51ce60ccfb597613e18fd3e42714dc510ac28235816e6547cad70f390", "text": "### `VIR_DOMAIN_SCHEDULER_VCPU_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_VCPU_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\nvcpus only, when using the posix scheduler, as a ullong.\n\n### `VIR_DOMAIN_SCHEDULER_VCPU_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_VCPU_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for vcpus\nonly, when using the posix scheduler, as an llong.\n\n### `VIR_DOMAIN_SCHEDULER_WEIGHT`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHEDULER_WEIGHT\n\nMacro represents the relative weight, when using the credit scheduler, as a\nuint.\n\n### `VIR_DOMAIN_SCHED_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SCHED_FIELD_LENGTH\n\nMacro providing the field length of [virSchedParameter](libvirt-libvirt-\ndomain.html#virSchedParameter). Provided for backwards compatibility;\n[VIR_TYPED_PARAM_FIELD_LENGTH](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_FIELD_LENGTH) is the preferred value\n\n### `VIR_DOMAIN_SEND_KEY_MAX_KEYS`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_SEND_KEY_MAX_KEYS\n\nMaximum number of keycodes that can be sent in one [virDomainSendKey](libvirt-\nlibvirt-domain.html#virDomainSendKey)() call.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2d04edc1-6437-4098-b808-11a8c7e7cdbd": {"__data__": {"id_": "2d04edc1-6437-4098-b808-11a8c7e7cdbd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d103b0ce-3608-4719-a183-f2645553bc1d", "node_type": null, "metadata": {}, "hash": "70e0ebe51ce60ccfb597613e18fd3e42714dc510ac28235816e6547cad70f390"}, "3": {"node_id": "a034edf6-a676-469f-aa26-a867fac41e64", "node_type": null, "metadata": {}, "hash": "1eac37f6f1e69bed49cb0f194fb8b684a6bd11f88c6712c7e8bf9ee3e002f06e"}}, "hash": "71de46c09de925d3f9cee641daf95cbf2978829856239c41e1382835afb88087", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_DISK`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_DISK\n\nMacro represents the name of guest disk for which the values are updated, as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME\n\nMacro represents the group name to be used, as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC\n\nMacro represents the read throughput limit in bytes per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX\n\nMacro represents the read throughput limit during bursts in maximum bytes per\nsecond, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a034edf6-a676-469f-aa26-a867fac41e64": {"__data__": {"id_": "a034edf6-a676-469f-aa26-a867fac41e64", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2d04edc1-6437-4098-b808-11a8c7e7cdbd", "node_type": null, "metadata": {}, "hash": "71de46c09de925d3f9cee641daf95cbf2978829856239c41e1382835afb88087"}, "3": {"node_id": "83c8241a-72e1-4bff-899e-d441a4cb23a1", "node_type": null, "metadata": {}, "hash": "f38a15a8980655f1569071a1b4871f65bf020ca83c1e8c031a34037f4903ee27"}}, "hash": "1eac37f6f1e69bed49cb0f194fb8b684a6bd11f88c6712c7e8bf9ee3e002f06e", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.read_bytes_sec_max as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC\n\nMacro represents the read I/O operations per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX\n\nMacro represents the read maximum I/O operations per second during bursts, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "83c8241a-72e1-4bff-899e-d441a4cb23a1": {"__data__": {"id_": "83c8241a-72e1-4bff-899e-d441a4cb23a1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a034edf6-a676-469f-aa26-a867fac41e64", "node_type": null, "metadata": {}, "hash": "1eac37f6f1e69bed49cb0f194fb8b684a6bd11f88c6712c7e8bf9ee3e002f06e"}, "3": {"node_id": "1a665c6b-9a9d-40b6-a4a9-c811655462b8", "node_type": null, "metadata": {}, "hash": "c0c72977df6a46e5ffe103af0da4a73be4cbac14e6fec96a5f16ea7b6562e2a0"}}, "hash": "f38a15a8980655f1569071a1b4871f65bf020ca83c1e8c031a34037f4903ee27", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.read_iops_sec_max as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC\n\nMacro represents the size maximum I/O operations per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC\n\nMacro represents the total throughput limit in bytes per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX\n\nMacro represents the total throughput limit during bursts in maximum bytes per\nsecond, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1a665c6b-9a9d-40b6-a4a9-c811655462b8": {"__data__": {"id_": "1a665c6b-9a9d-40b6-a4a9-c811655462b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "83c8241a-72e1-4bff-899e-d441a4cb23a1", "node_type": null, "metadata": {}, "hash": "f38a15a8980655f1569071a1b4871f65bf020ca83c1e8c031a34037f4903ee27"}, "3": {"node_id": "597b8bf4-8db7-47d3-a820-946d6d509ddd", "node_type": null, "metadata": {}, "hash": "7bcbb7b362ac3e7a7195dd26b178e1e1a2b6f49224746acde08c3f302cf3cefc"}}, "hash": "c0c72977df6a46e5ffe103af0da4a73be4cbac14e6fec96a5f16ea7b6562e2a0", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.total_bytes_sec_max, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC\n\nMacro represents the total I/O operations per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX\n\nMacro represents the total maximum I/O operations per second during bursts, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "597b8bf4-8db7-47d3-a820-946d6d509ddd": {"__data__": {"id_": "597b8bf4-8db7-47d3-a820-946d6d509ddd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1a665c6b-9a9d-40b6-a4a9-c811655462b8", "node_type": null, "metadata": {}, "hash": "c0c72977df6a46e5ffe103af0da4a73be4cbac14e6fec96a5f16ea7b6562e2a0"}, "3": {"node_id": "6ddf095c-1289-4983-9061-15b7c3004b9c", "node_type": null, "metadata": {}, "hash": "cd0143b194f21fdfed6902fc4558091a1f02dea362f86b7d1b705b8735924d2d"}}, "hash": "7bcbb7b362ac3e7a7195dd26b178e1e1a2b6f49224746acde08c3f302cf3cefc", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.total_iops_sec_max as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC\n\nMacro represents the write throughput limit in bytes per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX\n\nMacro represents the write throughput limit during bursts in maximum bytes per\nsecond, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6ddf095c-1289-4983-9061-15b7c3004b9c": {"__data__": {"id_": "6ddf095c-1289-4983-9061-15b7c3004b9c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "597b8bf4-8db7-47d3-a820-946d6d509ddd", "node_type": null, "metadata": {}, "hash": "7bcbb7b362ac3e7a7195dd26b178e1e1a2b6f49224746acde08c3f302cf3cefc"}, "3": {"node_id": "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294", "node_type": null, "metadata": {}, "hash": "0baf6c854c661bb3301cb19751201739946ecc5d6ba21d2d0bc587c54b2d60c8"}}, "hash": "cd0143b194f21fdfed6902fc4558091a1f02dea362f86b7d1b705b8735924d2d", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.write_bytes_sec_max as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC\n\nMacro represents the write I/O operations per second, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX\n\nMacro represents the write maximum I/O operations per second during bursts, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294": {"__data__": {"id_": "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6ddf095c-1289-4983-9061-15b7c3004b9c", "node_type": null, "metadata": {}, "hash": "cd0143b194f21fdfed6902fc4558091a1f02dea362f86b7d1b705b8735924d2d"}, "3": {"node_id": "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f", "node_type": null, "metadata": {}, "hash": "aec55740c02a3d3b40f5252d1fb8a4c958544bc5efae441942ecf04c37a574e0"}}, "hash": "0baf6c854c661bb3301cb19751201739946ecc5d6ba21d2d0bc587c54b2d60c8", "text": "### `VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH\n\nMacro represents the length in seconds allowed for a burst period for the\nblkdeviotune.write_iops_sec_max as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES\n\nMacro represents proportional weight of the scheduler used on the host cpu,\nwhen using the posix scheduler, as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN\n\nMacro represents formatted pinning for emulator process, as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD\n\nMacro represents the enforcement period for a quota in microseconds, when\nusing the posix scheduler, for all emulator activity not tied to vcpus, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f": {"__data__": {"id_": "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294", "node_type": null, "metadata": {}, "hash": "0baf6c854c661bb3301cb19751201739946ecc5d6ba21d2d0bc587c54b2d60c8"}, "3": {"node_id": "64bcaecf-d079-49b6-840a-dff997c7ee36", "node_type": null, "metadata": {}, "hash": "34f2036a1316df5e089e4fed75622c5d3deb7c39e166c67f0dca4513bee1b168"}}, "hash": "aec55740c02a3d3b40f5252d1fb8a4c958544bc5efae441942ecf04c37a574e0", "text": "### `VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for all\nemulator activity not tied to vcpus, when using the posix scheduler, as an\n[VIR_TYPED_PARAM_LLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_LLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\nwhole domain, when using the posix scheduler, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for whole\ndomain, when using the posix scheduler, as [VIR_TYPED_PARAM_LLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_LLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64bcaecf-d079-49b6-840a-dff997c7ee36": {"__data__": {"id_": "64bcaecf-d079-49b6-840a-dff997c7ee36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f", "node_type": null, "metadata": {}, "hash": "aec55740c02a3d3b40f5252d1fb8a4c958544bc5efae441942ecf04c37a574e0"}, "3": {"node_id": "13a9bfe1-739e-4e1a-be1d-b7b7b726e903", "node_type": null, "metadata": {}, "hash": "d1db9e7c418b6d05e7338259f804bfb4b54f7282b1252eb5e93232a6cbbf2598"}}, "hash": "34f2036a1316df5e089e4fed75622c5d3deb7c39e166c67f0dca4513bee1b168", "text": "### `VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN\n\nMacro represents formatted pinning for one IOThread specified by id which is\nappended to the parameter name, for example \"cputune.iothreadpin1\", as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\niothreads only, when using the posix scheduler, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for\niothreads only, when using the posix scheduler, as\n[VIR_TYPED_PARAM_LLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_LLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "13a9bfe1-739e-4e1a-be1d-b7b7b726e903": {"__data__": {"id_": "13a9bfe1-739e-4e1a-be1d-b7b7b726e903", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "64bcaecf-d079-49b6-840a-dff997c7ee36", "node_type": null, "metadata": {}, "hash": "34f2036a1316df5e089e4fed75622c5d3deb7c39e166c67f0dca4513bee1b168"}, "3": {"node_id": "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9", "node_type": null, "metadata": {}, "hash": "f608f846e9c1026639ed07910915985d1b38e3204437c69fe025029454da172d"}}, "hash": "d1db9e7c418b6d05e7338259f804bfb4b54f7282b1252eb5e93232a6cbbf2598", "text": "### `VIR_DOMAIN_TUNABLE_CPU_VCPUPIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_VCPUPIN\n\nMacro represents formatted pinning for one vcpu specified by id which is\nappended to the parameter name, for example \"cputune.vcpupin1\", as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD\n\nMacro represents the enforcement period for a quota, in microseconds, for\nvcpus only, when using the posix scheduler, as\n[VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-common.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA`\u00c2\u00b6\n\n    \n    \n    #define VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA\n\nMacro represents the maximum bandwidth to be used within a period for vcpus\nonly, when using the posix scheduler, as [VIR_TYPED_PARAM_LLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_LLONG).\n\n### `VIR_GET_CPUMAP`\u00c2\u00b6\n\n    \n    \n    #define VIR_GET_CPUMAP\n\nThis macro is to be used in conjunction with [virDomainGetVcpus](libvirt-\nlibvirt-domain.html#virDomainGetVcpus)() and [virDomainPinVcpu](libvirt-\nlibvirt-domain.html#virDomainPinVcpu)() APIs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9": {"__data__": {"id_": "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "13a9bfe1-739e-4e1a-be1d-b7b7b726e903", "node_type": null, "metadata": {}, "hash": "d1db9e7c418b6d05e7338259f804bfb4b54f7282b1252eb5e93232a6cbbf2598"}, "3": {"node_id": "4148954d-4e92-4adb-8107-d3e6aec9ba45", "node_type": null, "metadata": {}, "hash": "25ced1df5344d6ba16de252b38f9a0595a9cec7e4d2543b9b8603ae6aee6b488"}}, "hash": "f608f846e9c1026639ed07910915985d1b38e3204437c69fe025029454da172d", "text": "[VIR_GET_CPUMAP](libvirt-\nlibvirt-domain.html#VIR_GET_CPUMAP) macro returns a pointer to the cpumap of\nthe specified vcpu from cpumaps array.\n\n### `VIR_KEYCODE_SET_RFB`\u00c2\u00b6\n\n    \n    \n    #define VIR_KEYCODE_SET_RFB\n\nCompatibility alias for [VIR_KEYCODE_SET_QNUM](libvirt-libvirt-\ndomain.html#VIR_KEYCODE_SET_QNUM), which replaced it since 4.2.0.\n\n### `VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT\n\nvirDomainMigrate* params field: the increment added to\n[VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL) whenever the hypervisor\ndecides the current rate is not enough to ensure convergence of the migration.\nAs [VIR_TYPED_PARAM_INT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_INT).\n\n### `VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL\n\nvirDomainMigrate* params field: the initial percentage guest CPUs are\nthrottled to when auto-convergence decides migration is not converging. As\n[VIR_TYPED_PARAM_INT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_INT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4148954d-4e92-4adb-8107-d3e6aec9ba45": {"__data__": {"id_": "4148954d-4e92-4adb-8107-d3e6aec9ba45", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9", "node_type": null, "metadata": {}, "hash": "f608f846e9c1026639ed07910915985d1b38e3204437c69fe025029454da172d"}, "3": {"node_id": "031e39d3-658c-428b-b973-dd1da9cb10ec", "node_type": null, "metadata": {}, "hash": "9232ceb89cc61225e610a631316dd4b829f311070d67be3a6bcb18193fe08f8d"}}, "hash": "25ced1df5344d6ba16de252b38f9a0595a9cec7e4d2543b9b8603ae6aee6b488", "text": "### `VIR_MIGRATE_PARAM_BANDWIDTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_BANDWIDTH\n\nvirDomainMigrate* params field: the maximum bandwidth (in MiB/s) that will be\nused for migration as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG). If set to 0 or omitted, libvirt will\nchoose a suitable default. Some hypervisors do not support this feature and\nwill return an error if this field is used and is not 0.\n\n### `VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY\n\nvirDomainMigrate* params field: the maximum bandwidth (in MiB/s) that will be\nused for post-copy phase of a migration as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG). If set to 0 or omitted, post-copy\nmigration speed will not be limited.\n\n### `VIR_MIGRATE_PARAM_COMPRESSION`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION\n\nvirDomainMigrate* params multiple field: name of the method used to compress\nmigration traffic. Supported compression methods: xbzrle, mt, zlib, zstd. The\nparameter may be specified multiple times if more than one method should be\nused. Not all combinations of compression methods and migration options may be\nallowed. Parallel migration of QEMU domains is only compatible with either\nzlib or zstd method.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "031e39d3-658c-428b-b973-dd1da9cb10ec": {"__data__": {"id_": "031e39d3-658c-428b-b973-dd1da9cb10ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4148954d-4e92-4adb-8107-d3e6aec9ba45", "node_type": null, "metadata": {}, "hash": "25ced1df5344d6ba16de252b38f9a0595a9cec7e4d2543b9b8603ae6aee6b488"}, "3": {"node_id": "e5cfa07a-23ab-49cf-90d9-df40f506facf", "node_type": null, "metadata": {}, "hash": "e8515c830179e72c5679b5047444f859fcff8cd2ee0814727d3ab5a117edf602"}}, "hash": "9232ceb89cc61225e610a631316dd4b829f311070d67be3a6bcb18193fe08f8d", "text": "### `VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS\n\nvirDomainMigrate* params field: the number of decompression threads for\nmultithread compression as [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT).\n\n### `VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL\n\nvirDomainMigrate* params field: the level of compression for multithread\ncompression as [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT). Accepted values are in range 0-9. 0 is no\ncompression, 1 is maximum speed and 9 is maximum compression.\n\n### `VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS\n\nvirDomainMigrate* params field: the number of compression threads for\nmultithread compression as [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e5cfa07a-23ab-49cf-90d9-df40f506facf": {"__data__": {"id_": "e5cfa07a-23ab-49cf-90d9-df40f506facf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "031e39d3-658c-428b-b973-dd1da9cb10ec", "node_type": null, "metadata": {}, "hash": "9232ceb89cc61225e610a631316dd4b829f311070d67be3a6bcb18193fe08f8d"}, "3": {"node_id": "82a7e826-e524-4927-9f85-0949242e8473", "node_type": null, "metadata": {}, "hash": "f68705665d12e74d4b980f22783316a5e6698c07a27b9af68b57d79d81754c5a"}}, "hash": "e8515c830179e72c5679b5047444f859fcff8cd2ee0814727d3ab5a117edf602", "text": "### `VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE\n\nvirDomainMigrate* params field: the size of page cache for xbzrle compression\nas [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_MIGRATE_PARAM_COMPRESSION_ZLIB_LEVEL`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_ZLIB_LEVEL\n\nvirDomainMigrate* params field: the level of compression for zlib as\n[VIR_TYPED_PARAM_INT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_INT).\nAccepted values are in range 0-9. 0 is no compression, 1 is maximum speed and\n9 is maximum compression.\n\n### `VIR_MIGRATE_PARAM_COMPRESSION_ZSTD_LEVEL`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_COMPRESSION_ZSTD_LEVEL\n\nvirDomainMigrate* params field: the level of compression for zstd as\n[VIR_TYPED_PARAM_INT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_INT).\nAccepted values are in range 0-20. 0 is no compression, 1 is maximum speed and\n20 is maximum compression.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "82a7e826-e524-4927-9f85-0949242e8473": {"__data__": {"id_": "82a7e826-e524-4927-9f85-0949242e8473", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e5cfa07a-23ab-49cf-90d9-df40f506facf", "node_type": null, "metadata": {}, "hash": "e8515c830179e72c5679b5047444f859fcff8cd2ee0814727d3ab5a117edf602"}, "3": {"node_id": "d949308c-c2a7-4952-ae95-3eabd875208d", "node_type": null, "metadata": {}, "hash": "be8fc39cf386c6b0e8c21f8cf944c4f7c20964953aaf56e8b55d379c2c0eaee0"}}, "hash": "f68705665d12e74d4b980f22783316a5e6698c07a27b9af68b57d79d81754c5a", "text": "0 is no compression, 1 is maximum speed and\n20 is maximum compression.\n\n### `VIR_MIGRATE_PARAM_DEST_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_DEST_NAME\n\nvirDomainMigrate* params field: the name to be used for the domain on the\ndestination host as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING). Omitting this parameter keeps the domain\nname the same. This field is only allowed to be used with hypervisors that\nsupport domain renaming during migration.\n\n### `VIR_MIGRATE_PARAM_DEST_XML`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_DEST_XML\n\nvirDomainMigrate* params field: the new configuration to be used for the\ndomain on the destination host as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING). The configuration must include an\nidentical set of virtual devices, to ensure a stable guest ABI across\nmigration. Only parameters related to host side configuration can be changed\nin the XML. Hypervisors which support this field will forbid migration if the\nprovided XML would cause a change in the guest ABI. This field cannot be used\nto rename the domain during migration (use\n[VIR_MIGRATE_PARAM_DEST_NAME](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_DEST_NAME) field for that purpose). Domain name\nin the destination XML must match the original domain name. Omitting this\nparameter keeps the original domain configuration. Using this field with\nhypervisors that do not support changing domain configuration during migration\nwill result in a failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d949308c-c2a7-4952-ae95-3eabd875208d": {"__data__": {"id_": "d949308c-c2a7-4952-ae95-3eabd875208d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "82a7e826-e524-4927-9f85-0949242e8473", "node_type": null, "metadata": {}, "hash": "f68705665d12e74d4b980f22783316a5e6698c07a27b9af68b57d79d81754c5a"}, "3": {"node_id": "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2", "node_type": null, "metadata": {}, "hash": "f1d11409142a258cb9374a7dc395690084fdad69548e60590c881e9cdca336e4"}}, "hash": "be8fc39cf386c6b0e8c21f8cf944c4f7c20964953aaf56e8b55d379c2c0eaee0", "text": "### `VIR_MIGRATE_PARAM_DISKS_PORT`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_DISKS_PORT\n\nvirDomainMigrate* params field: port that destination server should use for\nincoming disks migration. Type is [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT). If set to 0 or omitted, libvirt will choose\na suitable default. At the moment this is only supported by the QEMU driver.\n\n### `VIR_MIGRATE_PARAM_DISKS_URI`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_DISKS_URI\n\nvirDomainMigrate* params field: URI used for incoming disks migration. Type is\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\nOnly schemes \"tcp\" and \"unix\" are accepted. TCP URI can currently only provide\na server and port to listen on (and connect to), UNIX URI may only provide a\npath component for a UNIX socket. This is currently only supported by the QEMU\ndriver. UNIX URI is only usable if the management application makes sure that\nsocket created with this name on the destination will be reachable from the\nsource under the same exact path.\n\n### `VIR_MIGRATE_PARAM_GRAPHICS_URI`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_GRAPHICS_URI\n\nvirDomainMigrate* params field: URI to use for migrating client's connection\nto domain's graphical console as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING). If specified, the client will be asked to\nautomatically reconnect using these parameters instead of the automatically\ncomputed ones.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2": {"__data__": {"id_": "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d949308c-c2a7-4952-ae95-3eabd875208d", "node_type": null, "metadata": {}, "hash": "be8fc39cf386c6b0e8c21f8cf944c4f7c20964953aaf56e8b55d379c2c0eaee0"}, "3": {"node_id": "a4d00f3e-2f73-4500-b131-17a5006b78d2", "node_type": null, "metadata": {}, "hash": "f79a6bf65a9907e82706a196d587adba996dbe60cdc331b14ebd4482e200ad83"}}, "hash": "f1d11409142a258cb9374a7dc395690084fdad69548e60590c881e9cdca336e4", "text": "This can be useful if, e.g., the client does not have a direct\naccess to the network virtualization hosts are connected to and needs to\nconnect through a proxy. The URI is formed as follows:\nprotocol://hostname[:port]/[?parameters] where protocol is either \"spice\" or\n\"vnc\" and parameters is a list of protocol specific parameters separated by\n'&'. Currently recognized parameters are \"tlsPort\" and \"tlsSubject\". For\nexample, spice://target.host.com:1234/?tlsPort=4567\n\n### `VIR_MIGRATE_PARAM_LISTEN_ADDRESS`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_LISTEN_ADDRESS\n\nvirDomainMigrate* params field: The listen address that hypervisor on the\ndestination side should bind to for incoming migration. Both IPv4 and IPv6\naddresses are accepted as well as hostnames (the resolving is done on\ndestination). Some hypervisors do not support this feature and will return an\nerror if this field is used.\n\n### `VIR_MIGRATE_PARAM_MIGRATE_DISKS`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_MIGRATE_DISKS\n\nvirDomainMigrate* params multiple field: The multiple values that list the\nblock devices to be migrated. At the moment this is only supported by the QEMU\ndriver but not for the tunnelled migration.\n\n### `VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS\n\nvirDomainMigrate* params field: number of connections used during parallel\nmigration. As [VIR_TYPED_PARAM_INT](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_INT).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a4d00f3e-2f73-4500-b131-17a5006b78d2": {"__data__": {"id_": "a4d00f3e-2f73-4500-b131-17a5006b78d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2", "node_type": null, "metadata": {}, "hash": "f1d11409142a258cb9374a7dc395690084fdad69548e60590c881e9cdca336e4"}, "3": {"node_id": "cfd0f8e6-9ad2-4019-a317-8b23aad0e126", "node_type": null, "metadata": {}, "hash": "127fb6707c65f733b122f88786d13451e339f5ea3308b4bdd12688576d7085f4"}}, "hash": "f79a6bf65a9907e82706a196d587adba996dbe60cdc331b14ebd4482e200ad83", "text": "### `VIR_MIGRATE_PARAM_PERSIST_XML`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_PERSIST_XML\n\nvirDomainMigrate* params field: the new persistent configuration to be used\nfor the domain on the destination host as [VIR_TYPED_PARAM_STRING](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_STRING). This field cannot be used to\nrename the domain during migration (use [VIR_MIGRATE_PARAM_DEST_NAME](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PARAM_DEST_NAME) field for that purpose).\nDomain name in the destination XML must match the original domain name.\nOmitting this parameter keeps the original domain persistent configuration.\nUsing this field with hypervisors that do not support changing domain\nconfiguration during migration will result in a failure.\n\n### `VIR_MIGRATE_PARAM_TLS_DESTINATION`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_TLS_DESTINATION\n\nvirDomainMigrate* params field: override the destination host name used for\nTLS verification. As [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING). Normally the TLS certificate from the\ndestination host must match the host's name for TLS verification to succeed.\nWhen the certificate does not match the destination hostname and the expected\ncertificate's hostname is known, this parameter can be used to pass this\nexpected hostname when starting the migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cfd0f8e6-9ad2-4019-a317-8b23aad0e126": {"__data__": {"id_": "cfd0f8e6-9ad2-4019-a317-8b23aad0e126", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a4d00f3e-2f73-4500-b131-17a5006b78d2", "node_type": null, "metadata": {}, "hash": "f79a6bf65a9907e82706a196d587adba996dbe60cdc331b14ebd4482e200ad83"}, "3": {"node_id": "9f1f4902-1771-4eba-8d42-8624b0f0339b", "node_type": null, "metadata": {}, "hash": "9582d79e27595e4d473eed16377cd1f29d8132ae537e5f946ae870dc1ad2388a"}}, "hash": "127fb6707c65f733b122f88786d13451e339f5ea3308b4bdd12688576d7085f4", "text": "### `VIR_MIGRATE_PARAM_URI`\u00c2\u00b6\n\n    \n    \n    #define VIR_MIGRATE_PARAM_URI\n\nvirDomainMigrate* params field: URI to use for initiating domain migration as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING).\nIt takes a hypervisor specific format. The uri_transports element of the\nhypervisor capabilities XML includes details of the supported URI schemes.\nWhen omitted libvirt will auto-generate suitable default URI. It is typically\nonly necessary to specify this URI if the destination host has multiple\ninterfaces and a specific interface is required to transmit migration data.\nThis field may not be used when [VIR_MIGRATE_TUNNELLED](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_TUNNELLED) flag is set.\n\n### `VIR_PERF_PARAM_ALIGNMENT_FAULTS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_ALIGNMENT_FAULTS\n\nMacro for typed parameter name that represents alignment_faults perf event\nwhich can be used to measure the count of alignment faults by applications\nrunning on the platform. It corresponds to the \"perf.alignment_faults\" field\nin the *Stats APIs.\n\n### `VIR_PERF_PARAM_BRANCH_INSTRUCTIONS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_BRANCH_INSTRUCTIONS\n\nMacro for typed parameter name that represents branch_instructions perf event\nwhich can be used to measure the count of branch instructions by applications\nrunning on the platform. It corresponds to the \"perf.branch_instructions\"\nfield in the *Stats APIs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9f1f4902-1771-4eba-8d42-8624b0f0339b": {"__data__": {"id_": "9f1f4902-1771-4eba-8d42-8624b0f0339b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cfd0f8e6-9ad2-4019-a317-8b23aad0e126", "node_type": null, "metadata": {}, "hash": "127fb6707c65f733b122f88786d13451e339f5ea3308b4bdd12688576d7085f4"}, "3": {"node_id": "eb4075a0-c766-4f24-9589-8a0db6da6725", "node_type": null, "metadata": {}, "hash": "8733349cdc6f1906dc3654f041cef15bd9206d530980923b321d8201234b2237"}}, "hash": "9582d79e27595e4d473eed16377cd1f29d8132ae537e5f946ae870dc1ad2388a", "text": "### `VIR_PERF_PARAM_BRANCH_MISSES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_BRANCH_MISSES\n\nMacro for typed parameter name that represents branch_misses perf event which\ncan be used to measure the count of branch misses by applications running on\nthe platform. It corresponds to the \"perf.branch_misses\" field in the *Stats\nAPIs.\n\n### `VIR_PERF_PARAM_BUS_CYCLES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_BUS_CYCLES\n\nMacro for typed parameter name that represents bus_cycles perf event which can\nbe used to measure the count of bus cycles by applications running on the\nplatform. It corresponds to the \"perf.bus_cycles\" field in the *Stats APIs.\n\n### `VIR_PERF_PARAM_CACHE_MISSES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CACHE_MISSES\n\nMacro for typed parameter name that represents cache_misses perf event which\ncan be used to measure the count of cache misses by applications running on\nthe platform. It corresponds to the \"perf.cache_misses\" field in the *Stats\nAPIs.\n\n### `VIR_PERF_PARAM_CACHE_REFERENCES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CACHE_REFERENCES\n\nMacro for typed parameter name that represents cache_references perf event\nwhich can be used to measure the count of cache hits by applications running\non the platform. It corresponds to the \"perf.cache_references\" field in the\n*Stats APIs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "eb4075a0-c766-4f24-9589-8a0db6da6725": {"__data__": {"id_": "eb4075a0-c766-4f24-9589-8a0db6da6725", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9f1f4902-1771-4eba-8d42-8624b0f0339b", "node_type": null, "metadata": {}, "hash": "9582d79e27595e4d473eed16377cd1f29d8132ae537e5f946ae870dc1ad2388a"}, "3": {"node_id": "08af6f2c-6674-4f5c-b593-a71457dbdb38", "node_type": null, "metadata": {}, "hash": "afb462c9e94bfcb4f84c9c203d0c9b4b67265531309a47c4808939a6a84b8021"}}, "hash": "8733349cdc6f1906dc3654f041cef15bd9206d530980923b321d8201234b2237", "text": "### `VIR_PERF_PARAM_CMT`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CMT\n\nMacro for typed parameter name that represents CMT perf event which can be\nused to measure the usage of cache (bytes) by applications running on the\nplatform. It corresponds to the \"perf.cmt\" field in the *Stats APIs.\n\n### `VIR_PERF_PARAM_CONTEXT_SWITCHES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CONTEXT_SWITCHES\n\nMacro for typed parameter name that represents context_switches perf event\nwhich can be used to measure the count of context switches by applications\nrunning on the platform. It corresponds to the \"perf.context_switches\" field\nin the *Stats APIs.\n\n### `VIR_PERF_PARAM_CPU_CLOCK`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CPU_CLOCK\n\nMacro for typed parameter name that represents cpu_clock perf event which can\nbe used to measure the count of cpu clock time by applications running on the\nplatform. It corresponds to the \"perf.cpu_clock\" field in the *Stats APIs.\n\n### `VIR_PERF_PARAM_CPU_CYCLES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CPU_CYCLES\n\nMacro for typed parameter name that represents cpu_cycles perf event\ndescribing the total/elapsed cpu cycles. This can be used to measure how many\ncpu cycles one instruction needs. It corresponds to the \"perf.cpu_cycles\"\nfield in the *Stats APIs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "08af6f2c-6674-4f5c-b593-a71457dbdb38": {"__data__": {"id_": "08af6f2c-6674-4f5c-b593-a71457dbdb38", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "eb4075a0-c766-4f24-9589-8a0db6da6725", "node_type": null, "metadata": {}, "hash": "8733349cdc6f1906dc3654f041cef15bd9206d530980923b321d8201234b2237"}, "3": {"node_id": "dd82462b-3dc1-4602-a3fc-6012d1df7c19", "node_type": null, "metadata": {}, "hash": "1753a32d8ee53cdd1c6b4c0003c2a74e99f96550fce234f70e4e03fe3f51f5ea"}}, "hash": "afb462c9e94bfcb4f84c9c203d0c9b4b67265531309a47c4808939a6a84b8021", "text": "### `VIR_PERF_PARAM_CPU_MIGRATIONS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_CPU_MIGRATIONS\n\nMacro for typed parameter name that represents cpu_migrations perf event which\ncan be used to measure the count of cpu migrations by applications running on\nthe platform. It corresponds to the \"perf.cpu_migrations\" field in the *Stats\nAPIs.\n\n### `VIR_PERF_PARAM_EMULATION_FAULTS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_EMULATION_FAULTS\n\nMacro for typed parameter name that represents emulation_faults perf event\nwhich can be used to measure the count of emulation faults by applications\nrunning on the platform. It corresponds to the \"perf.emulation_faults\" field\nin the *Stats APIs.\n\n### `VIR_PERF_PARAM_INSTRUCTIONS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_INSTRUCTIONS\n\nMacro for typed parameter name that represents instructions perf event which\ncan be used to measure the count of instructions by applications running on\nthe platform. It corresponds to the \"perf.instructions\" field in the *Stats\nAPIs.\n\n### `VIR_PERF_PARAM_MBML`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_MBML\n\nMacro for typed parameter name that represents MBML perf event which can be\nused to monitor the amount of data (bytes/s) sent through the memory\ncontroller on the socket. It corresponds to the \"perf.mbml\" field in the\n*Stats APIs.\n\n### `VIR_PERF_PARAM_MBMT`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_MBMT\n\nMacro for typed parameter name that represents MBMT perf event which can be\nused to monitor total system bandwidth (bytes/s) from one level of cache to\nanother.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dd82462b-3dc1-4602-a3fc-6012d1df7c19": {"__data__": {"id_": "dd82462b-3dc1-4602-a3fc-6012d1df7c19", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "08af6f2c-6674-4f5c-b593-a71457dbdb38", "node_type": null, "metadata": {}, "hash": "afb462c9e94bfcb4f84c9c203d0c9b4b67265531309a47c4808939a6a84b8021"}, "3": {"node_id": "99647f0a-5a82-4be2-b2ff-e18b92791af5", "node_type": null, "metadata": {}, "hash": "f75cf3a86eff02912a8c24ee73c2cf186813169ea4e9d01c0ac3b611cb6a1484"}}, "hash": "1753a32d8ee53cdd1c6b4c0003c2a74e99f96550fce234f70e4e03fe3f51f5ea", "text": "It corresponds to the \"perf.mbmt\" field in the *Stats APIs.\n\n### `VIR_PERF_PARAM_PAGE_FAULTS`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_PAGE_FAULTS\n\nMacro for typed parameter name that represents page_faults perf event which\ncan be used to measure the count of page faults by applications running on the\nplatform. It corresponds to the \"perf.page_faults\" field in the *Stats APIs.\n\n### `VIR_PERF_PARAM_PAGE_FAULTS_MAJ`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_PAGE_FAULTS_MAJ\n\nMacro for typed parameter name that represents page_faults_maj perf event\nwhich can be used to measure the count of major page faults by applications\nrunning on the platform. It corresponds to the \"perf.page_faults_maj\" field in\nthe *Stats APIs.\n\n### `VIR_PERF_PARAM_PAGE_FAULTS_MIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_PAGE_FAULTS_MIN\n\nMacro for typed parameter name that represents page_faults_min perf event\nwhich can be used to measure the count of minor page faults by applications\nrunning on the platform. It corresponds to the \"perf.page_faults_min\" field in\nthe *Stats APIs.\n\n### `VIR_PERF_PARAM_REF_CPU_CYCLES`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_REF_CPU_CYCLES\n\nMacro for typed parameter name that represents ref_cpu_cycles perf event which\ncan be used to measure the count of total cpu cycles not affected by CPU\nfrequency scaling by applications running on the platform. It corresponds to\nthe \"perf.ref_cpu_cycles\" field in the *Stats APIs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "99647f0a-5a82-4be2-b2ff-e18b92791af5": {"__data__": {"id_": "99647f0a-5a82-4be2-b2ff-e18b92791af5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "dd82462b-3dc1-4602-a3fc-6012d1df7c19", "node_type": null, "metadata": {}, "hash": "1753a32d8ee53cdd1c6b4c0003c2a74e99f96550fce234f70e4e03fe3f51f5ea"}, "3": {"node_id": "4b1c2e46-a306-4af2-9cc0-634f5ce72648", "node_type": null, "metadata": {}, "hash": "9d1e29e78c177852bbc214ee825da1ab01282a3dffb64bad428dfbb06f0e398b"}}, "hash": "f75cf3a86eff02912a8c24ee73c2cf186813169ea4e9d01c0ac3b611cb6a1484", "text": "### `VIR_PERF_PARAM_STALLED_CYCLES_BACKEND`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_STALLED_CYCLES_BACKEND\n\nMacro for typed parameter name that represents stalled_cycles_backend perf\nevent which can be used to measure the count of stalled cpu cycles in the\nbackend of the instruction processor pipeline by application running on the\nplatform. It corresponds to the \"perf.stalled_cycles_backend\" field in the\n*Stats APIs.\n\n### `VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND\n\nMacro for typed parameter name that represents stalled_cycles_frontend perf\nevent which can be used to measure the count of stalled cpu cycles in the\nfrontend of the instruction processor pipeline by applications running on the\nplatform. It corresponds to the \"perf.stalled_cycles_frontend\" field in the\n*Stats APIs.\n\n### `VIR_PERF_PARAM_TASK_CLOCK`\u00c2\u00b6\n\n    \n    \n    #define VIR_PERF_PARAM_TASK_CLOCK\n\nMacro for typed parameter name that represents task_clock perf event which can\nbe used to measure the count of task clock time by applications running on the\nplatform. It corresponds to the \"perf.task_clock\" field in the *Stats APIs.\n\n### `VIR_UNUSE_CPU`\u00c2\u00b6\n\n    \n    \n    #define VIR_UNUSE_CPU\n\nThis macro is to be used in conjunction with [virDomainPinVcpu](libvirt-\nlibvirt-domain.html#virDomainPinVcpu)() API. It resets the bit (CPU not\nusable) of the related cpu in cpumap.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4b1c2e46-a306-4af2-9cc0-634f5ce72648": {"__data__": {"id_": "4b1c2e46-a306-4af2-9cc0-634f5ce72648", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "99647f0a-5a82-4be2-b2ff-e18b92791af5", "node_type": null, "metadata": {}, "hash": "f75cf3a86eff02912a8c24ee73c2cf186813169ea4e9d01c0ac3b611cb6a1484"}, "3": {"node_id": "77aec93c-0d8a-4087-9251-304942430daa", "node_type": null, "metadata": {}, "hash": "924a73e6fa9790b87c5b2cae327677741511b1e682142afcb19008a4c870f526"}}, "hash": "9d1e29e78c177852bbc214ee825da1ab01282a3dffb64bad428dfbb06f0e398b", "text": "### `VIR_USE_CPU`\u00c2\u00b6\n\n    \n    \n    #define VIR_USE_CPU\n\nThis macro is to be used in conjunction with [virDomainPinVcpu](libvirt-\nlibvirt-domain.html#virDomainPinVcpu)() API. It sets the bit (CPU usable) of\nthe related cpu in cpumap.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "77aec93c-0d8a-4087-9251-304942430daa": {"__data__": {"id_": "77aec93c-0d8a-4087-9251-304942430daa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4b1c2e46-a306-4af2-9cc0-634f5ce72648", "node_type": null, "metadata": {}, "hash": "9d1e29e78c177852bbc214ee825da1ab01282a3dffb64bad428dfbb06f0e398b"}, "3": {"node_id": "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2", "node_type": null, "metadata": {}, "hash": "8b5240befbc7f148f98298ba30cdc41a6a7214ad85c9fde007d28b4d14d95b8c"}}, "hash": "924a73e6fa9790b87c5b2cae327677741511b1e682142afcb19008a4c870f526", "text": "It sets the bit (CPU usable) of\nthe related cpu in cpumap.\n\n### `_virBlkioParameter`\u00c2\u00b6\n\n    \n    \n    #define _virBlkioParameter\n\n### `_virMemoryParameter`\u00c2\u00b6\n\n    \n    \n    #define _virMemoryParameter\n\n### `_virSchedParameter`\u00c2\u00b6\n\n    \n    \n    #define _virSchedParameter\n\n### Types\u00c2\u00b6\n\n### `virBlkioParameter`\u00c2\u00b6\n\n    \n    \n    struct virBlkioParameter {\n    \n\nchar field[VIR_TYPED_PARAM_FIELD_LENGTH]| field|\n\nparameter name  \n  \n---|---|---  \nint| type|\n\nparameter type, [virTypedParameterType](libvirt-libvirt-\ncommon.html#virTypedParameterType)  \n  \nunion {  \n| int| i|\n\ntype is INT  \n  \n---|---|---  \nunsigned int| ui|\n\ntype is UINT  \n  \nlong long int| l|\n\ntype is LLONG  \n  \nunsigned long long int| ul|\n\ntype is ULLONG  \n  \ndouble| d|\n\ntype is DOUBLE  \n  \nchar| b|\n\ntype is BOOLEAN  \n  \nchar *| s|\n\ntype is STRING, may not be NULL  \n  \n}| value|\n\nparameter value\n\n|  \n      \n    \n    }\n    \n\n### `virBlkioParameterPtr`\u00c2\u00b6\n\n    \n    \n    typedef virBlkioParameter * virBlkioParameterPtr;\n\na [virBlkioParameterPtr](libvirt-libvirt-domain.html#virBlkioParameterPtr) is\na pointer to a [virBlkioParameter](libvirt-libvirt-\ndomain.html#virBlkioParameter) structure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2": {"__data__": {"id_": "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "77aec93c-0d8a-4087-9251-304942430daa", "node_type": null, "metadata": {}, "hash": "924a73e6fa9790b87c5b2cae327677741511b1e682142afcb19008a4c870f526"}, "3": {"node_id": "0fe610b8-dff8-439b-b2e3-1fd8fd009662", "node_type": null, "metadata": {}, "hash": "deb00b7cf64b8086e114f4f1972b5810d2fd62462fb91ddae2406554160800e6"}}, "hash": "8b5240befbc7f148f98298ba30cdc41a6a7214ad85c9fde007d28b4d14d95b8c", "text": "Provided for backwards\ncompatibility; [virTypedParameterPtr](libvirt-libvirt-\ncommon.html#virTypedParameterPtr) is the preferred alias.\n\n### `virBlkioParameterType`\u00c2\u00b6\n\nA blkio parameter field type. Provided for backwards compatibility;\n[virTypedParameterType](libvirt-libvirt-common.html#virTypedParameterType) is\nthe preferred enum\n\n    \n    \n    enum virBlkioParameterType {\n    \n\nVIR_DOMAIN_BLKIO_PARAM_BOOLEAN|  = | VIR_TYPED_PARAM_BOOLEAN  \n---|---|---  \nVIR_DOMAIN_BLKIO_PARAM_DOUBLE|  = | VIR_TYPED_PARAM_DOUBLE  \nVIR_DOMAIN_BLKIO_PARAM_INT|  = | VIR_TYPED_PARAM_INT  \nVIR_DOMAIN_BLKIO_PARAM_LLONG|  = | VIR_TYPED_PARAM_LLONG  \nVIR_DOMAIN_BLKIO_PARAM_UINT|  = | VIR_TYPED_PARAM_UINT  \nVIR_DOMAIN_BLKIO_PARAM_ULLONG|  = | VIR_TYPED_PARAM_ULLONG  \n      \n    \n    }\n    \n\n### `virConnectDomainEventAgentLifecycleReason`\u00c2\u00b6\n\n    \n    \n    enum virConnectDomainEventAgentLifecycleReason {\n    \n\nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN|  = | 0 (0x0)|\n\nunknown state change reason  \n  \n---|---|---|---  \nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED|  = | 1 (0x1)|\n\nstate changed due", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0fe610b8-dff8-439b-b2e3-1fd8fd009662": {"__data__": {"id_": "0fe610b8-dff8-439b-b2e3-1fd8fd009662", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2", "node_type": null, "metadata": {}, "hash": "8b5240befbc7f148f98298ba30cdc41a6a7214ad85c9fde007d28b4d14d95b8c"}, "3": {"node_id": "4a0932b2-5250-4a5a-823c-560e3cd23fc8", "node_type": null, "metadata": {}, "hash": "e7b3ba995f688ba6cb9ec1af8fc02014d8787a7f601122629cfbebaf03289616"}}, "hash": "deb00b7cf64b8086e114f4f1972b5810d2fd62462fb91ddae2406554160800e6", "text": "= | 1 (0x1)|\n\nstate changed due to domain start  \n  \nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL|  = | 2 (0x2)|\n\nchannel state changed  \n  \nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virConnectDomainEventAgentLifecycleState`\u00c2\u00b6\n\n    \n    \n    enum virConnectDomainEventAgentLifecycleState {\n    \n\nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED|  = | 1 (0x1)|\n\nagent connected  \n  \n---|---|---|---  \nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED|  = | 2 (0x2)|\n\nagent disconnected  \n  \nVIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virConnectDomainEventBlockJobStatus`\u00c2\u00b6\n\nTracks status of a [virDomainBlockPull](libvirt-libvirt-\ndomain.html#virDomainBlockPull)(), [virDomainBlockRebase](libvirt-libvirt-\ndomain.html#virDomainBlockRebase)(), [virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy)(), or [virDomainBlockCommit](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4a0932b2-5250-4a5a-823c-560e3cd23fc8": {"__data__": {"id_": "4a0932b2-5250-4a5a-823c-560e3cd23fc8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0fe610b8-dff8-439b-b2e3-1fd8fd009662", "node_type": null, "metadata": {}, "hash": "deb00b7cf64b8086e114f4f1972b5810d2fd62462fb91ddae2406554160800e6"}, "3": {"node_id": "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4", "node_type": null, "metadata": {}, "hash": "db943e1d7f96a70732efe5f4f5fb9de54582ee8c0481231b7bf32137e84d131d"}}, "hash": "e7b3ba995f688ba6cb9ec1af8fc02014d8787a7f601122629cfbebaf03289616", "text": "or [virDomainBlockCommit](libvirt-libvirt-\ndomain.html#virDomainBlockCommit)() operation\n\n    \n    \n    enum virConnectDomainEventBlockJobStatus {\n    \n\nVIR_DOMAIN_BLOCK_JOB_COMPLETED|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_BLOCK_JOB_FAILED|  = | 1 (0x1)  \nVIR_DOMAIN_BLOCK_JOB_CANCELED|  = | 2 (0x2)  \nVIR_DOMAIN_BLOCK_JOB_READY|  = | 3 (0x3)  \nVIR_DOMAIN_BLOCK_JOB_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virConnectDomainEventDiskChangeReason`\u00c2\u00b6\n\nThe reason describing why this callback is called\n\n    \n    \n    enum virConnectDomainEventDiskChangeReason {\n    \n\nVIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START|  = | 0 (0x0)|\n\nRemovable media changed to empty according to startup policy as source was\nmissing. oldSrcPath is set, newSrcPath is NULL  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START|  = | 1 (0x1)|\n\nDisk was dropped from domain as source file was missing. oldSrcPath is set,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4": {"__data__": {"id_": "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4a0932b2-5250-4a5a-823c-560e3cd23fc8", "node_type": null, "metadata": {}, "hash": "e7b3ba995f688ba6cb9ec1af8fc02014d8787a7f601122629cfbebaf03289616"}, "3": {"node_id": "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25", "node_type": null, "metadata": {}, "hash": "90be3e2c9bee0395de16be7e33fe8fb913101828915beec5c169a7d8b7757a8f"}}, "hash": "db943e1d7f96a70732efe5f4f5fb9de54582ee8c0481231b7bf32137e84d131d", "text": "oldSrcPath is set,\nnewSrcPath is NULL  \n  \nVIR_DOMAIN_EVENT_DISK_CHANGE_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virConnectGetAllDomainStatsFlags`\u00c2\u00b6\n\n    \n    \n    enum virConnectGetAllDomainStatsFlags {\n    \n\nVIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE|  = | VIR_CONNECT_LIST_DOMAINS_ACTIVE  \n---|---|---  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE|  = |\nVIR_CONNECT_LIST_DOMAINS_INACTIVE  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER|  = | VIR_CONNECT_LIST_DOMAINS_OTHER  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED|  = | VIR_CONNECT_LIST_DOMAINS_PAUSED  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT|  = |\nVIR_CONNECT_LIST_DOMAINS_PERSISTENT  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING|  = |\nVIR_CONNECT_LIST_DOMAINS_RUNNING  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF|  = |\nVIR_CONNECT_LIST_DOMAINS_SHUTOFF  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT|  = |\nVIR_CONNECT_LIST_DOMAINS_TRANSIENT  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT|  = | 536870912 (0x20000000;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25": {"__data__": {"id_": "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4", "node_type": null, "metadata": {}, "hash": "db943e1d7f96a70732efe5f4f5fb9de54582ee8c0481231b7bf32137e84d131d"}, "3": {"node_id": "f82f96ad-e643-4731-93a0-bd84c9643fc7", "node_type": null, "metadata": {}, "hash": "1f1dac8e525c9001219259da5da4367db37d5bc454410a23bad780184b44d07e"}}, "hash": "90be3e2c9bee0395de16be7e33fe8fb913101828915beec5c169a7d8b7757a8f", "text": "1 <<\n29)|\n\nreport statistics that can be obtained immediately without any blocking  \n  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING|  = | 1073741824 (0x40000000; 1 <<\n30)|\n\ninclude backing chain for block stats  \n  \nVIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS|  = | 2147483648 (0x80000000;\n1 << 31)|\n\nenforce requested stats  \n      \n    \n    }\n    \n\n### `virConnectListAllDomainsFlags`\u00c2\u00b6\n\nFlags used to tune which domains are listed by\n[virConnectListAllDomains](libvirt-libvirt-\ndomain.html#virConnectListAllDomains)(). Note that these flags come in groups;\nif all bits from a group are 0, then that group is not used to filter results.\n\n    \n    \n    enum virConnectListAllDomainsFlags {\n    \n\nVIR_CONNECT_LIST_DOMAINS_ACTIVE|  = | 1 (0x1; 1 << 0)  \n---|---|---  \nVIR_CONNECT_LIST_DOMAINS_INACTIVE|  = | 2 (0x2; 1 << 1)  \nVIR_CONNECT_LIST_DOMAINS_PERSISTENT|  = | 4 (0x4; 1 << 2)  \nVIR_CONNECT_LIST_DOMAINS_TRANSIENT|  = | 8 (0x8; 1 << 3)  \nVIR_CONNECT_LIST_DOMAINS_RUNNING|  = | 16 (0x10; 1 << 4)  \nVIR_CONNECT_LIST_DOMAINS_PAUSED|  = | 32 (0x20; 1 << 5)  \nVIR_CONNECT_LIST_DOMAINS_SHUTOFF|  = | 64 (0x40;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f82f96ad-e643-4731-93a0-bd84c9643fc7": {"__data__": {"id_": "f82f96ad-e643-4731-93a0-bd84c9643fc7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25", "node_type": null, "metadata": {}, "hash": "90be3e2c9bee0395de16be7e33fe8fb913101828915beec5c169a7d8b7757a8f"}, "3": {"node_id": "99b1fb4c-a650-4b17-811c-049ae96bd2da", "node_type": null, "metadata": {}, "hash": "2c7e61e031231b30d745da77d07dc3448b5c939957230c46a94dec018a51a094"}}, "hash": "1f1dac8e525c9001219259da5da4367db37d5bc454410a23bad780184b44d07e", "text": "1 << 6)  \nVIR_CONNECT_LIST_DOMAINS_OTHER|  = | 128 (0x80; 1 << 7)  \nVIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE|  = | 256 (0x100; 1 << 8)  \nVIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE|  = | 512 (0x200; 1 << 9)  \nVIR_CONNECT_LIST_DOMAINS_AUTOSTART|  = | 1024 (0x400; 1 << 10)  \nVIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART|  = | 2048 (0x800; 1 << 11)  \nVIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT|  = | 4096 (0x1000; 1 << 12)  \nVIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT|  = | 8192 (0x2000; 1 << 13)  \nVIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT|  = | 16384 (0x4000; 1 << 14)  \nVIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT|  = | 32768 (0x8000; 1 << 15)  \n      \n    \n    }\n    \n\n### `virDomain`\u00c2\u00b6\n\n    \n    \n    struct virDomain {\n    \n\nThe content of this structure is not made public by the API\n\n    \n    \n    }\n    \n\n### `virDomainAbortJobFlagsValues`\u00c2\u00b6\n\nFlags OR'ed together to provide specific behavior when aborting a domain job.\n\n    \n    \n    enum virDomainAbortJobFlagsValues {\n    \n\nVIR_DOMAIN_ABORT_JOB_POSTCOPY|  = | 1 (0x1; 1 << 0)|\n\nInterrupt post-copy migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "99b1fb4c-a650-4b17-811c-049ae96bd2da": {"__data__": {"id_": "99b1fb4c-a650-4b17-811c-049ae96bd2da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f82f96ad-e643-4731-93a0-bd84c9643fc7", "node_type": null, "metadata": {}, "hash": "1f1dac8e525c9001219259da5da4367db37d5bc454410a23bad780184b44d07e"}, "3": {"node_id": "a4a711a5-5017-4855-b3b5-a38a63fcbb67", "node_type": null, "metadata": {}, "hash": "4f4414ce5ac9ad1ad0d4d34b138ae9ad3f676f85fb9cb5e75ebe0141b394081a"}}, "hash": "2c7e61e031231b30d745da77d07dc3448b5c939957230c46a94dec018a51a094", "text": "Since migration in a post-copy phase cannot be\naborted without losing the domain (none of the hosts involved in migration has\na complete state of the domain), the migration will be suspended and it can\nlater be resumed using virDomainMigrate* APIs with\n[VIR_MIGRATE_POSTCOPY_RESUME](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_POSTCOPY_RESUME) flag.  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainAgentResponseTimeoutValues`\u00c2\u00b6\n\n    \n    \n    enum virDomainAgentResponseTimeoutValues {\n    \n\nVIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK|  = | -2 (-0x2)  \n---|---|---  \nVIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT|  = | -1 (-0x1)  \nVIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT|  = | 0 (0x0)  \n      \n    \n    }\n    \n\n### `virDomainAuthorizedSSHKeysSetFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainAuthorizedSSHKeysSetFlags {\n    \n\nVIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND|  = | 1 (0x1; 1 << 0)|\n\ndon't truncate file, just append  \n  \n---|---|---|---  \nVIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE|  = | 2 (0x2; 1 << 1)|\n\nremove keys,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a4a711a5-5017-4855-b3b5-a38a63fcbb67": {"__data__": {"id_": "a4a711a5-5017-4855-b3b5-a38a63fcbb67", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "99b1fb4c-a650-4b17-811c-049ae96bd2da", "node_type": null, "metadata": {}, "hash": "2c7e61e031231b30d745da77d07dc3448b5c939957230c46a94dec018a51a094"}, "3": {"node_id": "0b0ad2af-b753-437b-991b-26b0879f6310", "node_type": null, "metadata": {}, "hash": "d49766c26552241f879685180454fe83d7d47c82262fa632664f7a11b9f12fea"}}, "hash": "4f4414ce5ac9ad1ad0d4d34b138ae9ad3f676f85fb9cb5e75ebe0141b394081a", "text": "1 << 1)|\n\nremove keys, instead of adding them  \n      \n    \n    }\n    \n\n### `virDomainBackupBeginFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainBackupBeginFlags {\n    \n\nVIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL|  = | 1 (0x1; 1 << 0)|\n\nreuse separately provided images  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainBlockCommitFlags`\u00c2\u00b6\n\nFlags available for [virDomainBlockCommit](libvirt-libvirt-\ndomain.html#virDomainBlockCommit)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0b0ad2af-b753-437b-991b-26b0879f6310": {"__data__": {"id_": "0b0ad2af-b753-437b-991b-26b0879f6310", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a4a711a5-5017-4855-b3b5-a38a63fcbb67", "node_type": null, "metadata": {}, "hash": "4f4414ce5ac9ad1ad0d4d34b138ae9ad3f676f85fb9cb5e75ebe0141b394081a"}, "3": {"node_id": "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb", "node_type": null, "metadata": {}, "hash": "e5aa0435bc6de5f02c6541e7973781b6feaf194b1e7fd36a2cc5238d8332ced6"}}, "hash": "d49766c26552241f879685180454fe83d7d47c82262fa632664f7a11b9f12fea", "text": "enum virDomainBlockCommitFlags {\n    \n\nVIR_DOMAIN_BLOCK_COMMIT_SHALLOW|  = | 1 (0x1; 1 << 0)|\n\nNULL base means next backing file, not whole chain  \n  \n---|---|---|---  \nVIR_DOMAIN_BLOCK_COMMIT_DELETE|  = | 2 (0x2; 1 << 1)|\n\nDelete any files that are now invalid after their contents have been committed  \n  \nVIR_DOMAIN_BLOCK_COMMIT_ACTIVE|  = | 4 (0x4; 1 << 2)|\n\nAllow a two-phase commit when top is the active layer  \n  \nVIR_DOMAIN_BLOCK_COMMIT_RELATIVE|  = | 8 (0x8; 1 << 3)|\n\nkeep the backing chain referenced using relative names  \n  \nVIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES|  = | 16 (0x10; 1 << 4)|\n\nbandwidth in bytes/s instead of MiB/s  \n      \n    \n    }\n    \n\n### `virDomainBlockCopyFlags`\u00c2\u00b6\n\nFlags available for [virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy)().\n\n    \n    \n    enum virDomainBlockCopyFlags {\n    \n\nVIR_DOMAIN_BLOCK_COPY_SHALLOW|  = | 1 (0x1; 1 << 0)|\n\nLimit copy to top of source backing chain  \n  \n---|---|---|---  \nVIR_DOMAIN_BLOCK_COPY_REUSE_EXT|  = | 2 (0x2; 1 << 1)|\n\nReuse existing external file for a copy  \n  \nVIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB|  = | 4 (0x4;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb": {"__data__": {"id_": "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0b0ad2af-b753-437b-991b-26b0879f6310", "node_type": null, "metadata": {}, "hash": "d49766c26552241f879685180454fe83d7d47c82262fa632664f7a11b9f12fea"}, "3": {"node_id": "933fc983-492a-43fe-8989-7308c581393b", "node_type": null, "metadata": {}, "hash": "beb7d81348d15d8d8eb6c0ea7ce92976b2985921f5470e5ff180c01d47ca7388"}}, "hash": "e5aa0435bc6de5f02c6541e7973781b6feaf194b1e7fd36a2cc5238d8332ced6", "text": "1 << 2)|\n\nDon't force usage of recoverable job for the copy operation  \n  \nVIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES|  = | 8 (0x8; 1 << 3)|\n\nForce the copy job to synchronously propagate guest writes into the\ndestination image, so that the copy is guaranteed to converge  \n      \n    \n    }\n    \n\n### `virDomainBlockInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainBlockInfo {\n    \n\nunsigned long long| capacity|\n\nlogical size in bytes of the image (how much storage the guest will see)  \n  \n---|---|---  \nunsigned long long| allocation|\n\nhost storage in bytes occupied by the image (such as highest allocated extent\nif there are no holes, similar to 'du')  \n  \nunsigned long long| physical|\n\nhost physical size in bytes of the image container (last offset, similar to\n'ls')  \n      \n    \n    }\n    \n\n### `virDomainBlockInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainBlockInfo * virDomainBlockInfoPtr;\n\n### `virDomainBlockJobAbortFlags`\u00c2\u00b6\n\n[VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC): Request only, do not wait for\ncompletion [VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "933fc983-492a-43fe-8989-7308c581393b": {"__data__": {"id_": "933fc983-492a-43fe-8989-7308c581393b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb", "node_type": null, "metadata": {}, "hash": "e5aa0435bc6de5f02c6541e7973781b6feaf194b1e7fd36a2cc5238d8332ced6"}, "3": {"node_id": "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb", "node_type": null, "metadata": {}, "hash": "e0d562818c2e74462eeed6d9ca609868d30ebd33f8d9a95039ea6f0cdb8b5fa4"}}, "hash": "beb7d81348d15d8d8eb6c0ea7ce92976b2985921f5470e5ff180c01d47ca7388", "text": "html#VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT): Pivot to new file when ending a\ncopy or active commit job\n\n    \n    \n    enum virDomainBlockJobAbortFlags {\n    \n\nVIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC|  = | 1 (0x1; 1 << 0)  \n---|---|---  \nVIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT|  = | 2 (0x2; 1 << 1)  \n      \n    \n    }\n    \n\n### `virDomainBlockJobCursor`\u00c2\u00b6\n\n    \n    \n    typedef unsigned long long virDomainBlockJobCursor;\n\nAn iterator for monitoring block job operations\n\n### `virDomainBlockJobInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainBlockJobInfo {\n    \n\nint| type|\n\n[virDomainBlockJobType](libvirt-libvirt-domain.html#virDomainBlockJobType)  \n  \n---|---|---  \nunsigned long| bandwidth|\n\nThe following fields provide an indication of block job progress. `cur`\nindicates the current position and will be between 0 and `end`. `end` is the\nfinal cursor position for this operation and represents completion. To\napproximate progress, divide `cur` by `end`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb": {"__data__": {"id_": "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "933fc983-492a-43fe-8989-7308c581393b", "node_type": null, "metadata": {}, "hash": "beb7d81348d15d8d8eb6c0ea7ce92976b2985921f5470e5ff180c01d47ca7388"}, "3": {"node_id": "bbdba14e-9e0d-4393-bd71-4287e239b4a0", "node_type": null, "metadata": {}, "hash": "3b1bd306ebca48517d97316fa622f4e08310b27f11a60a97af910a8f64c169cd"}}, "hash": "e0d562818c2e74462eeed6d9ca609868d30ebd33f8d9a95039ea6f0cdb8b5fa4", "text": "[virDomainBlockJobCursor](libvirt-libvirt-\ndomain.html#virDomainBlockJobCursor)| cur  \n[virDomainBlockJobCursor](libvirt-libvirt-\ndomain.html#virDomainBlockJobCursor)| end  \n      \n    \n    }\n    \n\n### `virDomainBlockJobInfoFlags`\u00c2\u00b6\n\nFlags for use with [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)\n\n    \n    \n    enum virDomainBlockJobInfoFlags {\n    \n\nVIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES|  = | 1 (0x1; 1 << 0)|\n\nbandwidth in bytes/s instead of MiB/s  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainBlockJobInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainBlockJobInfo * virDomainBlockJobInfoPtr;\n\n### `virDomainBlockJobSetSpeedFlags`\u00c2\u00b6\n\nFlags for use with [virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)\n\n    \n    \n    enum virDomainBlockJobSetSpeedFlags {\n    \n\nVIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES|  = | 1 (0x1; 1 << 0)|\n\nbandwidth in bytes/s instead of MiB/s  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainBlockJobType`\u00c2\u00b6\n\nDescribes various possible block jobs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bbdba14e-9e0d-4393-bd71-4287e239b4a0": {"__data__": {"id_": "bbdba14e-9e0d-4393-bd71-4287e239b4a0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb", "node_type": null, "metadata": {}, "hash": "e0d562818c2e74462eeed6d9ca609868d30ebd33f8d9a95039ea6f0cdb8b5fa4"}, "3": {"node_id": "55541e77-6969-4876-895d-dc735ce6f8b1", "node_type": null, "metadata": {}, "hash": "b710961ca3405b71c06e8ecdcc2d40b3bd0579c598924a971d360e34bce86967"}}, "hash": "3b1bd306ebca48517d97316fa622f4e08310b27f11a60a97af910a8f64c169cd", "text": "enum virDomainBlockJobType {\n    \n\nVIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN|  = | 0 (0x0)|\n\nPlaceholder  \n  \n---|---|---|---  \nVIR_DOMAIN_BLOCK_JOB_TYPE_PULL|  = | 1 (0x1)|\n\nBlock Pull ([virDomainBlockPull](libvirt-libvirt-\ndomain.html#virDomainBlockPull), or [virDomainBlockRebase](libvirt-libvirt-\ndomain.html#virDomainBlockRebase) without flags), job ends on completion  \n  \nVIR_DOMAIN_BLOCK_JOB_TYPE_COPY|  = | 2 (0x2)|\n\nBlock Copy ([virDomainBlockCopy](libvirt-libvirt-\ndomain.html#virDomainBlockCopy), or [virDomainBlockRebase](libvirt-libvirt-\ndomain.html#virDomainBlockRebase) with flags), job exists as long as mirroring\nis active  \n  \nVIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT|  = | 3 (0x3)|\n\nBlock Commit ([virDomainBlockCommit](libvirt-libvirt-\ndomain.html#virDomainBlockCommit) without flags), job ends on completion  \n  \nVIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT|  = | 4 (0x4)|\n\nActive Block Commit ([virDomainBlockCommit](libvirt-libvirt-\ndomain.html#virDomainBlockCommit) with flags), job exists as long as sync is\nactive  \n  \nVIR_DOMAIN_BLOCK_JOB_TYPE_BACKUP|  = | 5 (0x5)|\n\nBackup ([virDomainBackupBegin](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "55541e77-6969-4876-895d-dc735ce6f8b1": {"__data__": {"id_": "55541e77-6969-4876-895d-dc735ce6f8b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bbdba14e-9e0d-4393-bd71-4287e239b4a0", "node_type": null, "metadata": {}, "hash": "3b1bd306ebca48517d97316fa622f4e08310b27f11a60a97af910a8f64c169cd"}, "3": {"node_id": "aa212227-e33d-4d8e-8455-c0c5c33f6422", "node_type": null, "metadata": {}, "hash": "5999de48732fa973a7af2d8643e93dd559c518f7eba1ea304128f4dd07740223"}}, "hash": "b710961ca3405b71c06e8ecdcc2d40b3bd0579c598924a971d360e34bce86967", "text": "html#virDomainBackupBegin))  \n  \nVIR_DOMAIN_BLOCK_JOB_TYPE_LAST|  = | 6 (0x6)  \n      \n    \n    }\n    \n\n### `virDomainBlockPullFlags`\u00c2\u00b6\n\nFlags for use with [virDomainBlockPull](libvirt-libvirt-\ndomain.html#virDomainBlockPull) (values chosen to be a subset of the flags for\n[virDomainBlockRebase](libvirt-libvirt-domain.html#virDomainBlockRebase))\n\n    \n    \n    enum virDomainBlockPullFlags {\n    \n\nVIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES|  = | 64 (0x40; 1 << 6)|\n\nbandwidth in bytes/s instead of MiB/s  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainBlockRebaseFlags`\u00c2\u00b6\n\nFlags available for [virDomainBlockRebase](libvirt-libvirt-\ndomain.html#virDomainBlockRebase)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa212227-e33d-4d8e-8455-c0c5c33f6422": {"__data__": {"id_": "aa212227-e33d-4d8e-8455-c0c5c33f6422", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "55541e77-6969-4876-895d-dc735ce6f8b1", "node_type": null, "metadata": {}, "hash": "b710961ca3405b71c06e8ecdcc2d40b3bd0579c598924a971d360e34bce86967"}, "3": {"node_id": "1524f24d-97f7-4cc4-80b6-564b3358c576", "node_type": null, "metadata": {}, "hash": "6946f37329557713dfa5caad4ae7740b2fbc92d912899a4326285673a53b21cc"}}, "hash": "5999de48732fa973a7af2d8643e93dd559c518f7eba1ea304128f4dd07740223", "text": "enum virDomainBlockRebaseFlags {\n    \n\nVIR_DOMAIN_BLOCK_REBASE_SHALLOW|  = | 1 (0x1; 1 << 0)|\n\nLimit copy to top of source backing chain  \n  \n---|---|---|---  \nVIR_DOMAIN_BLOCK_REBASE_REUSE_EXT|  = | 2 (0x2; 1 << 1)|\n\nReuse existing external file for a copy  \n  \nVIR_DOMAIN_BLOCK_REBASE_COPY_RAW|  = | 4 (0x4; 1 << 2)|\n\nMake destination file raw  \n  \nVIR_DOMAIN_BLOCK_REBASE_COPY|  = | 8 (0x8; 1 << 3)|\n\nStart a copy job  \n  \nVIR_DOMAIN_BLOCK_REBASE_RELATIVE|  = | 16 (0x10; 1 << 4)|\n\nKeep backing chain referenced using relative names  \n  \nVIR_DOMAIN_BLOCK_REBASE_COPY_DEV|  = | 32 (0x20; 1 << 5)|\n\nTreat destination as block device instead of file  \n  \nVIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES|  = | 64 (0x40; 1 << 6)|\n\nbandwidth in bytes/s instead of MiB/s  \n      \n    \n    }\n    \n\n### `virDomainBlockResizeFlags`\u00c2\u00b6\n\nFlags available for [virDomainBlockResize](libvirt-libvirt-\ndomain.html#virDomainBlockResize)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1524f24d-97f7-4cc4-80b6-564b3358c576": {"__data__": {"id_": "1524f24d-97f7-4cc4-80b6-564b3358c576", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "aa212227-e33d-4d8e-8455-c0c5c33f6422", "node_type": null, "metadata": {}, "hash": "5999de48732fa973a7af2d8643e93dd559c518f7eba1ea304128f4dd07740223"}, "3": {"node_id": "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31", "node_type": null, "metadata": {}, "hash": "ede475d6bb01e0bb64ae741917e843ca01500332eb8ea75d50fee301cc52a8fb"}}, "hash": "6946f37329557713dfa5caad4ae7740b2fbc92d912899a4326285673a53b21cc", "text": "enum virDomainBlockResizeFlags {\n    \n\nVIR_DOMAIN_BLOCK_RESIZE_BYTES|  = | 1 (0x1; 1 << 0)|\n\nsize in bytes instead of KiB  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainBlockStatsPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainBlockStatsStruct * virDomainBlockStatsPtr;\n\nA pointer to a [virDomainBlockStats](libvirt-libvirt-\ndomain.html#virDomainBlockStats) structure\n\n### `virDomainBlockStatsStruct`\u00c2\u00b6\n\n    \n    \n    struct virDomainBlockStatsStruct {\n    \n\nlong long| rd_req|\n\nnumber of read requests  \n  \n---|---|---  \nlong long| rd_bytes|\n\nnumber of read bytes  \n  \nlong long| wr_req|\n\nnumber of write requests  \n  \nlong long| wr_bytes|\n\nnumber of written bytes  \n  \nlong long| errs|\n\nIn Xen this returns the mysterious 'oo_req'.  \n      \n    \n    }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31": {"__data__": {"id_": "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1524f24d-97f7-4cc4-80b6-564b3358c576", "node_type": null, "metadata": {}, "hash": "6946f37329557713dfa5caad4ae7740b2fbc92d912899a4326285673a53b21cc"}, "3": {"node_id": "0dc53bf1-8892-4b35-8d70-1078060046d2", "node_type": null, "metadata": {}, "hash": "66a9630b4648d2c968ca6fe046aca82c4834d32e369d077bdd9ae635eee8f145"}}, "hash": "ede475d6bb01e0bb64ae741917e843ca01500332eb8ea75d50fee301cc52a8fb", "text": "### `virDomainBlockedReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainBlockedReason {\n    \n\nVIR_DOMAIN_BLOCKED_UNKNOWN|  = | 0 (0x0)|\n\nthe reason is unknown  \n  \n---|---|---|---  \nVIR_DOMAIN_BLOCKED_LAST|  = | 1 (0x1)  \n      \n    \n    }\n    \n\n### `virDomainChannelFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainChannelFlags {\n    \n\nVIR_DOMAIN_CHANNEL_FORCE|  = | 1 (0x1; 1 << 0)|\n\nabort a (possibly) active channel connection to force a new connection  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainConsoleFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainConsoleFlags {\n    \n\nVIR_DOMAIN_CONSOLE_FORCE|  = | 1 (0x1; 1 << 0)|\n\nabort a (possibly) active console connection to force a new connection  \n  \n---|---|---|---  \nVIR_DOMAIN_CONSOLE_SAFE|  = | 2 (0x2; 1 << 1)|\n\ncheck if the console driver supports safe console operations  \n      \n    \n    }\n    \n\n### `virDomainControlErrorReason`\u00c2\u00b6\n\nReason for the error state.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0dc53bf1-8892-4b35-8d70-1078060046d2": {"__data__": {"id_": "0dc53bf1-8892-4b35-8d70-1078060046d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31", "node_type": null, "metadata": {}, "hash": "ede475d6bb01e0bb64ae741917e843ca01500332eb8ea75d50fee301cc52a8fb"}, "3": {"node_id": "095943dc-d304-4903-a29f-edfab5d96b1b", "node_type": null, "metadata": {}, "hash": "35e3d0e145bfb249d49639233166c3df1dcb78383ff69da6918988f0e8fb2c0e"}}, "hash": "66a9630b4648d2c968ca6fe046aca82c4834d32e369d077bdd9ae635eee8f145", "text": "enum virDomainControlErrorReason {\n    \n\nVIR_DOMAIN_CONTROL_ERROR_REASON_NONE|  = | 0 (0x0)|\n\nserver didn't provide a reason  \n  \n---|---|---|---  \nVIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN|  = | 1 (0x1)|\n\nunknown reason for the error  \n  \nVIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR|  = | 2 (0x2)|\n\nmonitor connection is broken  \n  \nVIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL|  = | 3 (0x3)|\n\nerror caused due to internal failure in libvirt  \n  \nVIR_DOMAIN_CONTROL_ERROR_REASON_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virDomainControlInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainControlInfo {\n    \n\nunsigned int| state|\n\ncontrol state, one of [virDomainControlState](libvirt-libvirt-\ndomain.html#virDomainControlState)  \n  \n---|---|---  \nunsigned int| details|\n\nstate details, currently 0 except for ERROR state (one of\n[virDomainControlErrorReason](libvirt-libvirt-\ndomain.html#virDomainControlErrorReason))  \n  \nunsigned long long| stateTime|\n\nfor how long (in msec) control interface has been in current state (except for\nOK and ERROR states)  \n      \n    \n    }\n    \n\n### `virDomainControlInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainControlInfo * virDomainControlInfoPtr;\n\nPointer to [virDomainControlInfo](libvirt-libvirt-\ndomain.html#virDomainControlInfo) structure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "095943dc-d304-4903-a29f-edfab5d96b1b": {"__data__": {"id_": "095943dc-d304-4903-a29f-edfab5d96b1b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0dc53bf1-8892-4b35-8d70-1078060046d2", "node_type": null, "metadata": {}, "hash": "66a9630b4648d2c968ca6fe046aca82c4834d32e369d077bdd9ae635eee8f145"}, "3": {"node_id": "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f", "node_type": null, "metadata": {}, "hash": "b6ebc07e9fbbdfcef618fa8bedb3cbfc278c167ed12014e778d76a8423f630b9"}}, "hash": "35e3d0e145bfb249d49639233166c3df1dcb78383ff69da6918988f0e8fb2c0e", "text": "### `virDomainControlState`\u00c2\u00b6\n\nCurrent state of a control interface to the domain.\n\n    \n    \n    enum virDomainControlState {\n    \n\nVIR_DOMAIN_CONTROL_OK|  = | 0 (0x0)|\n\noperational, ready to accept commands  \n  \n---|---|---|---  \nVIR_DOMAIN_CONTROL_JOB|  = | 1 (0x1)|\n\nbackground job is running (can be monitored by [virDomainGetJobInfo](libvirt-\nlibvirt-domain.html#virDomainGetJobInfo)); only limited set of commands may be\nallowed  \n  \nVIR_DOMAIN_CONTROL_OCCUPIED|  = | 2 (0x2)|\n\noccupied by a running command  \n  \nVIR_DOMAIN_CONTROL_ERROR|  = | 3 (0x3)|\n\nunusable, domain cannot be fully operated, possible reason is provided in the\ndetails field  \n  \nVIR_DOMAIN_CONTROL_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virDomainCoreDumpFlags`\u00c2\u00b6\n\nDomain core dump flags.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f": {"__data__": {"id_": "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "095943dc-d304-4903-a29f-edfab5d96b1b", "node_type": null, "metadata": {}, "hash": "35e3d0e145bfb249d49639233166c3df1dcb78383ff69da6918988f0e8fb2c0e"}, "3": {"node_id": "bba69e7a-64fc-4a42-b520-7d112e622d0b", "node_type": null, "metadata": {}, "hash": "1791ad1548371a8772acf2b02cb6729717a05817db2b28c73e8c25e0c13ae68a"}}, "hash": "b6ebc07e9fbbdfcef618fa8bedb3cbfc278c167ed12014e778d76a8423f630b9", "text": "enum virDomainCoreDumpFlags {\n    \n\nVIR_DUMP_CRASH|  = | 1 (0x1; 1 << 0)|\n\ncrash after dump  \n  \n---|---|---|---  \nVIR_DUMP_LIVE|  = | 2 (0x2; 1 << 1)|\n\nlive dump  \n  \nVIR_DUMP_BYPASS_CACHE|  = | 4 (0x4; 1 << 2)|\n\navoid file system cache pollution  \n  \nVIR_DUMP_RESET|  = | 8 (0x8; 1 << 3)|\n\nreset domain after dump finishes  \n  \nVIR_DUMP_MEMORY_ONLY|  = | 16 (0x10; 1 << 4)|\n\nuse dump-guest-memory  \n      \n    \n    }\n    \n\n### `virDomainCoreDumpFormat`\u00c2\u00b6\n\nValues for specifying different formats of domain core dumps.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bba69e7a-64fc-4a42-b520-7d112e622d0b": {"__data__": {"id_": "bba69e7a-64fc-4a42-b520-7d112e622d0b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f", "node_type": null, "metadata": {}, "hash": "b6ebc07e9fbbdfcef618fa8bedb3cbfc278c167ed12014e778d76a8423f630b9"}, "3": {"node_id": "e0204f56-beba-48d6-b3a6-a29288ba802a", "node_type": null, "metadata": {}, "hash": "2bf4931724b602042ba32290da4beec32b1c4cf91b9848c27e645d94e94d0c03"}}, "hash": "1791ad1548371a8772acf2b02cb6729717a05817db2b28c73e8c25e0c13ae68a", "text": "enum virDomainCoreDumpFormat {\n    \n\nVIR_DOMAIN_CORE_DUMP_FORMAT_RAW|  = | 0 (0x0)|\n\ndump guest memory in raw format  \n  \n---|---|---|---  \nVIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB|  = | 1 (0x1)|\n\nkdump-compressed format, with zlib compression  \n  \nVIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO|  = | 2 (0x2)|\n\nkdump-compressed format, with lzo compression  \n  \nVIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY|  = | 3 (0x3)|\n\nkdump-compressed format, with snappy compression  \n  \nVIR_DOMAIN_CORE_DUMP_FORMAT_WIN_DMP|  = | 4 (0x4)|\n\nWindows full crashdump format  \n  \nVIR_DOMAIN_CORE_DUMP_FORMAT_LAST|  = | 5 (0x5)|\n\nNB: this enum value will increase over time as new formats are added to the\nlibvirt API. It reflects the last format supported by this version of the\nlibvirt API.  \n      \n    \n    }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e0204f56-beba-48d6-b3a6-a29288ba802a": {"__data__": {"id_": "e0204f56-beba-48d6-b3a6-a29288ba802a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bba69e7a-64fc-4a42-b520-7d112e622d0b", "node_type": null, "metadata": {}, "hash": "1791ad1548371a8772acf2b02cb6729717a05817db2b28c73e8c25e0c13ae68a"}, "3": {"node_id": "788523f2-d1c6-455b-822e-fbcac2e2a1f9", "node_type": null, "metadata": {}, "hash": "620a822bba3f17c638c65d3907ef70a3384ddb1f1ce9d0bac701fcd28922e881"}}, "hash": "2bf4931724b602042ba32290da4beec32b1c4cf91b9848c27e645d94e94d0c03", "text": "### `virDomainCrashedReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainCrashedReason {\n    \n\nVIR_DOMAIN_CRASHED_UNKNOWN|  = | 0 (0x0)|\n\ncrashed for unknown reason  \n  \n---|---|---|---  \nVIR_DOMAIN_CRASHED_PANICKED|  = | 1 (0x1)|\n\ndomain panicked  \n  \nVIR_DOMAIN_CRASHED_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainCreateFlags`\u00c2\u00b6\n\nFlags OR'ed together to provide specific behaviour when creating a Domain.\n\n    \n    \n    enum virDomainCreateFlags {\n    \n\nVIR_DOMAIN_NONE|  = | 0 (0x0)|\n\nDefault behavior  \n  \n---|---|---|---  \nVIR_DOMAIN_START_PAUSED|  = | 1 (0x1; 1 << 0)|\n\nLaunch guest in paused state  \n  \nVIR_DOMAIN_START_AUTODESTROY|  = | 2 (0x2; 1 << 1)|\n\nAutomatically kill guest when [virConnectPtr](libvirt-libvirt-\nhost.html#virConnectPtr) is closed  \n  \nVIR_DOMAIN_START_BYPASS_CACHE|  = | 4 (0x4; 1 << 2)|\n\nAvoid file system cache pollution  \n  \nVIR_DOMAIN_START_FORCE_BOOT|  = | 8 (0x8; 1 << 3)|\n\nBoot, discarding any managed save  \n  \nVIR_DOMAIN_START_VALIDATE|  = | 16 (0x10; 1 << 4)|\n\nValidate the XML document against schema  \n  \nVIR_DOMAIN_START_RESET_NVRAM|  = | 32 (0x20;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "788523f2-d1c6-455b-822e-fbcac2e2a1f9": {"__data__": {"id_": "788523f2-d1c6-455b-822e-fbcac2e2a1f9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e0204f56-beba-48d6-b3a6-a29288ba802a", "node_type": null, "metadata": {}, "hash": "2bf4931724b602042ba32290da4beec32b1c4cf91b9848c27e645d94e94d0c03"}, "3": {"node_id": "ec0de399-d087-417e-b8e2-72fd2d0b2017", "node_type": null, "metadata": {}, "hash": "596897de04666cf888d01d24635bdda8c7dc89592c02242e4be94d4ca31c84e3"}}, "hash": "620a822bba3f17c638c65d3907ef70a3384ddb1f1ce9d0bac701fcd28922e881", "text": "1 << 5)|\n\nRe-initialize NVRAM from template  \n      \n    \n    }\n    \n\n### `virDomainDefineFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainDefineFlags {\n    \n\nVIR_DOMAIN_DEFINE_VALIDATE|  = | 1 (0x1; 1 << 0)|\n\nValidate the XML document against schema  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainDestroyFlagsValues`\u00c2\u00b6\n\nFlags used to provide specific behaviour to the\n[virDomainDestroyFlags](libvirt-libvirt-domain.html#virDomainDestroyFlags)()\nfunction\n\n    \n    \n    enum virDomainDestroyFlagsValues {\n    \n\nVIR_DOMAIN_DESTROY_DEFAULT|  = | 0 (0x0)|\n\nDefault behavior - could lead to data loss!!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ec0de399-d087-417e-b8e2-72fd2d0b2017": {"__data__": {"id_": "ec0de399-d087-417e-b8e2-72fd2d0b2017", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "788523f2-d1c6-455b-822e-fbcac2e2a1f9", "node_type": null, "metadata": {}, "hash": "620a822bba3f17c638c65d3907ef70a3384ddb1f1ce9d0bac701fcd28922e881"}, "3": {"node_id": "411f3ca6-7a79-4e46-8800-67fb4d2a15e7", "node_type": null, "metadata": {}, "hash": "fb61dd91c63d97b055d6e744d7bdf7380a5c1f53686ab694456bb0e283ea6233"}}, "hash": "596897de04666cf888d01d24635bdda8c7dc89592c02242e4be94d4ca31c84e3", "text": "!  \n  \n---|---|---|---  \nVIR_DOMAIN_DESTROY_GRACEFUL|  = | 1 (0x1; 1 << 0)|\n\nonly SIGTERM, no SIGKILL  \n  \nVIR_DOMAIN_DESTROY_REMOVE_LOGS|  = | 2 (0x2; 1 << 1)|\n\nremove VM logs on destroy  \n      \n    \n    }\n    \n\n### `virDomainDeviceModifyFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainDeviceModifyFlags {\n    \n\nVIR_DOMAIN_DEVICE_MODIFY_CONFIG|  = | VIR_DOMAIN_AFFECT_CONFIG|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \n---|---|---|---  \nVIR_DOMAIN_DEVICE_MODIFY_CURRENT|  = | VIR_DOMAIN_AFFECT_CURRENT|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_DEVICE_MODIFY_LIVE|  = | VIR_DOMAIN_AFFECT_LIVE|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_DEVICE_MODIFY_FORCE|  = | 4 (0x4; 1 << 2)|\n\nForcibly modify device (ex.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "411f3ca6-7a79-4e46-8800-67fb4d2a15e7": {"__data__": {"id_": "411f3ca6-7a79-4e46-8800-67fb4d2a15e7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ec0de399-d087-417e-b8e2-72fd2d0b2017", "node_type": null, "metadata": {}, "hash": "596897de04666cf888d01d24635bdda8c7dc89592c02242e4be94d4ca31c84e3"}, "3": {"node_id": "da8eae06-9e1d-4618-a886-9aa2144e2eec", "node_type": null, "metadata": {}, "hash": "4c421be8e9a7ac476eaba05252b060e2651bea91a87a477809fe3f30396371c8"}}, "hash": "fb61dd91c63d97b055d6e744d7bdf7380a5c1f53686ab694456bb0e283ea6233", "text": "force eject a cdrom)  \n      \n    \n    }\n    \n\n### `virDomainDirtyRateCalcFlags`\u00c2\u00b6\n\nFlags OR'ed together to provide specific behaviour when calculating dirty page\nrate for a Domain\n\n    \n    \n    enum virDomainDirtyRateCalcFlags {\n    \n\nVIR_DOMAIN_DIRTYRATE_MODE_PAGE_SAMPLING|  = | 0 (0x0)|\n\ndefault mode - page-sampling  \n  \n---|---|---|---  \nVIR_DOMAIN_DIRTYRATE_MODE_DIRTY_BITMAP|  = | 1 (0x1; 1 << 0)|\n\ndirty-bitmap mode  \n  \nVIR_DOMAIN_DIRTYRATE_MODE_DIRTY_RING|  = | 2 (0x2; 1 << 1)|\n\ndirty-ring mode  \n      \n    \n    }\n    \n\n### `virDomainDirtyRateStatus`\u00c2\u00b6\n\nDetails on the cause of a dirty rate calculation status.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "da8eae06-9e1d-4618-a886-9aa2144e2eec": {"__data__": {"id_": "da8eae06-9e1d-4618-a886-9aa2144e2eec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "411f3ca6-7a79-4e46-8800-67fb4d2a15e7", "node_type": null, "metadata": {}, "hash": "fb61dd91c63d97b055d6e744d7bdf7380a5c1f53686ab694456bb0e283ea6233"}, "3": {"node_id": "441215d2-a07d-4fa0-8df9-0896b2dd437f", "node_type": null, "metadata": {}, "hash": "0c8e322f7d8eccc6acd4aa19359d151782a1ea1b3570d40aaa90bf8069245e08"}}, "hash": "4c421be8e9a7ac476eaba05252b060e2651bea91a87a477809fe3f30396371c8", "text": "enum virDomainDirtyRateStatus {\n    \n\nVIR_DOMAIN_DIRTYRATE_UNSTARTED|  = | 0 (0x0)|\n\nthe dirtyrate calculation has not been started  \n  \n---|---|---|---  \nVIR_DOMAIN_DIRTYRATE_MEASURING|  = | 1 (0x1)|\n\nthe dirtyrate calculation is measuring  \n  \nVIR_DOMAIN_DIRTYRATE_MEASURED|  = | 2 (0x2)|\n\nthe dirtyrate calculation is completed  \n  \nVIR_DOMAIN_DIRTYRATE_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainDiskError`\u00c2\u00b6\n\n    \n    \n    struct virDomainDiskError {\n    \n\nchar *| disk|\n\ndisk target  \n  \n---|---|---  \nint| error|\n\n[virDomainDiskErrorCode](libvirt-libvirt-domain.html#virDomainDiskErrorCode)  \n      \n    \n    }\n    \n\n### `virDomainDiskErrorCode`\u00c2\u00b6\n\nDisk I/O error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "441215d2-a07d-4fa0-8df9-0896b2dd437f": {"__data__": {"id_": "441215d2-a07d-4fa0-8df9-0896b2dd437f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "da8eae06-9e1d-4618-a886-9aa2144e2eec", "node_type": null, "metadata": {}, "hash": "4c421be8e9a7ac476eaba05252b060e2651bea91a87a477809fe3f30396371c8"}, "3": {"node_id": "12f33dab-1902-4176-87e4-ae6686752c11", "node_type": null, "metadata": {}, "hash": "cca2d2f1bc12bda9d2f1f64b8833c98d799cec916fd01968de94ea96b84f6a35"}}, "hash": "0c8e322f7d8eccc6acd4aa19359d151782a1ea1b3570d40aaa90bf8069245e08", "text": "enum virDomainDiskErrorCode {\n    \n\nVIR_DOMAIN_DISK_ERROR_NONE|  = | 0 (0x0)|\n\nno error  \n  \n---|---|---|---  \nVIR_DOMAIN_DISK_ERROR_UNSPEC|  = | 1 (0x1)|\n\nunspecified I/O error  \n  \nVIR_DOMAIN_DISK_ERROR_NO_SPACE|  = | 2 (0x2)|\n\nno space left on the device  \n  \nVIR_DOMAIN_DISK_ERROR_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainDiskErrorPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainDiskError * virDomainDiskErrorPtr;\n\n### `virDomainEventCrashedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'crashed' lifecycle event\n\n    \n    \n    enum virDomainEventCrashedDetailType {\n    \n\nVIR_DOMAIN_EVENT_CRASHED_PANICKED|  = | 0 (0x0)|\n\nGuest was panicked  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_CRASHED_CRASHLOADED|  = | 1 (0x1)|\n\nGuest was crashloaded  \n  \nVIR_DOMAIN_EVENT_CRASHED_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainEventDefinedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'defined' lifecycle event\n\n    \n    \n    enum virDomainEventDefinedDetailType {\n    \n\nVIR_DOMAIN_EVENT_DEFINED_ADDED|  = | 0 (0x0)|\n\nNewly created config file", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "12f33dab-1902-4176-87e4-ae6686752c11": {"__data__": {"id_": "12f33dab-1902-4176-87e4-ae6686752c11", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "441215d2-a07d-4fa0-8df9-0896b2dd437f", "node_type": null, "metadata": {}, "hash": "0c8e322f7d8eccc6acd4aa19359d151782a1ea1b3570d40aaa90bf8069245e08"}, "3": {"node_id": "87cb5a15-2130-40a6-9586-d587d1f62c78", "node_type": null, "metadata": {}, "hash": "b55bb4a20a5871385d0eef699eeda43d90522c1a32f4eee9613d1f9aac59fac5"}}, "hash": "cca2d2f1bc12bda9d2f1f64b8833c98d799cec916fd01968de94ea96b84f6a35", "text": "= | 0 (0x0)|\n\nNewly created config file  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_DEFINED_UPDATED|  = | 1 (0x1)|\n\nChanged config file  \n  \nVIR_DOMAIN_EVENT_DEFINED_RENAMED|  = | 2 (0x2)|\n\nDomain was renamed  \n  \nVIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT|  = | 3 (0x3)|\n\nConfig was restored from a snapshot  \n  \nVIR_DOMAIN_EVENT_DEFINED_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsAddress`\u00c2\u00b6\n\n    \n    \n    struct virDomainEventGraphicsAddress {\n    \n\nint| family|\n\nAddress family, [virDomainEventGraphicsAddressType](libvirt-libvirt-\ndomain.html#virDomainEventGraphicsAddressType)  \n  \n---|---|---  \nchar *| node|\n\nAddress of node (eg IP address, or UNIX path)  \n  \nchar *| service|\n\nService name/number (eg TCP port, or NULL)  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsAddressPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainEventGraphicsAddress * virDomainEventGraphicsAddressPtr;\n\n### `virDomainEventGraphicsAddressType`\u00c2\u00b6\n\nThe type of address for the connection\n\n    \n    \n    enum virDomainEventGraphicsAddressType {\n    \n\nVIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4|  = | 0 (0x0)|\n\nIPv4 address  \n  \n---|---|---|---", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "87cb5a15-2130-40a6-9586-d587d1f62c78": {"__data__": {"id_": "87cb5a15-2130-40a6-9586-d587d1f62c78", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "12f33dab-1902-4176-87e4-ae6686752c11", "node_type": null, "metadata": {}, "hash": "cca2d2f1bc12bda9d2f1f64b8833c98d799cec916fd01968de94ea96b84f6a35"}, "3": {"node_id": "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1", "node_type": null, "metadata": {}, "hash": "e520afb806b371314798cb9badc0e2449e079c36175e603495461c97a91f95e2"}}, "hash": "b55bb4a20a5871385d0eef699eeda43d90522c1a32f4eee9613d1f9aac59fac5", "text": "address  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6|  = | 1 (0x1)|\n\nIPv6 address  \n  \nVIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX|  = | 2 (0x2)|\n\nUNIX socket path  \n  \nVIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsPhase`\u00c2\u00b6\n\nThe phase of the graphics client connection\n\n    \n    \n    enum virDomainEventGraphicsPhase {\n    \n\nVIR_DOMAIN_EVENT_GRAPHICS_CONNECT|  = | 0 (0x0)|\n\nInitial socket connection established  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE|  = | 1 (0x1)|\n\nAuthentication & setup completed  \n  \nVIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT|  = | 2 (0x2)|\n\nFinal socket disconnection  \n  \nVIR_DOMAIN_EVENT_GRAPHICS_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsSubject`\u00c2\u00b6\n\n    \n    \n    struct virDomainEventGraphicsSubject {\n    \n\nint| nidentity|\n\nNumber of identities in arra  \n  \n---|---|---  \n[virDomainEventGraphicsSubjectIdentityPtr](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1": {"__data__": {"id_": "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "87cb5a15-2130-40a6-9586-d587d1f62c78", "node_type": null, "metadata": {}, "hash": "b55bb4a20a5871385d0eef699eeda43d90522c1a32f4eee9613d1f9aac59fac5"}, "3": {"node_id": "10108b78-e582-44e2-984c-b13f87901acd", "node_type": null, "metadata": {}, "hash": "fdf9305e586e8440601fc21ef5800fa4b084f32d5ed6c2f10e87675657aa1c5d"}}, "hash": "e520afb806b371314798cb9badc0e2449e079c36175e603495461c97a91f95e2", "text": "html#virDomainEventGraphicsSubjectIdentityPtr)| identities|\n\nArray of identities for subject  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsSubjectIdentity`\u00c2\u00b6\n\n    \n    \n    struct virDomainEventGraphicsSubjectIdentity {\n    \n\nchar *| type|\n\nType of identity  \n  \n---|---|---  \nchar *| name|\n\nIdentity value  \n      \n    \n    }\n    \n\n### `virDomainEventGraphicsSubjectIdentityPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainEventGraphicsSubjectIdentity * virDomainEventGraphicsSubjectIdentityPtr;\n\n### `virDomainEventGraphicsSubjectPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainEventGraphicsSubject * virDomainEventGraphicsSubjectPtr;\n\n### `virDomainEventID`\u00c2\u00b6\n\nAn enumeration of supported eventId parameters for\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)(). Each event id determines\nwhich signature of callback function will be used.\n\n    \n    \n    enum virDomainEventID {\n    \n\nVIR_DOMAIN_EVENT_ID_LIFECYCLE|  = | 0 (0x0)|\n\n[virConnectDomainEventCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventCallback)  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_ID_REBOOT|  = | 1 (0x1)|\n\n[virConnectDomainEventGenericCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventGenericCallback)  \n  \nVIR_DOMAIN_EVENT_ID_RTC_CHANGE|  = | 2 (0x2)|\n\n[virConnectDomainEventRTCChangeCallback](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "10108b78-e582-44e2-984c-b13f87901acd": {"__data__": {"id_": "10108b78-e582-44e2-984c-b13f87901acd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1", "node_type": null, "metadata": {}, "hash": "e520afb806b371314798cb9badc0e2449e079c36175e603495461c97a91f95e2"}, "3": {"node_id": "0b142d71-fd14-4036-804d-6fbcc941be36", "node_type": null, "metadata": {}, "hash": "33d3ccee9660203281c07619736911b5f4a61f0795c25109032facf32ba13a53"}}, "hash": "fdf9305e586e8440601fc21ef5800fa4b084f32d5ed6c2f10e87675657aa1c5d", "text": "html#virConnectDomainEventRTCChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_WATCHDOG|  = | 3 (0x3)|\n\n[virConnectDomainEventWatchdogCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventWatchdogCallback)  \n  \nVIR_DOMAIN_EVENT_ID_IO_ERROR|  = | 4 (0x4)|\n\n[virConnectDomainEventIOErrorCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventIOErrorCallback)  \n  \nVIR_DOMAIN_EVENT_ID_GRAPHICS|  = | 5 (0x5)|\n\n[virConnectDomainEventGraphicsCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventGraphicsCallback)  \n  \nVIR_DOMAIN_EVENT_ID_IO_ERROR_REASON|  = | 6 (0x6)|\n\n[virConnectDomainEventIOErrorReasonCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventIOErrorReasonCallback)  \n  \nVIR_DOMAIN_EVENT_ID_CONTROL_ERROR|  = | 7 (0x7)|\n\n[virConnectDomainEventGenericCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventGenericCallback)  \n  \nVIR_DOMAIN_EVENT_ID_BLOCK_JOB|  = | 8 (0x8)|\n\n[virConnectDomainEventBlockJobCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventBlockJobCallback)  \n  \nVIR_DOMAIN_EVENT_ID_DISK_CHANGE|  = | 9 (0x9)|\n\n[virConnectDomainEventDiskChangeCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventDiskChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_TRAY_CHANGE|  = | 10 (0xa)|\n\n[virConnectDomainEventTrayChangeCallback](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0b142d71-fd14-4036-804d-6fbcc941be36": {"__data__": {"id_": "0b142d71-fd14-4036-804d-6fbcc941be36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "10108b78-e582-44e2-984c-b13f87901acd", "node_type": null, "metadata": {}, "hash": "fdf9305e586e8440601fc21ef5800fa4b084f32d5ed6c2f10e87675657aa1c5d"}, "3": {"node_id": "6cea54fd-6a4e-459b-b49a-f2ad5f315902", "node_type": null, "metadata": {}, "hash": "71ec7aa4a328aac42e91158d3b34bada78b1cb37df875a58d2419cc6633f0dab"}}, "hash": "33d3ccee9660203281c07619736911b5f4a61f0795c25109032facf32ba13a53", "text": "html#virConnectDomainEventTrayChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_PMWAKEUP|  = | 11 (0xb)|\n\n[virConnectDomainEventPMWakeupCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventPMWakeupCallback)  \n  \nVIR_DOMAIN_EVENT_ID_PMSUSPEND|  = | 12 (0xc)|\n\n[virConnectDomainEventPMSuspendCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventPMSuspendCallback)  \n  \nVIR_DOMAIN_EVENT_ID_BALLOON_CHANGE|  = | 13 (0xd)|\n\n[virConnectDomainEventBalloonChangeCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventBalloonChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK|  = | 14 (0xe)|\n\n[virConnectDomainEventPMSuspendDiskCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventPMSuspendDiskCallback)  \n  \nVIR_DOMAIN_EVENT_ID_DEVICE_REMOVED|  = | 15 (0xf)|\n\n[virConnectDomainEventDeviceRemovedCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventDeviceRemovedCallback)  \n  \nVIR_DOMAIN_EVENT_ID_BLOCK_JOB_2|  = | 16 (0x10)|\n\n[virConnectDomainEventBlockJobCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventBlockJobCallback)  \n  \nVIR_DOMAIN_EVENT_ID_TUNABLE|  = | 17 (0x11)|\n\n[virConnectDomainEventTunableCallback](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6cea54fd-6a4e-459b-b49a-f2ad5f315902": {"__data__": {"id_": "6cea54fd-6a4e-459b-b49a-f2ad5f315902", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0b142d71-fd14-4036-804d-6fbcc941be36", "node_type": null, "metadata": {}, "hash": "33d3ccee9660203281c07619736911b5f4a61f0795c25109032facf32ba13a53"}, "3": {"node_id": "e0afd5ab-1777-4944-be12-d86aaa4e5216", "node_type": null, "metadata": {}, "hash": "69839f8aaf571aa540bb6a77a35f2a1a92fb4e31396e88182e0a0d861ca431d1"}}, "hash": "71ec7aa4a328aac42e91158d3b34bada78b1cb37df875a58d2419cc6633f0dab", "text": "html#virConnectDomainEventTunableCallback)  \n  \nVIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE|  = | 18 (0x12)|\n\n[virConnectDomainEventAgentLifecycleCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventAgentLifecycleCallback)  \n  \nVIR_DOMAIN_EVENT_ID_DEVICE_ADDED|  = | 19 (0x13)|\n\n[virConnectDomainEventDeviceAddedCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventDeviceAddedCallback)  \n  \nVIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION|  = | 20 (0x14)|\n\n[virConnectDomainEventMigrationIterationCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventMigrationIterationCallback)  \n  \nVIR_DOMAIN_EVENT_ID_JOB_COMPLETED|  = | 21 (0x15)|\n\n[virConnectDomainEventJobCompletedCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventJobCompletedCallback)  \n  \nVIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED|  = | 22 (0x16)|\n\n[virConnectDomainEventDeviceRemovalFailedCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventDeviceRemovalFailedCallback)  \n  \nVIR_DOMAIN_EVENT_ID_METADATA_CHANGE|  = | 23 (0x17)|\n\n[virConnectDomainEventMetadataChangeCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventMetadataChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD|  = | 24 (0x18)|\n\n[virConnectDomainEventBlockThresholdCallback](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e0afd5ab-1777-4944-be12-d86aaa4e5216": {"__data__": {"id_": "e0afd5ab-1777-4944-be12-d86aaa4e5216", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6cea54fd-6a4e-459b-b49a-f2ad5f315902", "node_type": null, "metadata": {}, "hash": "71ec7aa4a328aac42e91158d3b34bada78b1cb37df875a58d2419cc6633f0dab"}, "3": {"node_id": "e9ce2189-aad2-4dea-9596-a87e58b6bd68", "node_type": null, "metadata": {}, "hash": "9536f45f5fdb646a13cbe2e4a047bece4168c2b764573551d070af19b5f12916"}}, "hash": "69839f8aaf571aa540bb6a77a35f2a1a92fb4e31396e88182e0a0d861ca431d1", "text": "html#virConnectDomainEventBlockThresholdCallback)  \n  \nVIR_DOMAIN_EVENT_ID_MEMORY_FAILURE|  = | 25 (0x19)|\n\n[virConnectDomainEventMemoryFailureCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventMemoryFailureCallback)  \n  \nVIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE|  = | 26 (0x1a)|\n\n[virConnectDomainEventMemoryDeviceSizeChangeCallback](libvirt-libvirt-\ndomain.html#virConnectDomainEventMemoryDeviceSizeChangeCallback)  \n  \nVIR_DOMAIN_EVENT_ID_LAST|  = | 27 (0x1b)|\n\nNB: this enum value will increase over time as new events are added to the\nlibvirt API. It reflects the last event ID supported by this version of the\nlibvirt API.  \n      \n    \n    }\n    \n\n### `virDomainEventIOErrorAction`\u00c2\u00b6\n\nThe action that is to be taken due to an IO error occurring\n\n    \n    \n    enum virDomainEventIOErrorAction {\n    \n\nVIR_DOMAIN_EVENT_IO_ERROR_NONE|  = | 0 (0x0)|\n\nNo action, IO error ignored  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_IO_ERROR_PAUSE|  = | 1 (0x1)|\n\nGuest CPUs are paused  \n  \nVIR_DOMAIN_EVENT_IO_ERROR_REPORT|  = | 2 (0x2)|\n\nIO error reported to guest OS  \n  \nVIR_DOMAIN_EVENT_IO_ERROR_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainEventPMSuspendedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'pmsuspended' lifecycle event", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9ce2189-aad2-4dea-9596-a87e58b6bd68": {"__data__": {"id_": "e9ce2189-aad2-4dea-9596-a87e58b6bd68", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e0afd5ab-1777-4944-be12-d86aaa4e5216", "node_type": null, "metadata": {}, "hash": "69839f8aaf571aa540bb6a77a35f2a1a92fb4e31396e88182e0a0d861ca431d1"}, "3": {"node_id": "378a319d-ba7f-43d5-9503-d29450d3cb90", "node_type": null, "metadata": {}, "hash": "e222a41aaac7d0aef72a6423019a7d0c9784a2ad9429e95905cfdc565249a472"}}, "hash": "9536f45f5fdb646a13cbe2e4a047bece4168c2b764573551d070af19b5f12916", "text": "on the cause of a 'pmsuspended' lifecycle event\n\n    \n    \n    enum virDomainEventPMSuspendedDetailType {\n    \n\nVIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY|  = | 0 (0x0)|\n\nGuest was PM suspended to memory  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_PMSUSPENDED_DISK|  = | 1 (0x1)|\n\nGuest was PM suspended to disk  \n  \nVIR_DOMAIN_EVENT_PMSUSPENDED_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainEventResumedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'resumed' lifecycle event\n\n    \n    \n    enum virDomainEventResumedDetailType {\n    \n\nVIR_DOMAIN_EVENT_RESUMED_UNPAUSED|  = | 0 (0x0)|\n\nNormal resume due to admin unpause  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_RESUMED_MIGRATED|  = | 1 (0x1)|\n\nResumed for completion of migration  \n  \nVIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT|  = | 2 (0x2)|\n\nResumed from snapshot  \n  \nVIR_DOMAIN_EVENT_RESUMED_POSTCOPY|  = | 3 (0x3)|\n\nResumed, but migration is still running in post-copy mode  \n  \nVIR_DOMAIN_EVENT_RESUMED_POSTCOPY_FAILED|  = | 4 (0x4)|\n\nRunning,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "378a319d-ba7f-43d5-9503-d29450d3cb90": {"__data__": {"id_": "378a319d-ba7f-43d5-9503-d29450d3cb90", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e9ce2189-aad2-4dea-9596-a87e58b6bd68", "node_type": null, "metadata": {}, "hash": "9536f45f5fdb646a13cbe2e4a047bece4168c2b764573551d070af19b5f12916"}, "3": {"node_id": "df20575c-e277-40a4-90d7-d3ae8fb6075d", "node_type": null, "metadata": {}, "hash": "73cbfa07a300a8033f4b6f6502dcb5d7c822f78bdfd3aa79a5e5576342a0c61e"}}, "hash": "e222a41aaac7d0aef72a6423019a7d0c9784a2ad9429e95905cfdc565249a472", "text": "but migration failed in post-copy  \n  \nVIR_DOMAIN_EVENT_RESUMED_LAST|  = | 5 (0x5)  \n      \n    \n    }\n    \n\n### `virDomainEventShutdownDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'shutdown' lifecycle event\n\n    \n    \n    enum virDomainEventShutdownDetailType {\n    \n\nVIR_DOMAIN_EVENT_SHUTDOWN_FINISHED|  = | 0 (0x0)|\n\nGuest finished shutdown sequence  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_SHUTDOWN_GUEST|  = | 1 (0x1)|\n\nDomain finished shutting down after request from the guest itself (e.g.\nhardware-specific action)  \n  \nVIR_DOMAIN_EVENT_SHUTDOWN_HOST|  = | 2 (0x2)|\n\nDomain finished shutting down after request from the host (e.g. killed by a\nsignal)  \n  \nVIR_DOMAIN_EVENT_SHUTDOWN_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainEventStartedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'started' lifecycle event\n\n    \n    \n    enum virDomainEventStartedDetailType {\n    \n\nVIR_DOMAIN_EVENT_STARTED_BOOTED|  = | 0 (0x0)|\n\nNormal startup from boot  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_STARTED_MIGRATED|  = | 1 (0x1)|\n\nIncoming migration from another host  \n  \nVIR_DOMAIN_EVENT_STARTED_RESTORED|  = | 2 (0x2)|\n\nRestored from a state", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df20575c-e277-40a4-90d7-d3ae8fb6075d": {"__data__": {"id_": "df20575c-e277-40a4-90d7-d3ae8fb6075d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "378a319d-ba7f-43d5-9503-d29450d3cb90", "node_type": null, "metadata": {}, "hash": "e222a41aaac7d0aef72a6423019a7d0c9784a2ad9429e95905cfdc565249a472"}, "3": {"node_id": "6dec25bd-1ad1-41fc-968c-52f3321127df", "node_type": null, "metadata": {}, "hash": "26e595c40e71f5bf62626f9a1f5a36399d9e8a6d9d12564e2035d64b0ba2b056"}}, "hash": "73cbfa07a300a8033f4b6f6502dcb5d7c822f78bdfd3aa79a5e5576342a0c61e", "text": "= | 2 (0x2)|\n\nRestored from a state file  \n  \nVIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT|  = | 3 (0x3)|\n\nRestored from snapshot  \n  \nVIR_DOMAIN_EVENT_STARTED_WAKEUP|  = | 4 (0x4)|\n\nStarted due to wakeup event  \n  \nVIR_DOMAIN_EVENT_STARTED_LAST|  = | 5 (0x5)  \n      \n    \n    }\n    \n\n### `virDomainEventStoppedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'stopped' lifecycle event\n\n    \n    \n    enum virDomainEventStoppedDetailType {\n    \n\nVIR_DOMAIN_EVENT_STOPPED_SHUTDOWN|  = | 0 (0x0)|\n\nNormal shutdown  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_STOPPED_DESTROYED|  = | 1 (0x1)|\n\nForced poweroff from host  \n  \nVIR_DOMAIN_EVENT_STOPPED_CRASHED|  = | 2 (0x2)|\n\nGuest crashed  \n  \nVIR_DOMAIN_EVENT_STOPPED_MIGRATED|  = | 3 (0x3)|\n\nMigrated off to another host  \n  \nVIR_DOMAIN_EVENT_STOPPED_SAVED|  = | 4 (0x4)|\n\nSaved to a state file  \n  \nVIR_DOMAIN_EVENT_STOPPED_FAILED|  = | 5 (0x5)|\n\nHost emulator/mgmt failed  \n  \nVIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT|  = | 6 (0x6)|\n\noffline snapshot loaded", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6dec25bd-1ad1-41fc-968c-52f3321127df": {"__data__": {"id_": "6dec25bd-1ad1-41fc-968c-52f3321127df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "df20575c-e277-40a4-90d7-d3ae8fb6075d", "node_type": null, "metadata": {}, "hash": "73cbfa07a300a8033f4b6f6502dcb5d7c822f78bdfd3aa79a5e5576342a0c61e"}, "3": {"node_id": "0ec84e7e-7a55-4f66-9018-29772647fe6c", "node_type": null, "metadata": {}, "hash": "ff2c1c147b11ec5e83b20d4cd770a7432d19244046b1b40bf29709084dba97e6"}}, "hash": "26e595c40e71f5bf62626f9a1f5a36399d9e8a6d9d12564e2035d64b0ba2b056", "text": "= | 6 (0x6)|\n\noffline snapshot loaded  \n  \nVIR_DOMAIN_EVENT_STOPPED_LAST|  = | 7 (0x7)  \n      \n    \n    }\n    \n\n### `virDomainEventSuspendedDetailType`\u00c2\u00b6\n\nDetails on the cause of a 'suspended' lifecycle event\n\n    \n    \n    enum virDomainEventSuspendedDetailType {\n    \n\nVIR_DOMAIN_EVENT_SUSPENDED_PAUSED|  = | 0 (0x0)|\n\nNormal suspend due to admin pause  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_SUSPENDED_MIGRATED|  = | 1 (0x1)|\n\nSuspended for offline migration  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_IOERROR|  = | 2 (0x2)|\n\nSuspended due to a disk I/O error  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG|  = | 3 (0x3)|\n\nSuspended due to a watchdog firing  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_RESTORED|  = | 4 (0x4)|\n\nRestored from paused state file  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT|  = | 5 (0x5)|\n\nRestored from paused snapshot  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_API_ERROR|  = | 6 (0x6)|\n\nSome APIs (e.g. migration, snapshot) internally need to suspend a domain.\nThis event detail is used when resume operation at the end of such API fails.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ec84e7e-7a55-4f66-9018-29772647fe6c": {"__data__": {"id_": "0ec84e7e-7a55-4f66-9018-29772647fe6c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6dec25bd-1ad1-41fc-968c-52f3321127df", "node_type": null, "metadata": {}, "hash": "26e595c40e71f5bf62626f9a1f5a36399d9e8a6d9d12564e2035d64b0ba2b056"}, "3": {"node_id": "8ca52a58-d585-4b5e-ae59-9db6cf14b295", "node_type": null, "metadata": {}, "hash": "4ab8ec5ce3e7bd039c4036f63bb287733c4c307142f4ccc30c91711b526e513d"}}, "hash": "ff2c1c147b11ec5e83b20d4cd770a7432d19244046b1b40bf29709084dba97e6", "text": "VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY|  = | 7 (0x7)|\n\nsuspended for post-copy migration  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED|  = | 8 (0x8)|\n\nsuspended after failed post-copy  \n  \nVIR_DOMAIN_EVENT_SUSPENDED_LAST|  = | 9 (0x9)  \n      \n    \n    }\n    \n\n### `virDomainEventTrayChangeReason`\u00c2\u00b6\n\nThe reason describing why the callback was called\n\n    \n    \n    enum virDomainEventTrayChangeReason {\n    \n\nVIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE|  = | 1 (0x1)  \nVIR_DOMAIN_EVENT_TRAY_CHANGE_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainEventType`\u00c2\u00b6\n\na [virDomainEventType](libvirt-libvirt-domain.html#virDomainEventType) is\nemitted during domain lifecycle events\n\n    \n    \n    enum virDomainEventType {\n    \n\nVIR_DOMAIN_EVENT_DEFINED|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_EVENT_UNDEFINED|  = | 1 (0x1)  \nVIR_DOMAIN_EVENT_STARTED|  = | 2 (0x2)  \nVIR_DOMAIN_EVENT_SUSPENDED|  = | 3 (0x3)  \nVIR_DOMAIN_EVENT_RESUMED|  = | 4", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8ca52a58-d585-4b5e-ae59-9db6cf14b295": {"__data__": {"id_": "8ca52a58-d585-4b5e-ae59-9db6cf14b295", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0ec84e7e-7a55-4f66-9018-29772647fe6c", "node_type": null, "metadata": {}, "hash": "ff2c1c147b11ec5e83b20d4cd770a7432d19244046b1b40bf29709084dba97e6"}, "3": {"node_id": "ac811536-847a-47ca-8f3e-a2e87f4023e9", "node_type": null, "metadata": {}, "hash": "a4fd4990ebbd7b44fc182bf74b1c9f32c06f691bb8357514d2c9222605c44058"}}, "hash": "4ab8ec5ce3e7bd039c4036f63bb287733c4c307142f4ccc30c91711b526e513d", "text": "VIR_DOMAIN_EVENT_RESUMED|  = | 4 (0x4)  \nVIR_DOMAIN_EVENT_STOPPED|  = | 5 (0x5)  \nVIR_DOMAIN_EVENT_SHUTDOWN|  = | 6 (0x6)  \nVIR_DOMAIN_EVENT_PMSUSPENDED|  = | 7 (0x7)  \nVIR_DOMAIN_EVENT_CRASHED|  = | 8 (0x8)  \nVIR_DOMAIN_EVENT_LAST|  = | 9 (0x9)  \n      \n    \n    }\n    \n\n### `virDomainEventUndefinedDetailType`\u00c2\u00b6\n\nDetails on the cause of an 'undefined' lifecycle event\n\n    \n    \n    enum virDomainEventUndefinedDetailType {\n    \n\nVIR_DOMAIN_EVENT_UNDEFINED_REMOVED|  = | 0 (0x0)|\n\nDeleted the config file  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_UNDEFINED_RENAMED|  = | 1 (0x1)|\n\nDomain was renamed  \n  \nVIR_DOMAIN_EVENT_UNDEFINED_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainEventWatchdogAction`\u00c2\u00b6\n\nThe action that is to be taken due to the watchdog device firing\n\n    \n    \n    enum virDomainEventWatchdogAction {\n    \n\nVIR_DOMAIN_EVENT_WATCHDOG_NONE|  = | 0 (0x0)|\n\nNo action,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ac811536-847a-47ca-8f3e-a2e87f4023e9": {"__data__": {"id_": "ac811536-847a-47ca-8f3e-a2e87f4023e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8ca52a58-d585-4b5e-ae59-9db6cf14b295", "node_type": null, "metadata": {}, "hash": "4ab8ec5ce3e7bd039c4036f63bb287733c4c307142f4ccc30c91711b526e513d"}, "3": {"node_id": "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc", "node_type": null, "metadata": {}, "hash": "45c83e784ba510b4daa224954e910c1fa602cedbc8b2ff4000759da1ef57599d"}}, "hash": "a4fd4990ebbd7b44fc182bf74b1c9f32c06f691bb8357514d2c9222605c44058", "text": "= | 0 (0x0)|\n\nNo action, watchdog ignored  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_WATCHDOG_PAUSE|  = | 1 (0x1)|\n\nGuest CPUs are paused  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_RESET|  = | 2 (0x2)|\n\nGuest CPUs are reset  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_POWEROFF|  = | 3 (0x3)|\n\nGuest is forcibly powered off  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN|  = | 4 (0x4)|\n\nGuest is requested to gracefully shutdown  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_DEBUG|  = | 5 (0x5)|\n\nNo action, a debug message logged  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI|  = | 6 (0x6)|\n\nInject a non-maskable interrupt into guest  \n  \nVIR_DOMAIN_EVENT_WATCHDOG_LAST|  = | 7 (0x7)  \n      \n    \n    }\n    \n\n### `virDomainFDAssociateFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainFDAssociateFlags {\n    \n\nVIR_DOMAIN_FD_ASSOCIATE_SECLABEL_RESTORE|  = | 1 (0x1; 1 << 0)|\n\nAttempt a best-effort restore of security labels after use  \n  \n---|---|---|---  \nVIR_DOMAIN_FD_ASSOCIATE_SECLABEL_WRITABLE|  = | 2 (0x2;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc": {"__data__": {"id_": "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ac811536-847a-47ca-8f3e-a2e87f4023e9", "node_type": null, "metadata": {}, "hash": "a4fd4990ebbd7b44fc182bf74b1c9f32c06f691bb8357514d2c9222605c44058"}, "3": {"node_id": "aa3d4e47-9065-4679-aee1-3c2df7f6d712", "node_type": null, "metadata": {}, "hash": "5e1af9a572460cd8120877f6bdb13826e8c550e6bd9af2ad606126a37c11cf05"}}, "hash": "45c83e784ba510b4daa224954e910c1fa602cedbc8b2ff4000759da1ef57599d", "text": "1 << 1)|\n\nUse a seclabel allowing writes for the FD even if usage implies read-only mode  \n      \n    \n    }\n    \n\n### `virDomainFSInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainFSInfo {\n    \n\nchar *| mountpoint|\n\npath to mount point  \n  \n---|---|---  \nchar *| name|\n\ndevice name in the guest (e.g. \"sda1\")  \n  \nchar *| fstype|\n\nfilesystem type  \n  \nsize_t| ndevAlias|\n\nnumber of elements in devAlias  \n  \nchar **| devAlias|\n\narray of disk device aliases  \n      \n    \n    }\n    \n\n### `virDomainFSInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainFSInfo * virDomainFSInfoPtr;\n\n### `virDomainGetHostnameFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainGetHostnameFlags {\n    \n\nVIR_DOMAIN_GET_HOSTNAME_LEASE|  = | 1 (0x1; 1 << 0)|\n\nParse DHCP lease file  \n  \n---|---|---|---  \nVIR_DOMAIN_GET_HOSTNAME_AGENT|  = | 2 (0x2; 1 << 1)|\n\nQuery qemu guest agent  \n      \n    \n    }\n    \n\n### `virDomainGetJobStatsFlags`\u00c2\u00b6\n\nFlags OR'ed together to provide specific behavior when querying domain job\nstatistics.\n\n    \n    \n    enum virDomainGetJobStatsFlags {\n    \n\nVIR_DOMAIN_JOB_STATS_COMPLETED|  = | 1 (0x1;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa3d4e47-9065-4679-aee1-3c2df7f6d712": {"__data__": {"id_": "aa3d4e47-9065-4679-aee1-3c2df7f6d712", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc", "node_type": null, "metadata": {}, "hash": "45c83e784ba510b4daa224954e910c1fa602cedbc8b2ff4000759da1ef57599d"}, "3": {"node_id": "dcf71aa7-a722-4f6e-a81b-aabf2667dc51", "node_type": null, "metadata": {}, "hash": "d8485fc20c9957d30d75c11ef097f3e7dd84db440d2bc74e1972c900c0d0a2b3"}}, "hash": "5e1af9a572460cd8120877f6bdb13826e8c550e6bd9af2ad606126a37c11cf05", "text": "1 << 0)|\n\nreturn stats of a recently completed job  \n  \n---|---|---|---  \nVIR_DOMAIN_JOB_STATS_KEEP_COMPLETED|  = | 2 (0x2; 1 << 1)|\n\ndon't remove completed stats when reading them  \n      \n    \n    }\n    \n\n### `virDomainGuestInfoTypes`\u00c2\u00b6\n\n    \n    \n    enum virDomainGuestInfoTypes {\n    \n\nVIR_DOMAIN_GUEST_INFO_USERS|  = | 1 (0x1; 1 << 0)|\n\nreturn active users  \n  \n---|---|---|---  \nVIR_DOMAIN_GUEST_INFO_OS|  = | 2 (0x2; 1 << 1)|\n\nreturn OS information  \n  \nVIR_DOMAIN_GUEST_INFO_TIMEZONE|  = | 4 (0x4; 1 << 2)|\n\nreturn timezone information  \n  \nVIR_DOMAIN_GUEST_INFO_HOSTNAME|  = | 8 (0x8; 1 << 3)|\n\nreturn hostname information  \n  \nVIR_DOMAIN_GUEST_INFO_FILESYSTEM|  = | 16 (0x10; 1 << 4)|\n\nreturn filesystem information  \n  \nVIR_DOMAIN_GUEST_INFO_DISKS|  = | 32 (0x20; 1 << 5)|\n\nreturn disks information  \n  \nVIR_DOMAIN_GUEST_INFO_INTERFACES|  = | 64 (0x40;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dcf71aa7-a722-4f6e-a81b-aabf2667dc51": {"__data__": {"id_": "dcf71aa7-a722-4f6e-a81b-aabf2667dc51", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "aa3d4e47-9065-4679-aee1-3c2df7f6d712", "node_type": null, "metadata": {}, "hash": "5e1af9a572460cd8120877f6bdb13826e8c550e6bd9af2ad606126a37c11cf05"}, "3": {"node_id": "4d63f075-23b5-4c19-8624-c9295d31b087", "node_type": null, "metadata": {}, "hash": "57520e967ab648c991c925fc28df98166b0ae49146a529a79c595a4297a55659"}}, "hash": "d8485fc20c9957d30d75c11ef097f3e7dd84db440d2bc74e1972c900c0d0a2b3", "text": "1 << 6)|\n\nreturn interfaces information  \n      \n    \n    }\n    \n\n### `virDomainIOThreadInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainIOThreadInfo {\n    \n\nunsigned int| iothread_id|\n\nIOThread ID  \n  \n---|---|---  \nunsigned char *| cpumap|\n\nCPU map for thread. A pointer to an array of real CPUs (in 8-bit bytes)  \n  \nint| cpumaplen|\n\ncpumap size  \n      \n    \n    }\n    \n\n### `virDomainIOThreadInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainIOThreadInfo * virDomainIOThreadInfoPtr;\n\n### `virDomainIPAddress`\u00c2\u00b6\n\n    \n    \n    struct virDomainIPAddress {\n    \n\nint| type|\n\n[virIPAddrType](libvirt-libvirt-network.html#virIPAddrType)  \n  \n---|---|---  \nchar *| addr|\n\nIP address  \n  \nunsigned int| prefix|\n\nIP address prefix  \n      \n    \n    }\n    \n\n### `virDomainIPAddressPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainIPAddress * virDomainIPAddressPtr;\n\n### `virDomainInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainInfo {\n    \n\nunsigned char| state|\n\nthe running state, one of [virDomainState](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4d63f075-23b5-4c19-8624-c9295d31b087": {"__data__": {"id_": "4d63f075-23b5-4c19-8624-c9295d31b087", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "dcf71aa7-a722-4f6e-a81b-aabf2667dc51", "node_type": null, "metadata": {}, "hash": "d8485fc20c9957d30d75c11ef097f3e7dd84db440d2bc74e1972c900c0d0a2b3"}, "3": {"node_id": "48367264-0545-48a2-a564-df66fa906d31", "node_type": null, "metadata": {}, "hash": "dc1371435495769faa196f4a6f5b3b992a60b1fea4aad54d738ef8d7c6f226ea"}}, "hash": "57520e967ab648c991c925fc28df98166b0ae49146a529a79c595a4297a55659", "text": "one of [virDomainState](libvirt-libvirt-\ndomain.html#virDomainState)  \n  \n---|---|---  \nunsigned long| maxMem|\n\nthe maximum memory in KBytes allowed  \n  \nunsigned long| memory|\n\nthe memory in KBytes used by the domain  \n  \nunsigned short| nrVirtCpu|\n\nthe number of virtual CPUs for the domain  \n  \nunsigned long long| cpuTime|\n\nthe CPU time used in nanoseconds  \n      \n    \n    }\n    \n\n### `virDomainInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainInfo * virDomainInfoPtr;\n\na [virDomainInfoPtr](libvirt-libvirt-domain.html#virDomainInfoPtr) is a\npointer to a [virDomainInfo](libvirt-libvirt-domain.html#virDomainInfo)\nstructure.\n\n### `virDomainInterface`\u00c2\u00b6\n\n    \n    \n    struct virDomainInterface {\n    \n\nchar *| name|\n\ninterface name  \n  \n---|---|---  \nchar *| hwaddr|\n\nhardware address, may be NULL  \n  \nunsigned int| naddrs|\n\nnumber of items in `addrs`  \n  \n[virDomainIPAddressPtr](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48367264-0545-48a2-a564-df66fa906d31": {"__data__": {"id_": "48367264-0545-48a2-a564-df66fa906d31", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4d63f075-23b5-4c19-8624-c9295d31b087", "node_type": null, "metadata": {}, "hash": "57520e967ab648c991c925fc28df98166b0ae49146a529a79c595a4297a55659"}, "3": {"node_id": "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d", "node_type": null, "metadata": {}, "hash": "c17e6b9b800250c68867a103815a6acdd41c6ff902af7cf9f96882ce70aca047"}}, "hash": "dc1371435495769faa196f4a6f5b3b992a60b1fea4aad54d738ef8d7c6f226ea", "text": "html#virDomainIPAddressPtr)|\naddrs|\n\narray of IP addresses  \n      \n    \n    }\n    \n\n### `virDomainInterfaceAddressesSource`\u00c2\u00b6\n\n    \n    \n    enum virDomainInterfaceAddressesSource {\n    \n\nVIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE|  = | 0 (0x0)|\n\nParse DHCP lease file  \n  \n---|---|---|---  \nVIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT|  = | 1 (0x1)|\n\nQuery qemu guest agent  \n  \nVIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP|  = | 2 (0x2)|\n\nQuery ARP tables  \n  \nVIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainInterfacePtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainInterface * virDomainInterfacePtr;\n\n### `virDomainInterfaceStatsPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainInterfaceStatsStruct * virDomainInterfaceStatsPtr;\n\nA pointer to a [virDomainInterfaceStats](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d": {"__data__": {"id_": "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "48367264-0545-48a2-a564-df66fa906d31", "node_type": null, "metadata": {}, "hash": "dc1371435495769faa196f4a6f5b3b992a60b1fea4aad54d738ef8d7c6f226ea"}, "3": {"node_id": "9046addb-aeca-420a-a03c-08ca61c5c6f6", "node_type": null, "metadata": {}, "hash": "2e1105a76e2400949eb3b6c54b73562ae4cc051bd1a993d7be32d35e2dc773bd"}}, "hash": "c17e6b9b800250c68867a103815a6acdd41c6ff902af7cf9f96882ce70aca047", "text": "html#virDomainInterfaceStats) structure\n\n### `virDomainInterfaceStatsStruct`\u00c2\u00b6\n\n    \n    \n    struct virDomainInterfaceStatsStruct {\n    \n\nlong long| rx_bytes  \n---|---  \nlong long| rx_packets  \nlong long| rx_errs  \nlong long| rx_drop  \nlong long| tx_bytes  \nlong long| tx_packets  \nlong long| tx_errs  \nlong long| tx_drop  \n      \n    \n    }\n    \n\n### `virDomainJobInfo`\u00c2\u00b6\n\n    \n    \n    struct virDomainJobInfo {\n    \n\nint| type|\n\nTime is measured in milliseconds  \n  \n---|---|---  \nunsigned long long| timeElapsed|\n\nAlways set  \n  \nunsigned long long| timeRemaining|\n\nOnly for [VIR_DOMAIN_JOB_BOUNDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_BOUNDED) Data is measured in bytes unless otherwise\nspecified and is measuring the job as a whole. For\n[VIR_DOMAIN_JOB_UNBOUNDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_UNBOUNDED), dataTotal may be less than the final\nsum of dataProcessed + dataRemaining in the event that the hypervisor has to\nrepeat some data, such as due to dirtied pages during migration. For\n[VIR_DOMAIN_JOB_BOUNDED](libvirt-libvirt-domain.html#VIR_DOMAIN_JOB_BOUNDED),\ndataTotal shall always equal the sum of dataProcessed + dataRemaining.  \n  \nunsigned long long| dataTotal  \nunsigned long long| dataProcessed  \nunsigned long long| dataRemaining|\n\nAs above,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9046addb-aeca-420a-a03c-08ca61c5c6f6": {"__data__": {"id_": "9046addb-aeca-420a-a03c-08ca61c5c6f6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d", "node_type": null, "metadata": {}, "hash": "c17e6b9b800250c68867a103815a6acdd41c6ff902af7cf9f96882ce70aca047"}, "3": {"node_id": "98917491-b8c4-4068-b451-5b3edadcdf80", "node_type": null, "metadata": {}, "hash": "0c97df96a81d1c1e37e234fdc73d73123f299b2b892b511916a230fa4042ac6b"}}, "hash": "2e1105a76e2400949eb3b6c54b73562ae4cc051bd1a993d7be32d35e2dc773bd", "text": "but only tracking guest memory progress  \n  \nunsigned long long| memTotal  \nunsigned long long| memProcessed  \nunsigned long long| memRemaining|\n\nAs above, but only tracking guest disk file progress  \n  \nunsigned long long| fileTotal  \nunsigned long long| fileProcessed  \nunsigned long long| fileRemaining  \n      \n    \n    }\n    \n\n### `virDomainJobInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainJobInfo * virDomainJobInfoPtr;\n\n### `virDomainJobOperation`\u00c2\u00b6\n\n    \n    \n    enum virDomainJobOperation {\n    \n\nVIR_DOMAIN_JOB_OPERATION_UNKNOWN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_JOB_OPERATION_START|  = | 1 (0x1)  \nVIR_DOMAIN_JOB_OPERATION_SAVE|  = | 2 (0x2)  \nVIR_DOMAIN_JOB_OPERATION_RESTORE|  = | 3 (0x3)  \nVIR_DOMAIN_JOB_OPERATION_MIGRATION_IN|  = | 4 (0x4)  \nVIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT|  = | 5 (0x5)  \nVIR_DOMAIN_JOB_OPERATION_SNAPSHOT|  = | 6 (0x6)  \nVIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT|  = | 7 (0x7)  \nVIR_DOMAIN_JOB_OPERATION_DUMP|  = | 8 (0x8)  \nVIR_DOMAIN_JOB_OPERATION_BACKUP|  = | 9 (0x9)  \nVIR_DOMAIN_JOB_OPERATION_SNAPSHOT_DELETE|  = | 10 (0xa)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "98917491-b8c4-4068-b451-5b3edadcdf80": {"__data__": {"id_": "98917491-b8c4-4068-b451-5b3edadcdf80", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9046addb-aeca-420a-a03c-08ca61c5c6f6", "node_type": null, "metadata": {}, "hash": "2e1105a76e2400949eb3b6c54b73562ae4cc051bd1a993d7be32d35e2dc773bd"}, "3": {"node_id": "d066e457-2cdb-4036-965e-623ad8292e36", "node_type": null, "metadata": {}, "hash": "3c0ca11756bbbc9935a029b8f17ff4475b7944eeebfbdfd576040232c9675a12"}}, "hash": "0c97df96a81d1c1e37e234fdc73d73123f299b2b892b511916a230fa4042ac6b", "text": "= | 10 (0xa)  \nVIR_DOMAIN_JOB_OPERATION_LAST|  = | 11 (0xb)  \n      \n    \n    }\n    \n\n### `virDomainJobType`\u00c2\u00b6\n\n    \n    \n    enum virDomainJobType {\n    \n\nVIR_DOMAIN_JOB_NONE|  = | 0 (0x0)|\n\nNo job is active  \n  \n---|---|---|---  \nVIR_DOMAIN_JOB_BOUNDED|  = | 1 (0x1)|\n\nJob with a finite completion time  \n  \nVIR_DOMAIN_JOB_UNBOUNDED|  = | 2 (0x2)|\n\nJob without a finite completion time  \n  \nVIR_DOMAIN_JOB_COMPLETED|  = | 3 (0x3)|\n\nJob has finished, but isn't cleaned up  \n  \nVIR_DOMAIN_JOB_FAILED|  = | 4 (0x4)|\n\nJob hit error, but isn't cleaned up  \n  \nVIR_DOMAIN_JOB_CANCELLED|  = | 5 (0x5)|\n\nJob was aborted, but isn't cleaned up  \n  \nVIR_DOMAIN_JOB_LAST|  = | 6 (0x6)  \n      \n    \n    }\n    \n\n### `virDomainLifecycle`\u00c2\u00b6\n\n    \n    \n    enum virDomainLifecycle {\n    \n\nVIR_DOMAIN_LIFECYCLE_POWEROFF|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_LIFECYCLE_REBOOT|  = | 1 (0x1)  \nVIR_DOMAIN_LIFECYCLE_CRASH|  = | 2 (0x2)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d066e457-2cdb-4036-965e-623ad8292e36": {"__data__": {"id_": "d066e457-2cdb-4036-965e-623ad8292e36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "98917491-b8c4-4068-b451-5b3edadcdf80", "node_type": null, "metadata": {}, "hash": "0c97df96a81d1c1e37e234fdc73d73123f299b2b892b511916a230fa4042ac6b"}, "3": {"node_id": "a2c17af1-c3c1-40b3-845e-86b0d8136208", "node_type": null, "metadata": {}, "hash": "161366db92b06d2f12b2f48c0b2e5205753c537da200cf2835ff45a0c3ffa217"}}, "hash": "3c0ca11756bbbc9935a029b8f17ff4475b7944eeebfbdfd576040232c9675a12", "text": "= | 2 (0x2)  \nVIR_DOMAIN_LIFECYCLE_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainLifecycleAction`\u00c2\u00b6\n\n    \n    \n    enum virDomainLifecycleAction {\n    \n\nVIR_DOMAIN_LIFECYCLE_ACTION_DESTROY|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_LIFECYCLE_ACTION_RESTART|  = | 1 (0x1)  \nVIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME|  = | 2 (0x2)  \nVIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE|  = | 3 (0x3)  \nVIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY|  = | 4 (0x4)  \nVIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART|  = | 5 (0x5)  \nVIR_DOMAIN_LIFECYCLE_ACTION_LAST|  = | 6 (0x6)  \n      \n    \n    }\n    \n\n### `virDomainMemoryFailureActionType`\u00c2\u00b6\n\nAction of a memory failure event.\n\n    \n    \n    enum virDomainMemoryFailureActionType {\n    \n\nVIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_IGNORE|  = | 0 (0x0)|\n\nthe memory failure could be ignored. This will only be the case for action-\noptional failures.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a2c17af1-c3c1-40b3-845e-86b0d8136208": {"__data__": {"id_": "a2c17af1-c3c1-40b3-845e-86b0d8136208", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d066e457-2cdb-4036-965e-623ad8292e36", "node_type": null, "metadata": {}, "hash": "3c0ca11756bbbc9935a029b8f17ff4475b7944eeebfbdfd576040232c9675a12"}, "3": {"node_id": "6d8ec35b-bda4-4e5d-a785-aa106add4038", "node_type": null, "metadata": {}, "hash": "ae7346ea1fad60add87b5aee3a2d4db0ce305081b7acc23ee6ea1095acc2e899"}}, "hash": "161366db92b06d2f12b2f48c0b2e5205753c537da200cf2835ff45a0c3ffa217", "text": "This will only be the case for action-\noptional failures.  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_INJECT|  = | 1 (0x1)|\n\nmemory failure occurred in guest memory, the guest enabled MCE handling\nmechanism, and hypervisor could inject the MCE into the guest successfully.  \n  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_FATAL|  = | 2 (0x2)|\n\nthe failure is unrecoverable. This occurs for action-required failures if the\nrecipient is the hypervisor; hypervisor will exit.  \n  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_RESET|  = | 3 (0x3)|\n\nthe failure is unrecoverable but confined to the guest. This occurs if the\nrecipient is a guest which is not ready to handle memory failures.  \n  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_LAST|  = | 4 (0x4)  \n      \n    \n    }\n    \n\n### `virDomainMemoryFailureFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainMemoryFailureFlags {\n    \n\nVIR_DOMAIN_MEMORY_FAILURE_ACTION_REQUIRED|  = | 1 (0x1; 1 << 0)|\n\nwhether a memory failure event is action-required or action-optional (e.g. a\nfailure during memory scrub).  \n  \n---|---|---|---  \nVIR_DOMAIN_MEMORY_FAILURE_RECURSIVE|  = | 2 (0x2; 1 << 1)|\n\nwhether the failure occurred while the previous failure was still in progress.  \n      \n    \n    }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6d8ec35b-bda4-4e5d-a785-aa106add4038": {"__data__": {"id_": "6d8ec35b-bda4-4e5d-a785-aa106add4038", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a2c17af1-c3c1-40b3-845e-86b0d8136208", "node_type": null, "metadata": {}, "hash": "161366db92b06d2f12b2f48c0b2e5205753c537da200cf2835ff45a0c3ffa217"}, "3": {"node_id": "e495132c-128a-4b85-95c5-258dc725ae85", "node_type": null, "metadata": {}, "hash": "0a933e11035cf92e91bcf5d552ab077e55a57767548280f1d6d0e80e70dac6e9"}}, "hash": "ae7346ea1fad60add87b5aee3a2d4db0ce305081b7acc23ee6ea1095acc2e899", "text": "### `virDomainMemoryFailureRecipientType`\u00c2\u00b6\n\nRecipient of a memory failure event.\n\n    \n    \n    enum virDomainMemoryFailureRecipientType {\n    \n\nVIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_HYPERVISOR|  = | 0 (0x0)|\n\nmemory failure at hypersivor memory address space  \n  \n---|---|---|---  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_GUEST|  = | 1 (0x1)|\n\nmemory failure at guest memory address space  \n  \nVIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_LAST|  = | 2 (0x2)  \n      \n    \n    }\n    \n\n### `virDomainMemoryFlags`\u00c2\u00b6\n\nMemory peeking flags.\n\n    \n    \n    enum virDomainMemoryFlags {\n    \n\nVIR_MEMORY_VIRTUAL|  = | 1 (0x1; 1 << 0)|\n\naddresses are virtual addresses  \n  \n---|---|---|---  \nVIR_MEMORY_PHYSICAL|  = | 2 (0x2; 1 << 1)|\n\naddresses are physical addresses  \n      \n    \n    }\n    \n\n### `virDomainMemoryModFlags`\u00c2\u00b6\n\nMemory size modification flags.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e495132c-128a-4b85-95c5-258dc725ae85": {"__data__": {"id_": "e495132c-128a-4b85-95c5-258dc725ae85", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6d8ec35b-bda4-4e5d-a785-aa106add4038", "node_type": null, "metadata": {}, "hash": "ae7346ea1fad60add87b5aee3a2d4db0ce305081b7acc23ee6ea1095acc2e899"}, "3": {"node_id": "0ffd68dd-4f6c-4c71-a965-124a9381b7c8", "node_type": null, "metadata": {}, "hash": "97567a61a64e1fce1d888d84b56d7fb98755b5f9ec0dffda73efcd95341a89b3"}}, "hash": "0a933e11035cf92e91bcf5d552ab077e55a57767548280f1d6d0e80e70dac6e9", "text": "enum virDomainMemoryModFlags {\n    \n\nVIR_DOMAIN_MEM_CONFIG|  = | VIR_DOMAIN_AFFECT_CONFIG|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \n---|---|---|---  \nVIR_DOMAIN_MEM_CURRENT|  = | VIR_DOMAIN_AFFECT_CURRENT|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_MEM_LIVE|  = | VIR_DOMAIN_AFFECT_LIVE|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_MEM_MAXIMUM|  = | 4 (0x4; 1 << 2)|\n\naffect Max rather than current  \n      \n    \n    }\n    \n\n### `virDomainMemoryStatPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainMemoryStatStruct * virDomainMemoryStatPtr;\n\n### `virDomainMemoryStatStruct`\u00c2\u00b6\n\n    \n    \n    struct virDomainMemoryStatStruct {\n    \n\nint| tag  \n---|---  \nunsigned long long| val  \n      \n    \n    }\n    \n\n### `virDomainMemoryStatTags`\u00c2\u00b6\n\nThese represent values from inside of the guest (e.g. the same value would be\nread from '/proc/meminfo' and/or other files from inside the guest).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ffd68dd-4f6c-4c71-a965-124a9381b7c8": {"__data__": {"id_": "0ffd68dd-4f6c-4c71-a965-124a9381b7c8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e495132c-128a-4b85-95c5-258dc725ae85", "node_type": null, "metadata": {}, "hash": "0a933e11035cf92e91bcf5d552ab077e55a57767548280f1d6d0e80e70dac6e9"}, "3": {"node_id": "95b65167-f6d9-4d72-929e-b2cb1d8c9d07", "node_type": null, "metadata": {}, "hash": "05e6daa9807f8275b162df87434bc3b94ecdc8d9e8d69af7758a4564d1df041d"}}, "hash": "97567a61a64e1fce1d888d84b56d7fb98755b5f9ec0dffda73efcd95341a89b3", "text": "enum virDomainMemoryStatTags {\n    \n\nVIR_DOMAIN_MEMORY_STAT_LAST|  = | VIR_DOMAIN_MEMORY_STAT_NR  \n---|---|---  \nVIR_DOMAIN_MEMORY_STAT_SWAP_IN|  = | 0 (0x0)|\n\nThe total amount of data read from swap space (in kB).  \n  \nVIR_DOMAIN_MEMORY_STAT_SWAP_OUT|  = | 1 (0x1)|\n\nThe total amount of memory written out to swap space (in kB).  \n  \nVIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT|  = | 2 (0x2)|\n\nPage faults occur when a process makes a valid access to virtual memory that\nis not available. When servicing the page fault, if disk IO is required, it is\nconsidered a major fault. If not, it is a minor fault. These are expressed as\nthe number of faults that have occurred.  \n  \nVIR_DOMAIN_MEMORY_STAT_MINOR_FAULT|  = | 3 (0x3)  \nVIR_DOMAIN_MEMORY_STAT_UNUSED|  = | 4 (0x4)|\n\nThe amount of memory left completely unused by the system. Memory that is\navailable but used for reclaimable caches should NOT be reported as free. This\nvalue is expressed in kB.  \n  \nVIR_DOMAIN_MEMORY_STAT_AVAILABLE|  = | 5 (0x5)|\n\nThe total amount of usable memory as seen by the domain. This value may be\nless than the amount of memory assigned to the domain if a balloon driver is\nin use or if the guest OS does not initialize all assigned pages. This value\nis expressed in kB.  \n  \nVIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON|  = | 6 (0x6)|\n\nCurrent balloon value (in KB).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "95b65167-f6d9-4d72-929e-b2cb1d8c9d07": {"__data__": {"id_": "95b65167-f6d9-4d72-929e-b2cb1d8c9d07", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0ffd68dd-4f6c-4c71-a965-124a9381b7c8", "node_type": null, "metadata": {}, "hash": "97567a61a64e1fce1d888d84b56d7fb98755b5f9ec0dffda73efcd95341a89b3"}, "3": {"node_id": "34d0fc91-01df-49f0-856e-91af0e62b972", "node_type": null, "metadata": {}, "hash": "1108488812a987afe1702a9ff6d4e7b782f57348488466ab634a52e9e0f25aee"}}, "hash": "05e6daa9807f8275b162df87434bc3b94ecdc8d9e8d69af7758a4564d1df041d", "text": "VIR_DOMAIN_MEMORY_STAT_RSS|  = | 7 (0x7)|\n\nResident Set Size of the process running the domain. This value is in kB  \n  \nVIR_DOMAIN_MEMORY_STAT_USABLE|  = | 8 (0x8)|\n\nHow much the balloon can be inflated without pushing the guest system to swap,\ncorresponds to 'Available' in /proc/meminfo  \n  \nVIR_DOMAIN_MEMORY_STAT_LAST_UPDATE|  = | 9 (0x9)|\n\nTimestamp of the last update of statistics, in seconds.  \n  \nVIR_DOMAIN_MEMORY_STAT_DISK_CACHES|  = | 10 (0xa)|\n\nThe amount of memory, that can be quickly reclaimed without additional I/O (in\nkB). Typically these pages are used for caching files from disk.  \n  \nVIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC|  = | 11 (0xb)|\n\nThe number of successful huge page allocations from inside the domain via\nvirtio balloon.  \n  \nVIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL|  = | 12 (0xc)|\n\nThe number of failed huge page allocations from inside the domain via virtio\nballoon.  \n  \nVIR_DOMAIN_MEMORY_STAT_NR|  = | 13 (0xd)|\n\nThe number of statistics supported by this version of the interface. To add\nnew statistics, add them to the enum and increase this value.  \n      \n    \n    }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "34d0fc91-01df-49f0-856e-91af0e62b972": {"__data__": {"id_": "34d0fc91-01df-49f0-856e-91af0e62b972", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "95b65167-f6d9-4d72-929e-b2cb1d8c9d07", "node_type": null, "metadata": {}, "hash": "05e6daa9807f8275b162df87434bc3b94ecdc8d9e8d69af7758a4564d1df041d"}, "3": {"node_id": "e7a8ace8-90fa-4554-aefd-ccec1f015205", "node_type": null, "metadata": {}, "hash": "09611b920accfef8a2e3fa01c7f958561174c4f5720e6a544d1171ba6d19fbe4"}}, "hash": "1108488812a987afe1702a9ff6d4e7b782f57348488466ab634a52e9e0f25aee", "text": "### `virDomainMessageType`\u00c2\u00b6\n\n    \n    \n    enum virDomainMessageType {\n    \n\nVIR_DOMAIN_MESSAGE_DEPRECATION|  = | 1 (0x1; 1 << 0)  \n---|---|---  \nVIR_DOMAIN_MESSAGE_TAINTING|  = | 2 (0x2; 1 << 1)  \n      \n    \n    }\n    \n\n### `virDomainMetadataType`\u00c2\u00b6\n\n    \n    \n    enum virDomainMetadataType {\n    \n\nVIR_DOMAIN_METADATA_DESCRIPTION|  = | 0 (0x0)|\n\nOperate on <description>  \n  \n---|---|---|---  \nVIR_DOMAIN_METADATA_TITLE|  = | 1 (0x1)|\n\nOperate on <title>  \n  \nVIR_DOMAIN_METADATA_ELEMENT|  = | 2 (0x2)|\n\nOperate on <metadata>  \n  \nVIR_DOMAIN_METADATA_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virDomainMigrateFlags`\u00c2\u00b6\n\nDomain migration flags.\n\n    \n    \n    enum virDomainMigrateFlags {\n    \n\nVIR_MIGRATE_LIVE|  = | 1 (0x1; 1 << 0)|\n\nDo not pause the domain during migration. The domain's memory will be\ntransferred to the destination host while the domain is running. The migration\nmay never converge if the domain is changing its memory faster then it can be\ntransferred. The domain can be manually paused anytime during migration using\n[virDomainSuspend](libvirt-libvirt-domain.html#virDomainSuspend).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e7a8ace8-90fa-4554-aefd-ccec1f015205": {"__data__": {"id_": "e7a8ace8-90fa-4554-aefd-ccec1f015205", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "34d0fc91-01df-49f0-856e-91af0e62b972", "node_type": null, "metadata": {}, "hash": "1108488812a987afe1702a9ff6d4e7b782f57348488466ab634a52e9e0f25aee"}, "3": {"node_id": "e666b821-638b-4c43-9f23-0f7c4cc52a15", "node_type": null, "metadata": {}, "hash": "f34898b6482392feaff8da0854b11e5d4cc3ff4d9497cf1c5219361f1a21e54d"}}, "hash": "09611b920accfef8a2e3fa01c7f958561174c4f5720e6a544d1171ba6d19fbe4", "text": "---|---|---|---  \nVIR_MIGRATE_PEER2PEER|  = | 2 (0x2; 1 << 1)|\n\nTell the source libvirtd to connect directly to the destination host. Without\nthis flag the client (e.g., virsh) connects to both hosts and controls the\nmigration process. In peer-to-peer mode, the source libvirtd controls the\nmigration by calling the destination daemon directly.  \n  \nVIR_MIGRATE_TUNNELLED|  = | 4 (0x4; 1 << 2)|\n\nTunnel migration data over libvirtd connection. Without this flag the source\nhypervisor sends migration data directly to the destination hypervisor. This\nflag can only be used when [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) is set as well. Note the less-common\nspelling that we're stuck with: [VIR_MIGRATE_TUNNELLED](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_TUNNELLED) should be VIR_MIGRATE_TUNNELED.  \n  \nVIR_MIGRATE_PERSIST_DEST|  = | 8 (0x8; 1 << 3)|\n\nDefine the domain as persistent on the destination host after successful\nmigration. If the domain was persistent on the source host and\n[VIR_MIGRATE_UNDEFINE_SOURCE](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_UNDEFINE_SOURCE) is not used, it will end up\npersistent on both hosts.  \n  \nVIR_MIGRATE_UNDEFINE_SOURCE|  = | 16 (0x10; 1 << 4)|\n\nUndefine the domain on the source host once migration successfully finishes.  \n  \nVIR_MIGRATE_PAUSED|  = | 32 (0x20; 1 << 5)|\n\nLeave the domain suspended on the destination host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e666b821-638b-4c43-9f23-0f7c4cc52a15": {"__data__": {"id_": "e666b821-638b-4c43-9f23-0f7c4cc52a15", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e7a8ace8-90fa-4554-aefd-ccec1f015205", "node_type": null, "metadata": {}, "hash": "09611b920accfef8a2e3fa01c7f958561174c4f5720e6a544d1171ba6d19fbe4"}, "3": {"node_id": "8035a02a-9c3a-418a-b54b-f8107e931162", "node_type": null, "metadata": {}, "hash": "55c21bc7aee4e7b6f7ea7769054c73adb6e10dc9ea427a3813c650a659e94228"}}, "hash": "f34898b6482392feaff8da0854b11e5d4cc3ff4d9497cf1c5219361f1a21e54d", "text": "[virDomainResume](libvirt-\nlibvirt-domain.html#virDomainResume) (on the [virDomainPtr](libvirt-libvirt-\ndomain.html#virDomainPtr) returned by the migration API) has to be called\nexplicitly to resume domain's virtual CPUs.  \n  \nVIR_MIGRATE_NON_SHARED_DISK|  = | 64 (0x40; 1 << 6)|\n\nMigrate full disk images in addition to domain's memory. By default only non-\nshared non-readonly disk images are transferred. The\n[VIR_MIGRATE_PARAM_MIGRATE_DISKS](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_MIGRATE_DISKS) parameter can be used to specify\nwhich disks should be migrated. This flag and\n[VIR_MIGRATE_NON_SHARED_INC](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_NON_SHARED_INC) are mutually exclusive.  \n  \nVIR_MIGRATE_NON_SHARED_INC|  = | 128 (0x80; 1 << 7)|\n\nMigrate disk images in addition to domain's memory. This is similar to\n[VIR_MIGRATE_NON_SHARED_DISK](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_NON_SHARED_DISK), but only the top level of each\ndisk's backing chain is copied. That is, the rest of the backing chain is\nexpected to be present on the destination and to be exactly the same as on the\nsource host. This flag and [VIR_MIGRATE_NON_SHARED_DISK](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_NON_SHARED_DISK) are mutually exclusive.  \n  \nVIR_MIGRATE_CHANGE_PROTECTION|  = | 256 (0x100; 1 << 8)|\n\nProtect against domain configuration changes during the migration process.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8035a02a-9c3a-418a-b54b-f8107e931162": {"__data__": {"id_": "8035a02a-9c3a-418a-b54b-f8107e931162", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e666b821-638b-4c43-9f23-0f7c4cc52a15", "node_type": null, "metadata": {}, "hash": "f34898b6482392feaff8da0854b11e5d4cc3ff4d9497cf1c5219361f1a21e54d"}, "3": {"node_id": "28d8388f-0690-4f7e-8fdb-d35a154893f0", "node_type": null, "metadata": {}, "hash": "77809a7eaa729601d9618df16bb9abb682969229a4b17662e8fd0997fafd167b"}}, "hash": "55c21bc7aee4e7b6f7ea7769054c73adb6e10dc9ea427a3813c650a659e94228", "text": "This flag is used automatically when both sides support it. Explicitly setting\nthis flag will cause migration to fail if either the source or the destination\ndoes not support it.  \n  \nVIR_MIGRATE_UNSAFE|  = | 512 (0x200; 1 << 9)|\n\nForce migration even if it is considered unsafe. In some cases libvirt may\nrefuse to migrate the domain because doing so may lead to potential problems\nsuch as data corruption, and thus the migration is considered unsafe. For a\nQEMU domain this may happen if the domain uses disks without explicitly\nsetting cache mode to \"none\". Migrating such domains is unsafe unless the disk\nimages are stored on coherent clustered filesystem, such as GFS2 or GPFS.  \n  \nVIR_MIGRATE_OFFLINE|  = | 1024 (0x400; 1 << 10)|\n\nMigrate a domain definition without starting the domain on the destination and\nwithout stopping it on the source host. Offline migration requires\n[VIR_MIGRATE_PERSIST_DEST](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PERSIST_DEST) to be set. Offline migration may not\ncopy disk storage or any other file based storage (such as UEFI variables).  \n  \nVIR_MIGRATE_COMPRESSED|  = | 2048 (0x800; 1 << 11)|\n\nCompress migration data. The compression methods can be specified using\n[VIR_MIGRATE_PARAM_COMPRESSION](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_COMPRESSION). A hypervisor default method will\nbe used if this parameter is omitted. Individual compression methods can be\ntuned via their specific VIR_MIGRATE_PARAM_COMPRESSION_* parameters.  \n  \nVIR_MIGRATE_ABORT_ON_ERROR|  = | 4096 (0x1000; 1 << 12)|\n\nCancel migration if a soft error (such as I/O error) happens during migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "28d8388f-0690-4f7e-8fdb-d35a154893f0": {"__data__": {"id_": "28d8388f-0690-4f7e-8fdb-d35a154893f0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8035a02a-9c3a-418a-b54b-f8107e931162", "node_type": null, "metadata": {}, "hash": "55c21bc7aee4e7b6f7ea7769054c73adb6e10dc9ea427a3813c650a659e94228"}, "3": {"node_id": "9e84adfc-32b4-48dd-abc0-24d4811d1e84", "node_type": null, "metadata": {}, "hash": "8fb86890cf9a25d31a880c0a5b67460880f9a092d40ff3a95fb1605f13bd8f2d"}}, "hash": "77809a7eaa729601d9618df16bb9abb682969229a4b17662e8fd0997fafd167b", "text": "VIR_MIGRATE_AUTO_CONVERGE|  = | 8192 (0x2000; 1 << 13)|\n\nEnable algorithms that ensure a live migration will eventually converge. This\nusually means the domain will be slowed down to make sure it does not change\nits memory faster than a hypervisor can transfer the changed memory to the\ndestination host. VIR_MIGRATE_PARAM_AUTO_CONVERGE_* parameters can be used to\ntune the algorithm.  \n  \nVIR_MIGRATE_RDMA_PIN_ALL|  = | 16384 (0x4000; 1 << 14)|\n\nThis flag can be used with RDMA migration (i.e., when\n[VIR_MIGRATE_PARAM_URI](libvirt-libvirt-domain.html#VIR_MIGRATE_PARAM_URI)\nstarts with \"rdma://\") to tell the hypervisor to pin all domain's memory at\nonce before migration starts rather then letting it pin memory pages as\nneeded. This means that all memory pages belonging to the domain will be\nlocked in host's memory and the host will not be allowed to swap them out. For\nQEMU/KVM this requires hard_limit memory tuning element (in the domain XML) to\nbe used and set to the maximum memory configured for the domain plus any\nmemory consumed by the QEMU process itself. Beware of setting the memory limit\ntoo high (and thus allowing the domain to lock most of the host's memory).\nDoing so may be dangerous to both the domain and the host itself since the\nhost's kernel may run out of memory.  \n  \nVIR_MIGRATE_POSTCOPY|  = | 32768 (0x8000; 1 << 15)|\n\nSetting the [VIR_MIGRATE_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_POSTCOPY) flag tells libvirt to enable post-copy\nmigration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9e84adfc-32b4-48dd-abc0-24d4811d1e84": {"__data__": {"id_": "9e84adfc-32b4-48dd-abc0-24d4811d1e84", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "28d8388f-0690-4f7e-8fdb-d35a154893f0", "node_type": null, "metadata": {}, "hash": "77809a7eaa729601d9618df16bb9abb682969229a4b17662e8fd0997fafd167b"}, "3": {"node_id": "c2c07490-8618-4e26-a85e-e9d012f661d9", "node_type": null, "metadata": {}, "hash": "3eb6b7dba12be6cc312563f31d0b8ca4cc5376b59be4512cf9dfd319421984b8"}}, "hash": "8fb86890cf9a25d31a880c0a5b67460880f9a092d40ff3a95fb1605f13bd8f2d", "text": "However, the migration will start normally and\n[virDomainMigrateStartPostCopy](libvirt-libvirt-\ndomain.html#virDomainMigrateStartPostCopy) needs to be called to switch it\ninto the post-copy mode. See [virDomainMigrateStartPostCopy](libvirt-libvirt-\ndomain.html#virDomainMigrateStartPostCopy) for more details.  \n  \nVIR_MIGRATE_TLS|  = | 65536 (0x10000; 1 << 16)|\n\nSetting the [VIR_MIGRATE_TLS](libvirt-libvirt-domain.html#VIR_MIGRATE_TLS)\nflag will cause the migration to attempt to use the TLS environment configured\nby the hypervisor in order to perform the migration. If incorrectly configured\non either source or destination, the migration will fail.  \n  \nVIR_MIGRATE_PARALLEL|  = | 131072 (0x20000; 1 << 17)|\n\nSend memory pages to the destination host through several network connections.\nSee VIR_MIGRATE_PARAM_PARALLEL_* parameters for configuring the parallel\nmigration.  \n  \nVIR_MIGRATE_NON_SHARED_SYNCHRONOUS_WRITES|  = | 262144 (0x40000; 1 << 18)|\n\nForce the guest writes which happen when copying disk images for non-shared\nstorage migration to be synchronously written to the destination. This ensures\nthe storage migration converges for VMs doing heavy I/O on fast local storage\nand slow mirror. Requires one of [VIR_MIGRATE_NON_SHARED_DISK](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_NON_SHARED_DISK),\n[VIR_MIGRATE_NON_SHARED_INC](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_NON_SHARED_INC) to be present as well.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c2c07490-8618-4e26-a85e-e9d012f661d9": {"__data__": {"id_": "c2c07490-8618-4e26-a85e-e9d012f661d9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9e84adfc-32b4-48dd-abc0-24d4811d1e84", "node_type": null, "metadata": {}, "hash": "8fb86890cf9a25d31a880c0a5b67460880f9a092d40ff3a95fb1605f13bd8f2d"}, "3": {"node_id": "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c", "node_type": null, "metadata": {}, "hash": "c112233675750b492f03a7d779b8ef3f89a799aeb3333492ab3d9facce461b4c"}}, "hash": "3eb6b7dba12be6cc312563f31d0b8ca4cc5376b59be4512cf9dfd319421984b8", "text": "VIR_MIGRATE_POSTCOPY_RESUME|  = | 524288 (0x80000; 1 << 19)|\n\nResume migration which failed in post-copy phase.  \n  \nVIR_MIGRATE_ZEROCOPY|  = | 1048576 (0x100000; 1 << 20)|\n\nUse zero-copy mechanism for migrating memory pages. For QEMU/KVM this means\nQEMU will be temporarily allowed to lock all guest pages in host's memory,\nalthough only those that are queued for transfer will be locked at the same\ntime.  \n      \n    \n    }\n    \n\n### `virDomainMigrateMaxSpeedFlags`\u00c2\u00b6\n\nDomain migration speed flags.\n\n    \n    \n    enum virDomainMigrateMaxSpeedFlags {\n    \n\nVIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY|  = | 1 (0x1; 1 << 0)|\n\nSet or get maximum speed of post-copy migration.  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainModificationImpact`\u00c2\u00b6\n\nSeveral modification APIs take flags to determine whether a change to the\ndomain affects just the running instance, just the persistent definition, or\nboth at the same time. The counterpart query APIs also take the same flags to\ndetermine whether to query the running instance or persistent definition,\nalthough both cannot be queried at once.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c": {"__data__": {"id_": "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c2c07490-8618-4e26-a85e-e9d012f661d9", "node_type": null, "metadata": {}, "hash": "3eb6b7dba12be6cc312563f31d0b8ca4cc5376b59be4512cf9dfd319421984b8"}, "3": {"node_id": "8406870c-a5d4-4f23-babf-679967d7e0b4", "node_type": null, "metadata": {}, "hash": "8e2dd8b03250f5603be19bfe282a91ce31a3a8157210d1078eccaf5b4e963198"}}, "hash": "c112233675750b492f03a7d779b8ef3f89a799aeb3333492ab3d9facce461b4c", "text": "The use of\n[VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT) will resolve to either\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nor [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) according to current domain state.\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nrequires a running domain, and [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) requires a persistent domain (whether or\nnot it is running). These enums should not conflict with those of\n[virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags).\n\n    \n    \n    enum virDomainModificationImpact {\n    \n\nVIR_DOMAIN_AFFECT_CURRENT|  = | 0 (0x0)|\n\nAffect current domain state.  \n  \n---|---|---|---  \nVIR_DOMAIN_AFFECT_LIVE|  = | 1 (0x1; 1 << 0)|\n\nAffect running domain state.  \n  \nVIR_DOMAIN_AFFECT_CONFIG|  = | 2 (0x2; 1 << 1)|\n\nAffect persistent domain state.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8406870c-a5d4-4f23-babf-679967d7e0b4": {"__data__": {"id_": "8406870c-a5d4-4f23-babf-679967d7e0b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c", "node_type": null, "metadata": {}, "hash": "c112233675750b492f03a7d779b8ef3f89a799aeb3333492ab3d9facce461b4c"}, "3": {"node_id": "e92963d3-1bff-4e58-8e8a-e5b9e5624781", "node_type": null, "metadata": {}, "hash": "3fe8343ac65d472c1d04f1ebbe3d38bd33e45db0f032dea809c1a9ed5df294c3"}}, "hash": "8e2dd8b03250f5603be19bfe282a91ce31a3a8157210d1078eccaf5b4e963198", "text": "1 << 2 is reserved for\n[virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)  \n      \n    \n    }\n    \n\n### `virDomainNostateReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainNostateReason {\n    \n\nVIR_DOMAIN_NOSTATE_UNKNOWN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_NOSTATE_LAST|  = | 1 (0x1)  \n      \n    \n    }\n    \n\n### `virDomainNumatuneMemMode`\u00c2\u00b6\n\nRepresentation of the various modes in the <numatune> element of a domain.\n\n    \n    \n    enum virDomainNumatuneMemMode {\n    \n\nVIR_DOMAIN_NUMATUNE_MEM_STRICT|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_NUMATUNE_MEM_PREFERRED|  = | 1 (0x1)  \nVIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE|  = | 2 (0x2)  \nVIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE|  = | 3 (0x3)  \nVIR_DOMAIN_NUMATUNE_MEM_LAST|  = | 4 (0x4)|\n\nThis constant is subject to change  \n      \n    \n    }\n    \n\n### `virDomainOpenGraphicsFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainOpenGraphicsFlags {\n    \n\nVIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH|  = | 1 (0x1; 1 << 0)  \n---|---|---", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e92963d3-1bff-4e58-8e8a-e5b9e5624781": {"__data__": {"id_": "e92963d3-1bff-4e58-8e8a-e5b9e5624781", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8406870c-a5d4-4f23-babf-679967d7e0b4", "node_type": null, "metadata": {}, "hash": "8e2dd8b03250f5603be19bfe282a91ce31a3a8157210d1078eccaf5b4e963198"}, "3": {"node_id": "a40163aa-de78-45c0-b7fd-f87ff4406360", "node_type": null, "metadata": {}, "hash": "ed851bbd3cfdae20a5b86afd332e6cae5711ffd049f5a6a2859cb3075116e216"}}, "hash": "3fe8343ac65d472c1d04f1ebbe3d38bd33e45db0f032dea809c1a9ed5df294c3", "text": "---|---|---  \n      \n    \n    }\n    \n\n### `virDomainPMSuspendedDiskReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainPMSuspendedDiskReason {\n    \n\nVIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_PMSUSPENDED_DISK_LAST|  = | 1 (0x1)  \n      \n    \n    }\n    \n\n### `virDomainPMSuspendedReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainPMSuspendedReason {\n    \n\nVIR_DOMAIN_PMSUSPENDED_UNKNOWN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_PMSUSPENDED_LAST|  = | 1 (0x1)  \n      \n    \n    }\n    \n\n### `virDomainPausedReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainPausedReason {\n    \n\nVIR_DOMAIN_PAUSED_UNKNOWN|  = | 0 (0x0)|\n\nthe reason is unknown  \n  \n---|---|---|---  \nVIR_DOMAIN_PAUSED_USER|  = | 1 (0x1)|\n\npaused on user request  \n  \nVIR_DOMAIN_PAUSED_MIGRATION|  = | 2 (0x2)|\n\npaused for offline migration  \n  \nVIR_DOMAIN_PAUSED_SAVE|  = | 3 (0x3)|\n\npaused for save  \n  \nVIR_DOMAIN_PAUSED_DUMP|  = | 4 (0x4)|\n\npaused for offline core", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a40163aa-de78-45c0-b7fd-f87ff4406360": {"__data__": {"id_": "a40163aa-de78-45c0-b7fd-f87ff4406360", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e92963d3-1bff-4e58-8e8a-e5b9e5624781", "node_type": null, "metadata": {}, "hash": "3fe8343ac65d472c1d04f1ebbe3d38bd33e45db0f032dea809c1a9ed5df294c3"}, "3": {"node_id": "2d07b553-f980-440d-bcbb-7105d4f884e7", "node_type": null, "metadata": {}, "hash": "1231c72a110803e23233510f71c0f54107d145dc9773d2302ceeaa1f59b074c6"}}, "hash": "ed851bbd3cfdae20a5b86afd332e6cae5711ffd049f5a6a2859cb3075116e216", "text": "= | 4 (0x4)|\n\npaused for offline core dump  \n  \nVIR_DOMAIN_PAUSED_IOERROR|  = | 5 (0x5)|\n\npaused due to a disk I/O error  \n  \nVIR_DOMAIN_PAUSED_WATCHDOG|  = | 6 (0x6)|\n\npaused due to a watchdog event  \n  \nVIR_DOMAIN_PAUSED_FROM_SNAPSHOT|  = | 7 (0x7)|\n\npaused after restoring from snapshot  \n  \nVIR_DOMAIN_PAUSED_SHUTTING_DOWN|  = | 8 (0x8)|\n\npaused during shutdown process  \n  \nVIR_DOMAIN_PAUSED_SNAPSHOT|  = | 9 (0x9)|\n\npaused while creating a snapshot  \n  \nVIR_DOMAIN_PAUSED_CRASHED|  = | 10 (0xa)|\n\npaused due to a guest crash  \n  \nVIR_DOMAIN_PAUSED_STARTING_UP|  = | 11 (0xb)|\n\nthe domain is being started  \n  \nVIR_DOMAIN_PAUSED_POSTCOPY|  = | 12 (0xc)|\n\npaused for post-copy migration  \n  \nVIR_DOMAIN_PAUSED_POSTCOPY_FAILED|  = | 13 (0xd)|\n\npaused after failed post-copy  \n  \nVIR_DOMAIN_PAUSED_API_ERROR|  = | 14 (0xe)|\n\nSome APIs (e.g. migration, snapshot) internally need to suspend a domain.\nThis paused state reason is used when resume operation at the end of such API\nfails.  \n  \nVIR_DOMAIN_PAUSED_LAST|  = | 15 (0xf)  \n      \n    \n    }\n    \n\n### `virDomainProcessSignal`\u00c2\u00b6\n\nThese just happen to match Linux signal numbers.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2d07b553-f980-440d-bcbb-7105d4f884e7": {"__data__": {"id_": "2d07b553-f980-440d-bcbb-7105d4f884e7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a40163aa-de78-45c0-b7fd-f87ff4406360", "node_type": null, "metadata": {}, "hash": "ed851bbd3cfdae20a5b86afd332e6cae5711ffd049f5a6a2859cb3075116e216"}, "3": {"node_id": "53715863-f339-4ca5-be49-ac2c5883d383", "node_type": null, "metadata": {}, "hash": "2f3c20481e9eb304277e46530415aa00ff8103fa5b27d91c910990c651bae8f4"}}, "hash": "1231c72a110803e23233510f71c0f54107d145dc9773d2302ceeaa1f59b074c6", "text": "The numbers will be mapped to\nwhatever the SIGNUM is in the guest OS in question by the agent delivering the\nsignal. The names are based on the POSIX / XSI signal standard though. Do not\nrely on all values matching Linux though. It is possible this enum might be\nextended with new signals which have no mapping in Linux.\n\n    \n    \n    enum virDomainProcessSignal {\n    \n\nVIR_DOMAIN_PROCESS_SIGNAL_NOP|  = | 0 (0x0)|\n\nNo constant in POSIX/Linux  \n  \n---|---|---|---  \nVIR_DOMAIN_PROCESS_SIGNAL_HUP|  = | 1 (0x1)|\n\nSIGHUP  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_INT|  = | 2 (0x2)|\n\nSIGINT  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_QUIT|  = | 3 (0x3)|\n\nSIGQUIT  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_ILL|  = | 4 (0x4)|\n\nSIGILL  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_TRAP|  = | 5 (0x5)|\n\nSIGTRAP  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_ABRT|  = | 6 (0x6)|\n\nSIGABRT  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_BUS|  = | 7 (0x7)|\n\nSIGBUS  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_FPE|  = | 8 (0x8)|\n\nSIGFPE  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_KILL|  = | 9 (0x9)|\n\nSIGKILL  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_USR1|  = | 10", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "53715863-f339-4ca5-be49-ac2c5883d383": {"__data__": {"id_": "53715863-f339-4ca5-be49-ac2c5883d383", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2d07b553-f980-440d-bcbb-7105d4f884e7", "node_type": null, "metadata": {}, "hash": "1231c72a110803e23233510f71c0f54107d145dc9773d2302ceeaa1f59b074c6"}, "3": {"node_id": "0d8a6e98-7a30-4d90-8e34-728b49da9ae2", "node_type": null, "metadata": {}, "hash": "0f175d881e5fe07bd6ccde5267660c0d8cdf84186d5d8ce0ce3491015e1db3d3"}}, "hash": "2f3c20481e9eb304277e46530415aa00ff8103fa5b27d91c910990c651bae8f4", "text": "= | 10 (0xa)|\n\nSIGUSR1  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_SEGV|  = | 11 (0xb)|\n\nSIGSEGV  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_USR2|  = | 12 (0xc)|\n\nSIGUSR2  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_PIPE|  = | 13 (0xd)|\n\nSIGPIPE  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_ALRM|  = | 14 (0xe)|\n\nSIGALRM  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_TERM|  = | 15 (0xf)|\n\nSIGTERM  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_STKFLT|  = | 16 (0x10)|\n\nNot in POSIX (SIGSTKFLT on Linux  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_CHLD|  = | 17 (0x11)|\n\nSIGCHLD  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_CONT|  = | 18 (0x12)|\n\nSIGCONT  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_STOP|  = | 19 (0x13)|\n\nSIGSTOP  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_TSTP|  = | 20 (0x14)|\n\nSIGTSTP  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_TTIN|  = | 21 (0x15)|\n\nSIGTTIN  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_TTOU|  = | 22 (0x16)|\n\nSIGTTOU  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_URG|  = | 23 (0x17)|\n\nSIGURG", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0d8a6e98-7a30-4d90-8e34-728b49da9ae2": {"__data__": {"id_": "0d8a6e98-7a30-4d90-8e34-728b49da9ae2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "53715863-f339-4ca5-be49-ac2c5883d383", "node_type": null, "metadata": {}, "hash": "2f3c20481e9eb304277e46530415aa00ff8103fa5b27d91c910990c651bae8f4"}, "3": {"node_id": "6ceac222-7b5c-4edf-9839-57ee71c1ea5c", "node_type": null, "metadata": {}, "hash": "67acdc6fd3d6f39301d179794237d70d0909d6ffa1cd2f04e1f587b76ed3eb8b"}}, "hash": "0f175d881e5fe07bd6ccde5267660c0d8cdf84186d5d8ce0ce3491015e1db3d3", "text": "= | 23 (0x17)|\n\nSIGURG  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_XCPU|  = | 24 (0x18)|\n\nSIGXCPU  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_XFSZ|  = | 25 (0x19)|\n\nSIGXFSZ  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_VTALRM|  = | 26 (0x1a)|\n\nSIGVTALRM  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_PROF|  = | 27 (0x1b)|\n\nSIGPROF  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_WINCH|  = | 28 (0x1c)|\n\nNot in POSIX (SIGWINCH on Linux)  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_POLL|  = | 29 (0x1d)|\n\nSIGPOLL (also known as SIGIO on Linux)  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_PWR|  = | 30 (0x1e)|\n\nNot in POSIX (SIGPWR on Linux)  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_SYS|  = | 31 (0x1f)|\n\nSIGSYS (also known as SIGUNUSED on Linux)  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT0|  = | 32 (0x20)|\n\nSIGRTMIN  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT1|  = | 33 (0x21)|\n\nSIGRTMIN + 1  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT2|  = | 34 (0x22)|\n\nSIGRTMIN + 2  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT3|  = | 35 (0x23)|\n\nSIGRTMIN + 3", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6ceac222-7b5c-4edf-9839-57ee71c1ea5c": {"__data__": {"id_": "6ceac222-7b5c-4edf-9839-57ee71c1ea5c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0d8a6e98-7a30-4d90-8e34-728b49da9ae2", "node_type": null, "metadata": {}, "hash": "0f175d881e5fe07bd6ccde5267660c0d8cdf84186d5d8ce0ce3491015e1db3d3"}, "3": {"node_id": "ca8c93ab-f548-48a3-b763-d32c61d693fa", "node_type": null, "metadata": {}, "hash": "172ba0e14c4e1fd5ad93011284234c1f99789a30aa2409560da09faf07515600"}}, "hash": "67acdc6fd3d6f39301d179794237d70d0909d6ffa1cd2f04e1f587b76ed3eb8b", "text": "= | 35 (0x23)|\n\nSIGRTMIN + 3  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT4|  = | 36 (0x24)|\n\nSIGRTMIN + 4  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT5|  = | 37 (0x25)|\n\nSIGRTMIN + 5  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT6|  = | 38 (0x26)|\n\nSIGRTMIN + 6  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT7|  = | 39 (0x27)|\n\nSIGRTMIN + 7  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT8|  = | 40 (0x28)|\n\nSIGRTMIN + 8  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT9|  = | 41 (0x29)|\n\nSIGRTMIN + 9  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT10|  = | 42 (0x2a)|\n\nSIGRTMIN + 10  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT11|  = | 43 (0x2b)|\n\nSIGRTMIN + 11  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT12|  = | 44 (0x2c)|\n\nSIGRTMIN + 12  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT13|  = | 45 (0x2d)|\n\nSIGRTMIN + 13  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT14|  = | 46 (0x2e)|\n\nSIGRTMIN + 14  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT15|  = | 47 (0x2f)|\n\nSIGRTMIN + 15", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ca8c93ab-f548-48a3-b763-d32c61d693fa": {"__data__": {"id_": "ca8c93ab-f548-48a3-b763-d32c61d693fa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6ceac222-7b5c-4edf-9839-57ee71c1ea5c", "node_type": null, "metadata": {}, "hash": "67acdc6fd3d6f39301d179794237d70d0909d6ffa1cd2f04e1f587b76ed3eb8b"}, "3": {"node_id": "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de", "node_type": null, "metadata": {}, "hash": "d562dfc6b3da83244af0eb2f6c682f22bcce338a7e0ccb3e40709f3116350901"}}, "hash": "172ba0e14c4e1fd5ad93011284234c1f99789a30aa2409560da09faf07515600", "text": "| 47 (0x2f)|\n\nSIGRTMIN + 15  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT16|  = | 48 (0x30)|\n\nSIGRTMIN + 16  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT17|  = | 49 (0x31)|\n\nSIGRTMIN + 17  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT18|  = | 50 (0x32)|\n\nSIGRTMIN + 18  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT19|  = | 51 (0x33)|\n\nSIGRTMIN + 19  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT20|  = | 52 (0x34)|\n\nSIGRTMIN + 20  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT21|  = | 53 (0x35)|\n\nSIGRTMIN + 21  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT22|  = | 54 (0x36)|\n\nSIGRTMIN + 22  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT23|  = | 55 (0x37)|\n\nSIGRTMIN + 23  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT24|  = | 56 (0x38)|\n\nSIGRTMIN + 24  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT25|  = | 57 (0x39)|\n\nSIGRTMIN + 25  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT26|  = | 58 (0x3a)|\n\nSIGRTMIN + 26  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT27|  = | 59 (0x3b)|\n\nSIGRTMIN + 27  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT28|  = | 60", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de": {"__data__": {"id_": "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ca8c93ab-f548-48a3-b763-d32c61d693fa", "node_type": null, "metadata": {}, "hash": "172ba0e14c4e1fd5ad93011284234c1f99789a30aa2409560da09faf07515600"}, "3": {"node_id": "3554bf83-77a9-469a-aa74-68327820b1e4", "node_type": null, "metadata": {}, "hash": "9a4b451346d4c462ec7a6c93582688250c963e8de7ae42465d7e4fa9f008ca13"}}, "hash": "d562dfc6b3da83244af0eb2f6c682f22bcce338a7e0ccb3e40709f3116350901", "text": "= | 60 (0x3c)|\n\nSIGRTMIN + 28  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT29|  = | 61 (0x3d)|\n\nSIGRTMIN + 29  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT30|  = | 62 (0x3e)|\n\nSIGRTMIN + 30  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT31|  = | 63 (0x3f)|\n\nSIGRTMIN + 31  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_RT32|  = | 64 (0x40)|\n\nSIGRTMIN + 32 / SIGRTMAX  \n  \nVIR_DOMAIN_PROCESS_SIGNAL_LAST|  = | 65 (0x41)  \n      \n    \n    }\n    \n\n### `virDomainPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomain * virDomainPtr;\n\na [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) is pointer to a\n[virDomain](libvirt-libvirt-domain.html#virDomain) private structure, this is\nthe type used to reference a domain in the API.\n\n### `virDomainRebootFlagValues`\u00c2\u00b6\n\n    \n    \n    enum virDomainRebootFlagValues {\n    \n\nVIR_DOMAIN_REBOOT_DEFAULT|  = | 0 (0x0)|\n\nhypervisor choice  \n  \n---|---|---|---  \nVIR_DOMAIN_REBOOT_ACPI_POWER_BTN|  = | 1 (0x1; 1 << 0)|\n\nSend ACPI event  \n  \nVIR_DOMAIN_REBOOT_GUEST_AGENT|  = | 2 (0x2;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3554bf83-77a9-469a-aa74-68327820b1e4": {"__data__": {"id_": "3554bf83-77a9-469a-aa74-68327820b1e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de", "node_type": null, "metadata": {}, "hash": "d562dfc6b3da83244af0eb2f6c682f22bcce338a7e0ccb3e40709f3116350901"}, "3": {"node_id": "1cf11199-7d0e-4a48-89ae-46e3f0b06c77", "node_type": null, "metadata": {}, "hash": "d543e22c22768a6c43a9d65d328970288874bf6da13078d5a8ee6f964b85fe82"}}, "hash": "9a4b451346d4c462ec7a6c93582688250c963e8de7ae42465d7e4fa9f008ca13", "text": "1 << 1)|\n\nUse guest agent  \n  \nVIR_DOMAIN_REBOOT_INITCTL|  = | 4 (0x4; 1 << 2)|\n\nUse initctl  \n  \nVIR_DOMAIN_REBOOT_SIGNAL|  = | 8 (0x8; 1 << 3)|\n\nSend a signal  \n  \nVIR_DOMAIN_REBOOT_PARAVIRT|  = | 16 (0x10; 1 << 4)|\n\nUse paravirt guest control  \n      \n    \n    }\n    \n\n### `virDomainRunningReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainRunningReason {\n    \n\nVIR_DOMAIN_RUNNING_UNKNOWN|  = | 0 (0x0)  \n---|---|---  \nVIR_DOMAIN_RUNNING_BOOTED|  = | 1 (0x1)|\n\nnormal startup from boot  \n  \nVIR_DOMAIN_RUNNING_MIGRATED|  = | 2 (0x2)|\n\nmigrated from another host  \n  \nVIR_DOMAIN_RUNNING_RESTORED|  = | 3 (0x3)|\n\nrestored from a state file  \n  \nVIR_DOMAIN_RUNNING_FROM_SNAPSHOT|  = | 4 (0x4)|\n\nrestored from snapshot  \n  \nVIR_DOMAIN_RUNNING_UNPAUSED|  = | 5 (0x5)|\n\nreturned from paused state  \n  \nVIR_DOMAIN_RUNNING_MIGRATION_CANCELED|  = | 6 (0x6)|\n\nreturned from migration  \n  \nVIR_DOMAIN_RUNNING_SAVE_CANCELED|  = | 7 (0x7)|\n\nreturned from failed save process  \n  \nVIR_DOMAIN_RUNNING_WAKEUP|  = | 8", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1cf11199-7d0e-4a48-89ae-46e3f0b06c77": {"__data__": {"id_": "1cf11199-7d0e-4a48-89ae-46e3f0b06c77", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3554bf83-77a9-469a-aa74-68327820b1e4", "node_type": null, "metadata": {}, "hash": "9a4b451346d4c462ec7a6c93582688250c963e8de7ae42465d7e4fa9f008ca13"}, "3": {"node_id": "713f654d-f74b-4391-b5fe-402e9ee7bf47", "node_type": null, "metadata": {}, "hash": "4f47b5923776204979a7615ce11892a37c9edbd5cd2531a4007d99f02e3730e6"}}, "hash": "d543e22c22768a6c43a9d65d328970288874bf6da13078d5a8ee6f964b85fe82", "text": "VIR_DOMAIN_RUNNING_WAKEUP|  = | 8 (0x8)|\n\nreturned from pmsuspended due to wakeup event  \n  \nVIR_DOMAIN_RUNNING_CRASHED|  = | 9 (0x9)|\n\nresumed from crashed  \n  \nVIR_DOMAIN_RUNNING_POSTCOPY|  = | 10 (0xa)|\n\nrunning in post-copy migration mode  \n  \nVIR_DOMAIN_RUNNING_POSTCOPY_FAILED|  = | 11 (0xb)|\n\nrunning in failed post-copy migration  \n  \nVIR_DOMAIN_RUNNING_LAST|  = | 12 (0xc)  \n      \n    \n    }\n    \n\n### `virDomainSaveImageXMLFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainSaveImageXMLFlags {\n    \n\nVIR_DOMAIN_SAVE_IMAGE_XML_SECURE|  = | VIR_DOMAIN_XML_SECURE|\n\ndump security sensitive information too  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainSaveRestoreFlags`\u00c2\u00b6\n\nFlags for use in [virDomainSaveFlags](libvirt-libvirt-\ndomain.html#virDomainSaveFlags)(), [virDomainManagedSave](libvirt-libvirt-\ndomain.html#virDomainManagedSave)(), [virDomainSaveParams](libvirt-libvirt-\ndomain.html#virDomainSaveParams)(), [virDomainRestoreParams](libvirt-libvirt-\ndomain.html#virDomainRestoreParams)(), [virDomainRestoreFlags](libvirt-\nlibvirt-domain.html#virDomainRestoreFlags)(), and\n[virDomainSaveImageDefineXML](libvirt-libvirt-\ndomain.html#virDomainSaveImageDefineXML)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "713f654d-f74b-4391-b5fe-402e9ee7bf47": {"__data__": {"id_": "713f654d-f74b-4391-b5fe-402e9ee7bf47", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1cf11199-7d0e-4a48-89ae-46e3f0b06c77", "node_type": null, "metadata": {}, "hash": "d543e22c22768a6c43a9d65d328970288874bf6da13078d5a8ee6f964b85fe82"}, "3": {"node_id": "acc7fab9-808f-493c-9147-51d3fad7f0ff", "node_type": null, "metadata": {}, "hash": "f0f13812ac448969b93a2606aa029723f11576ace1c8c38235e4214ad9fb069a"}}, "hash": "4f47b5923776204979a7615ce11892a37c9edbd5cd2531a4007d99f02e3730e6", "text": "html#virDomainSaveImageDefineXML)(). Not all flags apply to all these\nfunctions.\n\n    \n    \n    enum virDomainSaveRestoreFlags {\n    \n\nVIR_DOMAIN_SAVE_BYPASS_CACHE|  = | 1 (0x1; 1 << 0)|\n\nAvoid file system cache pollution  \n  \n---|---|---|---  \nVIR_DOMAIN_SAVE_RUNNING|  = | 2 (0x2; 1 << 1)|\n\nFavor running over paused  \n  \nVIR_DOMAIN_SAVE_PAUSED|  = | 4 (0x4; 1 << 2)|\n\nFavor paused over running  \n  \nVIR_DOMAIN_SAVE_RESET_NVRAM|  = | 8 (0x8; 1 << 3)|\n\nRe-initialize NVRAM from template  \n      \n    \n    }\n    \n\n### `virDomainSetTimeFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainSetTimeFlags {\n    \n\nVIR_DOMAIN_TIME_SYNC|  = | 1 (0x1; 1 << 0)|\n\nRe-sync domain time from domain's RTC  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainSetUserPasswordFlags`\u00c2\u00b6\n\n    \n    \n    enum virDomainSetUserPasswordFlags {\n    \n\nVIR_DOMAIN_PASSWORD_ENCRYPTED|  = | 1 (0x1;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "acc7fab9-808f-493c-9147-51d3fad7f0ff": {"__data__": {"id_": "acc7fab9-808f-493c-9147-51d3fad7f0ff", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "713f654d-f74b-4391-b5fe-402e9ee7bf47", "node_type": null, "metadata": {}, "hash": "4f47b5923776204979a7615ce11892a37c9edbd5cd2531a4007d99f02e3730e6"}, "3": {"node_id": "3c41d8fb-e581-471b-80b5-436173358cb9", "node_type": null, "metadata": {}, "hash": "37f0d24a44fe5244d35b04afaca7a0b66f25a0d8045ce6ab945f4758734af7fb"}}, "hash": "f0f13812ac448969b93a2606aa029723f11576ace1c8c38235e4214ad9fb069a", "text": "1 << 0)|\n\nthe password is already encrypted  \n  \n---|---|---|---  \n      \n    \n    }\n    \n\n### `virDomainShutdownFlagValues`\u00c2\u00b6\n\n    \n    \n    enum virDomainShutdownFlagValues {\n    \n\nVIR_DOMAIN_SHUTDOWN_DEFAULT|  = | 0 (0x0)|\n\nhypervisor choice  \n  \n---|---|---|---  \nVIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN|  = | 1 (0x1; 1 << 0)|\n\nSend ACPI event  \n  \nVIR_DOMAIN_SHUTDOWN_GUEST_AGENT|  = | 2 (0x2; 1 << 1)|\n\nUse guest agent  \n  \nVIR_DOMAIN_SHUTDOWN_INITCTL|  = | 4 (0x4; 1 << 2)|\n\nUse initctl  \n  \nVIR_DOMAIN_SHUTDOWN_SIGNAL|  = | 8 (0x8; 1 << 3)|\n\nSend a signal  \n  \nVIR_DOMAIN_SHUTDOWN_PARAVIRT|  = | 16 (0x10; 1 << 4)|\n\nUse paravirt guest control  \n      \n    \n    }\n    \n\n### `virDomainShutdownReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainShutdownReason {\n    \n\nVIR_DOMAIN_SHUTDOWN_UNKNOWN|  = | 0 (0x0)|\n\nthe reason is unknown  \n  \n---|---|---|---  \nVIR_DOMAIN_SHUTDOWN_USER|  = | 1 (0x1)|\n\nshutting down on user request  \n  \nVIR_DOMAIN_SHUTDOWN_LAST|  = | 2 (0x2)  \n      \n    \n    }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3c41d8fb-e581-471b-80b5-436173358cb9": {"__data__": {"id_": "3c41d8fb-e581-471b-80b5-436173358cb9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "acc7fab9-808f-493c-9147-51d3fad7f0ff", "node_type": null, "metadata": {}, "hash": "f0f13812ac448969b93a2606aa029723f11576ace1c8c38235e4214ad9fb069a"}, "3": {"node_id": "498631a6-1f34-452e-956e-e03fa8b2aaa9", "node_type": null, "metadata": {}, "hash": "2264438c5d3d4aa315499f5e1e0fa66cd64caeda0ce187338000a6230d8b793e"}}, "hash": "37f0d24a44fe5244d35b04afaca7a0b66f25a0d8045ce6ab945f4758734af7fb", "text": "}\n    \n\n### `virDomainShutoffReason`\u00c2\u00b6\n\n    \n    \n    enum virDomainShutoffReason {\n    \n\nVIR_DOMAIN_SHUTOFF_UNKNOWN|  = | 0 (0x0)|\n\nthe reason is unknown  \n  \n---|---|---|---  \nVIR_DOMAIN_SHUTOFF_SHUTDOWN|  = | 1 (0x1)|\n\nnormal shutdown  \n  \nVIR_DOMAIN_SHUTOFF_DESTROYED|  = | 2 (0x2)|\n\nforced poweroff  \n  \nVIR_DOMAIN_SHUTOFF_CRASHED|  = | 3 (0x3)|\n\ndomain crashed  \n  \nVIR_DOMAIN_SHUTOFF_MIGRATED|  = | 4 (0x4)|\n\nmigrated to another host  \n  \nVIR_DOMAIN_SHUTOFF_SAVED|  = | 5 (0x5)|\n\nsaved to a file  \n  \nVIR_DOMAIN_SHUTOFF_FAILED|  = | 6 (0x6)|\n\ndomain failed to start  \n  \nVIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT|  = | 7 (0x7)|\n\nrestored from a snapshot which was taken while domain was shutoff  \n  \nVIR_DOMAIN_SHUTOFF_DAEMON|  = | 8 (0x8)|\n\ndaemon decides to kill domain during reconnection processing  \n  \nVIR_DOMAIN_SHUTOFF_LAST|  = | 9 (0x9)  \n      \n    \n    }\n    \n\n### `virDomainState`\u00c2\u00b6\n\nA domain may be in different states at a given point in time\n\n    \n    \n    enum virDomainState {", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "498631a6-1f34-452e-956e-e03fa8b2aaa9": {"__data__": {"id_": "498631a6-1f34-452e-956e-e03fa8b2aaa9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3c41d8fb-e581-471b-80b5-436173358cb9", "node_type": null, "metadata": {}, "hash": "37f0d24a44fe5244d35b04afaca7a0b66f25a0d8045ce6ab945f4758734af7fb"}, "3": {"node_id": "960628a2-2413-477f-8d23-cc7417ad29ee", "node_type": null, "metadata": {}, "hash": "619cc83114edb8459d090f4cb5e020c110d1b4fc2ecaa9d26f8f1b472ee3d6dd"}}, "hash": "2264438c5d3d4aa315499f5e1e0fa66cd64caeda0ce187338000a6230d8b793e", "text": "enum virDomainState {\n    \n\nVIR_DOMAIN_NOSTATE|  = | 0 (0x0)|\n\nno state  \n  \n---|---|---|---  \nVIR_DOMAIN_RUNNING|  = | 1 (0x1)|\n\nthe domain is running  \n  \nVIR_DOMAIN_BLOCKED|  = | 2 (0x2)|\n\nthe domain is blocked on resource  \n  \nVIR_DOMAIN_PAUSED|  = | 3 (0x3)|\n\nthe domain is paused by user  \n  \nVIR_DOMAIN_SHUTDOWN|  = | 4 (0x4)|\n\nthe domain is being shut down  \n  \nVIR_DOMAIN_SHUTOFF|  = | 5 (0x5)|\n\nthe domain is shut off  \n  \nVIR_DOMAIN_CRASHED|  = | 6 (0x6)|\n\nthe domain is crashed  \n  \nVIR_DOMAIN_PMSUSPENDED|  = | 7 (0x7)|\n\nthe domain is suspended by guest power management  \n  \nVIR_DOMAIN_LAST|  = | 8 (0x8)|\n\nNB: this enum value will increase over time as new states are added to the\nlibvirt API. It reflects the last state supported by this version of the\nlibvirt API.  \n      \n    \n    }\n    \n\n### `virDomainStatsRecord`\u00c2\u00b6\n\n    \n    \n    struct virDomainStatsRecord {\n    \n\n[virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)| dom  \n---|---  \n[virTypedParameterPtr](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "960628a2-2413-477f-8d23-cc7417ad29ee": {"__data__": {"id_": "960628a2-2413-477f-8d23-cc7417ad29ee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "498631a6-1f34-452e-956e-e03fa8b2aaa9", "node_type": null, "metadata": {}, "hash": "2264438c5d3d4aa315499f5e1e0fa66cd64caeda0ce187338000a6230d8b793e"}, "3": {"node_id": "099065a1-80cd-4559-978a-8e982354fe2d", "node_type": null, "metadata": {}, "hash": "b614ac1ffc8e721178d4fca5ef29199d858f22fc141d158f96814991dba25ce4"}}, "hash": "619cc83114edb8459d090f4cb5e020c110d1b4fc2ecaa9d26f8f1b472ee3d6dd", "text": "html#virTypedParameterPtr)|\nparams  \nint| nparams  \n      \n    \n    }\n    \n\n### `virDomainStatsRecordPtr`\u00c2\u00b6\n\n    \n    \n    typedef virDomainStatsRecord * virDomainStatsRecordPtr;\n\n### `virDomainStatsTypes`\u00c2\u00b6\n\n    \n    \n    enum virDomainStatsTypes {\n    \n\nVIR_DOMAIN_STATS_STATE|  = | 1 (0x1; 1 << 0)|\n\nreturn domain state  \n  \n---|---|---|---  \nVIR_DOMAIN_STATS_CPU_TOTAL|  = | 2 (0x2; 1 << 1)|\n\nreturn domain CPU info  \n  \nVIR_DOMAIN_STATS_BALLOON|  = | 4 (0x4; 1 << 2)|\n\nreturn domain balloon info  \n  \nVIR_DOMAIN_STATS_VCPU|  = | 8 (0x8; 1 << 3)|\n\nreturn domain virtual CPU info  \n  \nVIR_DOMAIN_STATS_INTERFACE|  = | 16 (0x10; 1 << 4)|\n\nreturn domain interfaces info  \n  \nVIR_DOMAIN_STATS_BLOCK|  = | 32 (0x20; 1 << 5)|\n\nreturn domain block info  \n  \nVIR_DOMAIN_STATS_PERF|  = | 64 (0x40; 1 << 6)|\n\nreturn domain perf event info  \n  \nVIR_DOMAIN_STATS_IOTHREAD|  = | 128 (0x80; 1 << 7)|\n\nreturn iothread poll info  \n  \nVIR_DOMAIN_STATS_MEMORY|  = | 256 (0x100; 1 << 8)|\n\nreturn domain memory info  \n  \nVIR_DOMAIN_STATS_DIRTYRATE|  = | 512 (0x200;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "099065a1-80cd-4559-978a-8e982354fe2d": {"__data__": {"id_": "099065a1-80cd-4559-978a-8e982354fe2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "960628a2-2413-477f-8d23-cc7417ad29ee", "node_type": null, "metadata": {}, "hash": "619cc83114edb8459d090f4cb5e020c110d1b4fc2ecaa9d26f8f1b472ee3d6dd"}, "3": {"node_id": "35f1ea2a-14fb-4464-959f-765241651620", "node_type": null, "metadata": {}, "hash": "8a36d359085d151f082dfe059b48bd27f59c5bb7e875b0f6b16ddae253320810"}}, "hash": "b614ac1ffc8e721178d4fca5ef29199d858f22fc141d158f96814991dba25ce4", "text": "1 << 9)|\n\nreturn domain dirty rate info  \n  \nVIR_DOMAIN_STATS_VM|  = | 1024 (0x400; 1 << 10)|\n\nreturn vm info  \n      \n    \n    }\n    \n\n### `virDomainUndefineFlagsValues`\u00c2\u00b6\n\n    \n    \n    enum virDomainUndefineFlagsValues {\n    \n\nVIR_DOMAIN_UNDEFINE_MANAGED_SAVE|  = | 1 (0x1; 1 << 0)|\n\nAlso remove any managed save  \n  \n---|---|---|---  \nVIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA|  = | 2 (0x2; 1 << 1)|\n\nIf last use of domain, then also remove any snapshot metadata  \n  \nVIR_DOMAIN_UNDEFINE_NVRAM|  = | 4 (0x4; 1 << 2)|\n\nAlso remove any nvram file  \n  \nVIR_DOMAIN_UNDEFINE_KEEP_NVRAM|  = | 8 (0x8; 1 << 3)|\n\nKeep nvram file  \n  \nVIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA|  = | 16 (0x10; 1 << 4)|\n\nIf last use of domain, then also remove any checkpoint metadata  \n  \nVIR_DOMAIN_UNDEFINE_TPM|  = | 32 (0x20; 1 << 5)|\n\nAlso remove any TPM state  \n  \nVIR_DOMAIN_UNDEFINE_KEEP_TPM|  = | 64 (0x40; 1 << 6)|\n\nKeep TPM state Future undefine control flags should come here.  \n      \n    \n    }\n    \n\n### `virDomainVcpuFlags`\u00c2\u00b6\n\nFlags for controlling virtual CPU hot-plugging.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "35f1ea2a-14fb-4464-959f-765241651620": {"__data__": {"id_": "35f1ea2a-14fb-4464-959f-765241651620", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "099065a1-80cd-4559-978a-8e982354fe2d", "node_type": null, "metadata": {}, "hash": "b614ac1ffc8e721178d4fca5ef29199d858f22fc141d158f96814991dba25ce4"}, "3": {"node_id": "fe733a9f-4a17-4d69-8af0-ba704695cb04", "node_type": null, "metadata": {}, "hash": "20c664aa83bcdc86df621e655ab98cb8c0786e8ffbfa6a26db56f63cf5cbce52"}}, "hash": "8a36d359085d151f082dfe059b48bd27f59c5bb7e875b0f6b16ddae253320810", "text": "enum virDomainVcpuFlags {\n    \n\nVIR_DOMAIN_VCPU_CONFIG|  = | VIR_DOMAIN_AFFECT_CONFIG|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \n---|---|---|---  \nVIR_DOMAIN_VCPU_CURRENT|  = | VIR_DOMAIN_AFFECT_CURRENT|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_VCPU_LIVE|  = | VIR_DOMAIN_AFFECT_LIVE|\n\nSee [virDomainModificationImpact](libvirt-libvirt-\ndomain.html#virDomainModificationImpact)  \n  \nVIR_DOMAIN_VCPU_MAXIMUM|  = | 4 (0x4; 1 << 2)|\n\nMax rather than current count  \n  \nVIR_DOMAIN_VCPU_GUEST|  = | 8 (0x8; 1 << 3)|\n\nModify state of the cpu in the guest  \n  \nVIR_DOMAIN_VCPU_HOTPLUGGABLE|  = | 16 (0x10; 1 << 4)|\n\nMake vcpus added hot(un)pluggable  \n      \n    \n    }\n    \n\n### `virDomainXMLFlags`\u00c2\u00b6\n\nFlags available for [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)\n\n    \n    \n    enum virDomainXMLFlags {\n    \n\nVIR_DOMAIN_XML_SECURE|  = | 1 (0x1; 1 << 0)|\n\ndump security sensitive information too  \n  \n---|---|---|---  \nVIR_DOMAIN_XML_INACTIVE|  = | 2 (0x2;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fe733a9f-4a17-4d69-8af0-ba704695cb04": {"__data__": {"id_": "fe733a9f-4a17-4d69-8af0-ba704695cb04", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "35f1ea2a-14fb-4464-959f-765241651620", "node_type": null, "metadata": {}, "hash": "8a36d359085d151f082dfe059b48bd27f59c5bb7e875b0f6b16ddae253320810"}, "3": {"node_id": "e28d0965-a881-403e-9c35-c6f06594531a", "node_type": null, "metadata": {}, "hash": "8e7e2e5a4bdcac07b033e9f1e31f6341a08164c8532e6fe41ced7115f28ee821"}}, "hash": "20c664aa83bcdc86df621e655ab98cb8c0786e8ffbfa6a26db56f63cf5cbce52", "text": "1 << 1)|\n\ndump inactive domain information  \n  \nVIR_DOMAIN_XML_UPDATE_CPU|  = | 4 (0x4; 1 << 2)|\n\nupdate guest CPU requirements according to host CPU  \n  \nVIR_DOMAIN_XML_MIGRATABLE|  = | 8 (0x8; 1 << 3)|\n\ndump XML suitable for migration  \n      \n    \n    }\n    \n\n### `virKeycodeSet`\u00c2\u00b6\n\nEnum to specify which keycode mapping is in use for\n[virDomainSendKey](libvirt-libvirt-domain.html#virDomainSendKey)().\n\n    \n    \n    enum virKeycodeSet {\n    \n\nVIR_KEYCODE_SET_LINUX|  = | 0 (0x0)  \n---|---|---  \nVIR_KEYCODE_SET_XT|  = | 1 (0x1)  \nVIR_KEYCODE_SET_ATSET1|  = | 2 (0x2)  \nVIR_KEYCODE_SET_ATSET2|  = | 3 (0x3)  \nVIR_KEYCODE_SET_ATSET3|  = | 4 (0x4)  \nVIR_KEYCODE_SET_OSX|  = | 5 (0x5)  \nVIR_KEYCODE_SET_XT_KBD|  = | 6 (0x6)  \nVIR_KEYCODE_SET_USB|  = | 7 (0x7)  \nVIR_KEYCODE_SET_WIN32|  = | 8 (0x8)  \nVIR_KEYCODE_SET_QNUM|  = | 9 (0x9)  \nVIR_KEYCODE_SET_LAST|  = | 10 (0xa)|\n\nNB: this enum value will increase over time as new keycode sets are added to\nthe libvirt API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e28d0965-a881-403e-9c35-c6f06594531a": {"__data__": {"id_": "e28d0965-a881-403e-9c35-c6f06594531a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fe733a9f-4a17-4d69-8af0-ba704695cb04", "node_type": null, "metadata": {}, "hash": "20c664aa83bcdc86df621e655ab98cb8c0786e8ffbfa6a26db56f63cf5cbce52"}, "3": {"node_id": "b359862b-a811-4d64-bf7b-90664d5bee25", "node_type": null, "metadata": {}, "hash": "ad1d39714e92408f56ec54cc453b79336b646fdbba5c3d259bb7bb74445cf171"}}, "hash": "8e7e2e5a4bdcac07b033e9f1e31f6341a08164c8532e6fe41ced7115f28ee821", "text": "It reflects the last keycode set supported by this version of\nthe libvirt API.  \n      \n    \n    }\n    \n\n### `virMemoryParameter`\u00c2\u00b6\n\n    \n    \n    struct virMemoryParameter {\n    \n\nchar field[VIR_TYPED_PARAM_FIELD_LENGTH]| field|\n\nparameter name  \n  \n---|---|---  \nint| type|\n\nparameter type, [virTypedParameterType](libvirt-libvirt-\ncommon.html#virTypedParameterType)  \n  \nunion {  \n| int| i|\n\ntype is INT  \n  \n---|---|---  \nunsigned int| ui|\n\ntype is UINT  \n  \nlong long int| l|\n\ntype is LLONG  \n  \nunsigned long long int| ul|\n\ntype is ULLONG  \n  \ndouble| d|\n\ntype is DOUBLE  \n  \nchar| b|\n\ntype is BOOLEAN  \n  \nchar *| s|\n\ntype is STRING, may not be NULL  \n  \n}| value|\n\nparameter value\n\n|  \n      \n    \n    }\n    \n\n### `virMemoryParameterPtr`\u00c2\u00b6\n\n    \n    \n    typedef virMemoryParameter * virMemoryParameterPtr;\n\na [virMemoryParameterPtr](libvirt-libvirt-domain.html#virMemoryParameterPtr)\nis a pointer to a [virMemoryParameter](libvirt-libvirt-\ndomain.html#virMemoryParameter) structure. Provided for backwards\ncompatibility; [virTypedParameterPtr](libvirt-libvirt-\ncommon.html#virTypedParameterPtr) is the preferred alias.\n\n### `virMemoryParameterType`\u00c2\u00b6\n\nA memory parameter field type. Provided for backwards compatibility;\n[virTypedParameterType](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b359862b-a811-4d64-bf7b-90664d5bee25": {"__data__": {"id_": "b359862b-a811-4d64-bf7b-90664d5bee25", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e28d0965-a881-403e-9c35-c6f06594531a", "node_type": null, "metadata": {}, "hash": "8e7e2e5a4bdcac07b033e9f1e31f6341a08164c8532e6fe41ced7115f28ee821"}, "3": {"node_id": "ded37917-dd74-4324-89ad-9a6e5f5f4f7a", "node_type": null, "metadata": {}, "hash": "7dd6e940634b2cb3487ca4d346f5ebade5f9bd339ef8384ed3db5186541e71ef"}}, "hash": "ad1d39714e92408f56ec54cc453b79336b646fdbba5c3d259bb7bb74445cf171", "text": "[virTypedParameterType](libvirt-libvirt-common.html#virTypedParameterType) is\nthe preferred enum\n\n    \n    \n    enum virMemoryParameterType {\n    \n\nVIR_DOMAIN_MEMORY_PARAM_BOOLEAN|  = | VIR_TYPED_PARAM_BOOLEAN  \n---|---|---  \nVIR_DOMAIN_MEMORY_PARAM_DOUBLE|  = | VIR_TYPED_PARAM_DOUBLE  \nVIR_DOMAIN_MEMORY_PARAM_INT|  = | VIR_TYPED_PARAM_INT  \nVIR_DOMAIN_MEMORY_PARAM_LLONG|  = | VIR_TYPED_PARAM_LLONG  \nVIR_DOMAIN_MEMORY_PARAM_UINT|  = | VIR_TYPED_PARAM_UINT  \nVIR_DOMAIN_MEMORY_PARAM_ULLONG|  = | VIR_TYPED_PARAM_ULLONG  \n      \n    \n    }\n    \n\n### `virSchedParameter`\u00c2\u00b6\n\n    \n    \n    struct virSchedParameter {\n    \n\nchar field[VIR_TYPED_PARAM_FIELD_LENGTH]| field|\n\nparameter name  \n  \n---|---|---  \nint| type|\n\nparameter type, [virTypedParameterType](libvirt-libvirt-\ncommon.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ded37917-dd74-4324-89ad-9a6e5f5f4f7a": {"__data__": {"id_": "ded37917-dd74-4324-89ad-9a6e5f5f4f7a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b359862b-a811-4d64-bf7b-90664d5bee25", "node_type": null, "metadata": {}, "hash": "ad1d39714e92408f56ec54cc453b79336b646fdbba5c3d259bb7bb74445cf171"}, "3": {"node_id": "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff", "node_type": null, "metadata": {}, "hash": "4dad5baadb4cd3468b7035231ac29fac4df8547f2b154c568553959876862e79"}}, "hash": "7dd6e940634b2cb3487ca4d346f5ebade5f9bd339ef8384ed3db5186541e71ef", "text": "[virTypedParameterType](libvirt-libvirt-\ncommon.html#virTypedParameterType)  \n  \nunion {  \n| int| i|\n\ntype is INT  \n  \n---|---|---  \nunsigned int| ui|\n\ntype is UINT  \n  \nlong long int| l|\n\ntype is LLONG  \n  \nunsigned long long int| ul|\n\ntype is ULLONG  \n  \ndouble| d|\n\ntype is DOUBLE  \n  \nchar| b|\n\ntype is BOOLEAN  \n  \nchar *| s|\n\ntype is STRING, may not be NULL  \n  \n}| value|\n\nparameter value\n\n|  \n      \n    \n    }\n    \n\n### `virSchedParameterPtr`\u00c2\u00b6\n\n    \n    \n    typedef virSchedParameter * virSchedParameterPtr;\n\na [virSchedParameterPtr](libvirt-libvirt-domain.html#virSchedParameterPtr) is\na pointer to a [virSchedParameter](libvirt-libvirt-\ndomain.html#virSchedParameter) structure. Provided for backwards\ncompatibility; [virTypedParameterPtr](libvirt-libvirt-\ncommon.html#virTypedParameterPtr) is the preferred alias since 0.9.2.\n\n### `virSchedParameterType`\u00c2\u00b6\n\nA scheduler parameter field type. Provided for backwards compatibility;\n[virTypedParameterType](libvirt-libvirt-common.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff": {"__data__": {"id_": "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ded37917-dd74-4324-89ad-9a6e5f5f4f7a", "node_type": null, "metadata": {}, "hash": "7dd6e940634b2cb3487ca4d346f5ebade5f9bd339ef8384ed3db5186541e71ef"}, "3": {"node_id": "d8fa0a7a-b77c-4d99-b85c-3e306195775c", "node_type": null, "metadata": {}, "hash": "41594473ab76468c83fdf7c813dd9124581289459c4701c84b3b9fb8391cca20"}}, "hash": "4dad5baadb4cd3468b7035231ac29fac4df8547f2b154c568553959876862e79", "text": "[virTypedParameterType](libvirt-libvirt-common.html#virTypedParameterType) is\nthe preferred enum\n\n    \n    \n    enum virSchedParameterType {\n    \n\nVIR_DOMAIN_SCHED_FIELD_BOOLEAN|  = | VIR_TYPED_PARAM_BOOLEAN  \n---|---|---  \nVIR_DOMAIN_SCHED_FIELD_DOUBLE|  = | VIR_TYPED_PARAM_DOUBLE  \nVIR_DOMAIN_SCHED_FIELD_INT|  = | VIR_TYPED_PARAM_INT  \nVIR_DOMAIN_SCHED_FIELD_LLONG|  = | VIR_TYPED_PARAM_LLONG  \nVIR_DOMAIN_SCHED_FIELD_UINT|  = | VIR_TYPED_PARAM_UINT  \nVIR_DOMAIN_SCHED_FIELD_ULLONG|  = | VIR_TYPED_PARAM_ULLONG  \n      \n    \n    }\n    \n\n### `virVcpuHostCpuState`\u00c2\u00b6\n\n    \n    \n    enum virVcpuHostCpuState {\n    \n\nVIR_VCPU_INFO_CPU_UNAVAILABLE|  = | -2 (-0x2)|\n\nthe hypervisor does not expose real CPU information  \n  \n---|---|---|---  \nVIR_VCPU_INFO_CPU_OFFLINE|  = | -1 (-0x1)|\n\nthe vCPU is offline  \n      \n    \n    }\n    \n\n### `virVcpuInfo`\u00c2\u00b6\n\n    \n    \n    struct virVcpuInfo {\n    \n\nunsigned int| number|\n\nvirtual CPU number  \n  \n---|---|---  \nint| state|\n\nvalue from [virVcpuState](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d8fa0a7a-b77c-4d99-b85c-3e306195775c": {"__data__": {"id_": "d8fa0a7a-b77c-4d99-b85c-3e306195775c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff", "node_type": null, "metadata": {}, "hash": "4dad5baadb4cd3468b7035231ac29fac4df8547f2b154c568553959876862e79"}, "3": {"node_id": "cfa151c9-d76d-4e4c-83d0-863705425860", "node_type": null, "metadata": {}, "hash": "b9c17a4f5c7c43f36de4240979821f909ebf86f6805c37632d4aff693539ad6b"}}, "hash": "41594473ab76468c83fdf7c813dd9124581289459c4701c84b3b9fb8391cca20", "text": "html#virVcpuState)  \n  \nunsigned long long| cpuTime|\n\nCPU time used, in nanoseconds  \n  \nint| cpu|\n\nreal CPU number, or one of the values from [virVcpuHostCpuState](libvirt-\nlibvirt-domain.html#virVcpuHostCpuState)  \n      \n    \n    }\n    \n\n### `virVcpuInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virVcpuInfo * virVcpuInfoPtr;\n\n### `virVcpuState`\u00c2\u00b6\n\nstructure for information about a virtual CPU in a domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cfa151c9-d76d-4e4c-83d0-863705425860": {"__data__": {"id_": "cfa151c9-d76d-4e4c-83d0-863705425860", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d8fa0a7a-b77c-4d99-b85c-3e306195775c", "node_type": null, "metadata": {}, "hash": "41594473ab76468c83fdf7c813dd9124581289459c4701c84b3b9fb8391cca20"}, "3": {"node_id": "84827a58-64e3-4d48-850a-71263795d798", "node_type": null, "metadata": {}, "hash": "c9de9e6dba2d74bd1b72140e283c7a2c2478fab4afe98527605b08c371effb59"}}, "hash": "b9c17a4f5c7c43f36de4240979821f909ebf86f6805c37632d4aff693539ad6b", "text": "enum virVcpuState {\n    \n\nVIR_VCPU_OFFLINE|  = | 0 (0x0)|\n\nthe virtual CPU is offline  \n  \n---|---|---|---  \nVIR_VCPU_RUNNING|  = | 1 (0x1)|\n\nthe virtual CPU is running  \n  \nVIR_VCPU_BLOCKED|  = | 2 (0x2)|\n\nthe virtual CPU is blocked on resource  \n  \nVIR_VCPU_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### Functions\u00c2\u00b6\n\n### `virConnectDomainEventAgentLifecycleCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventAgentLifecycleCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t int state,\n    \t\t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when libvirt detects a change in the state of a guest\nagent.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nstate\n\n    new state of the guest agent, one of [virConnectDomainEventAgentLifecycleState](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "84827a58-64e3-4d48-850a-71263795d798": {"__data__": {"id_": "84827a58-64e3-4d48-850a-71263795d798", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cfa151c9-d76d-4e4c-83d0-863705425860", "node_type": null, "metadata": {}, "hash": "b9c17a4f5c7c43f36de4240979821f909ebf86f6805c37632d4aff693539ad6b"}, "3": {"node_id": "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c", "node_type": null, "metadata": {}, "hash": "c701a9aa5a71476bc24c5602c808ca89a290cde0155322dc528ef41b3e017ecb"}}, "hash": "c9de9e6dba2d74bd1b72140e283c7a2c2478fab4afe98527605b08c371effb59", "text": "html#virConnectDomainEventAgentLifecycleState)\nreason\n\n    reason for state change; one of [virConnectDomainEventAgentLifecycleReason](libvirt-libvirt-domain.html#virConnectDomainEventAgentLifecycleReason)\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventBalloonChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventBalloonChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t unsigned long long actual,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nactual\n\n    the new balloon level measured in kibibytes(blocks of 1024 bytes)\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventBlockJobCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventBlockJobCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t const char * disk,\n    \t\t\t\t\t\t int type,\n    \t\t\t\t\t\t int status,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c": {"__data__": {"id_": "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "84827a58-64e3-4d48-850a-71263795d798", "node_type": null, "metadata": {}, "hash": "c9de9e6dba2d74bd1b72140e283c7a2c2478fab4afe98527605b08c371effb59"}, "3": {"node_id": "243c37ad-3113-4a40-9db5-d3a7a55324b7", "node_type": null, "metadata": {}, "hash": "0e65c3b207158403c646d6626345e97ffe97fef8c5f908b2f036c7cd77e8a29f"}}, "hash": "c701a9aa5a71476bc24c5602c808ca89a290cde0155322dc528ef41b3e017ecb", "text": "int status,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThe string returned for `disk` can be used in any of the libvirt API that\noperate on a particular disk of the domain, and depends on what event type was\nregistered with [virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)(). If the callback was\nregistered using the older type of [VIR_DOMAIN_EVENT_ID_BLOCK_JOB](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_EVENT_ID_BLOCK_JOB), then `disk` contains the\nabsolute file name of the host resource for the active layer of the disk;\nhowever, this name is unstable (pivoting via block copy or active block commit\nwill change which file is active, giving a different name for the two events\nassociated with the same job) and cannot be relied on if the active layer is\nassociated with a network resource. If the callback was registered using the\nnewer type of [VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2), then `disk` will contain the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"vda\").", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "243c37ad-3113-4a40-9db5-d3a7a55324b7": {"__data__": {"id_": "243c37ad-3113-4a40-9db5-d3a7a55324b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c", "node_type": null, "metadata": {}, "hash": "c701a9aa5a71476bc24c5602c808ca89a290cde0155322dc528ef41b3e017ecb"}, "3": {"node_id": "ca13ba7d-bb73-4917-ab27-465cee2a6a2d", "node_type": null, "metadata": {}, "hash": "a3292e67ca7a02a6280f5f503010c67e3fb8841dc66c69add025db1dfaa9153c"}}, "hash": "0e65c3b207158403c646d6626345e97ffe97fef8c5f908b2f036c7cd77e8a29f", "text": "conn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndisk\n\n    name associated with the affected disk (filename or target device, depending on how the callback was registered)\ntype\n\n    type of block job ([virDomainBlockJobType](libvirt-libvirt-domain.html#virDomainBlockJobType))\nstatus\n\n    status of the operation ([virConnectDomainEventBlockJobStatus](libvirt-libvirt-domain.html#virConnectDomainEventBlockJobStatus))\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventBlockThresholdCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventBlockThresholdCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * dev,\n    \t\t\t\t\t\t\t const char * path,\n    \t\t\t\t\t\t\t unsigned long long threshold,\n    \t\t\t\t\t\t\t unsigned long long excess,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThe callback occurs when the hypervisor detects that the given storage element\nwas written beyond the point specified by `threshold`. The excess data size\nwritten beyond `threshold` is reported by `excess` (if supported by the\nhypervisor, 0 otherwise). The event is useful for thin-provisioned storage.\n\nThe threshold size can be set via the [virDomainSetBlockThreshold](libvirt-\nlibvirt-domain.html#virDomainSetBlockThreshold) API.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ca13ba7d-bb73-4917-ab27-465cee2a6a2d": {"__data__": {"id_": "ca13ba7d-bb73-4917-ab27-465cee2a6a2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "243c37ad-3113-4a40-9db5-d3a7a55324b7", "node_type": null, "metadata": {}, "hash": "0e65c3b207158403c646d6626345e97ffe97fef8c5f908b2f036c7cd77e8a29f"}, "3": {"node_id": "57bdade4-f52c-4db8-872c-efb0e11f6880", "node_type": null, "metadata": {}, "hash": "8f009201e4a5643034cfafd8d4d33964ff6d698b6be0e125fb6925ccdb11878d"}}, "hash": "a3292e67ca7a02a6280f5f503010c67e3fb8841dc66c69add025db1dfaa9153c", "text": "html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndev\n\n    name associated with the affected disk or storage backing chain element\npath\n\n    for local storage, the path of the backing chain element\nthreshold\n\n    threshold offset in bytes\nexcess\n\n    number of bytes written beyond the threshold\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventCallback`\u00c2\u00b6\n\n    \n    \n    typedef int\t(*virConnectDomainEventCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t int event,\n    \t\t\t\t\t int detail,\n    \t\t\t\t\t void * opaque)\n    \n\nA callback function to be registered, and called when a domain event occurs\n\nconn\n\n    [virConnect](libvirt-libvirt-host.html#virConnect) connection\ndom\n\n    The domain on which the event occurred\nevent\n\n    The specific [virDomainEventType](libvirt-libvirt-domain.html#virDomainEventType) which occurred\ndetail\n\n    event specific detail information (virDomainEvent*DetailType)\nopaque\n\n    opaque user data\nReturns\n\n    0 (the return value is currently ignored)\n  \n\n### `virConnectDomainEventDeregister`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectDomainEventDeregister\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virConnectDomainEventCallback](libvirt-libvirt-domain.html#virConnectDomainEventCallback) cb)\n\nRemoves a callback previously registered with the\n[virConnectDomainEventRegister](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegister)() function.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "57bdade4-f52c-4db8-872c-efb0e11f6880": {"__data__": {"id_": "57bdade4-f52c-4db8-872c-efb0e11f6880", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ca13ba7d-bb73-4917-ab27-465cee2a6a2d", "node_type": null, "metadata": {}, "hash": "a3292e67ca7a02a6280f5f503010c67e3fb8841dc66c69add025db1dfaa9153c"}, "3": {"node_id": "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22", "node_type": null, "metadata": {}, "hash": "1668a156ae00c08a3aa31061d2efd2e7b193e03da0998b8fa833f1adc42c8376"}}, "hash": "8f009201e4a5643034cfafd8d4d33964ff6d698b6be0e125fb6925ccdb11878d", "text": "html#virConnectDomainEventRegister)() function.\n\nUse of this method is no longer recommended. Instead applications should try\n[virConnectDomainEventDeregisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventDeregisterAny)() which has a more flexible\nAPI contract\n\nconn\n\n    pointer to the connection\ncb\n\n    callback to the function handling domain events\nReturns\n\n    0 on success, -1 on failure. Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectDomainEventDeregisterAny`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectDomainEventDeregisterAny\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t int callbackID)\n\nRemoves an event callback. The callbackID parameter should be the value\nobtained from a previous [virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)() method.\n\nconn\n\n    pointer to the connection\ncallbackID\n\n    the callback identifier\nReturns\n\n    0 on success, -1 on failure. Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22": {"__data__": {"id_": "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "57bdade4-f52c-4db8-872c-efb0e11f6880", "node_type": null, "metadata": {}, "hash": "8f009201e4a5643034cfafd8d4d33964ff6d698b6be0e125fb6925ccdb11878d"}, "3": {"node_id": "057c3646-fb64-4d53-bf47-1ff6f7ee59ae", "node_type": null, "metadata": {}, "hash": "16aa270211c264f65c5877e4e3b019b6514288329e41869c13416b321f57d231"}}, "hash": "1668a156ae00c08a3aa31061d2efd2e7b193e03da0998b8fa833f1adc42c8376", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectDomainEventDeviceAddedCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventDeviceAddedCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when a device is added to the domain.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_DEVICE_ADDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_ADDED) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndevAlias\n\n    device alias\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventDeviceRemovalFailedCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventDeviceRemovalFailedCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when it's certain that removal of a device failed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "057c3646-fb64-4d53-bf47-1ff6f7ee59ae": {"__data__": {"id_": "057c3646-fb64-4d53-bf47-1ff6f7ee59ae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22", "node_type": null, "metadata": {}, "hash": "1668a156ae00c08a3aa31061d2efd2e7b193e03da0998b8fa833f1adc42c8376"}, "3": {"node_id": "1bca850e-d2fc-4a3b-af2b-7946e576a5bb", "node_type": null, "metadata": {}, "hash": "f52bebfceb36dbc9187ad9fb903c77c00a62a4734efbfa58052a12b1ecad3978"}}, "hash": "16aa270211c264f65c5877e4e3b019b6514288329e41869c13416b321f57d231", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)().\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndevAlias\n\n    device alias\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventDeviceRemovedCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventDeviceRemovedCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when a device is removed from the domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bca850e-d2fc-4a3b-af2b-7946e576a5bb": {"__data__": {"id_": "1bca850e-d2fc-4a3b-af2b-7946e576a5bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "057c3646-fb64-4d53-bf47-1ff6f7ee59ae", "node_type": null, "metadata": {}, "hash": "16aa270211c264f65c5877e4e3b019b6514288329e41869c13416b321f57d231"}, "3": {"node_id": "c5b97557-eaf4-448e-8add-41bb2ebda531", "node_type": null, "metadata": {}, "hash": "2a98f102e81237f29fe520d990d4787ec7c6ccffeba258c0c67f3d396b346cc8"}}, "hash": "f52bebfceb36dbc9187ad9fb903c77c00a62a4734efbfa58052a12b1ecad3978", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndevAlias\n\n    device alias\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventDiskChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventDiskChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t const char * oldSrcPath,\n    \t\t\t\t\t\t const char * newSrcPath,\n    \t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when disk gets changed. However, not all `reason` will\ncause both `oldSrcPath` and `newSrcPath` to be non-NULL. Please see\n[virConnectDomainEventDiskChangeReason](libvirt-libvirt-\ndomain.html#virConnectDomainEventDiskChangeReason) for more details.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c5b97557-eaf4-448e-8add-41bb2ebda531": {"__data__": {"id_": "c5b97557-eaf4-448e-8add-41bb2ebda531", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1bca850e-d2fc-4a3b-af2b-7946e576a5bb", "node_type": null, "metadata": {}, "hash": "f52bebfceb36dbc9187ad9fb903c77c00a62a4734efbfa58052a12b1ecad3978"}, "3": {"node_id": "1bce59cb-fa8d-44a1-8c82-686707d2cc32", "node_type": null, "metadata": {}, "hash": "d425d6ea66fafe57ceb2fa1a18b46015a490ded3e2a311cbe50735b1629596d3"}}, "hash": "2a98f102e81237f29fe520d990d4787ec7c6ccffeba258c0c67f3d396b346cc8", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_DISK_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DISK_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\noldSrcPath\n\n    old source path\nnewSrcPath\n\n    new source path\ndevAlias\n\n    device alias name\nreason\n\n    reason why this callback was called; any of [virConnectDomainEventDiskChangeReason](libvirt-libvirt-domain.html#virConnectDomainEventDiskChangeReason)\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventGenericCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventGenericCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t void * opaque)\n    \n\nA generic domain event callback handler, for use with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)(). Specific events usually have\na customization with extra parameters, often with `opaque` being passed in a\ndifferent parameter position; use [VIR_DOMAIN_EVENT_CALLBACK](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_CALLBACK)() when registering an appropriate\nhandler.\n\nconn\n\n    the connection pointer\ndom\n\n    the domain pointer\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventGraphicsCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventGraphicsCallback)\t([virConnectPtr](libvirt-libvirt-host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bce59cb-fa8d-44a1-8c82-686707d2cc32": {"__data__": {"id_": "1bce59cb-fa8d-44a1-8c82-686707d2cc32", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c5b97557-eaf4-448e-8add-41bb2ebda531", "node_type": null, "metadata": {}, "hash": "2a98f102e81237f29fe520d990d4787ec7c6ccffeba258c0c67f3d396b346cc8"}, "3": {"node_id": "2b322489-5c98-418c-aa59-ab6d53eaf160", "node_type": null, "metadata": {}, "hash": "511d50887e9dbb6ed3bea17372f3298d3bdc2e03c0ed9cf0c7fbd8f386cf753b"}}, "hash": "d425d6ea66fafe57ceb2fa1a18b46015a490ded3e2a311cbe50735b1629596d3", "text": "html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t int phase,\n    \t\t\t\t\t\t const [virDomainEventGraphicsAddress](libvirt-libvirt-domain.html#virDomainEventGraphicsAddress) * local,\n    \t\t\t\t\t\t const [virDomainEventGraphicsAddress](libvirt-libvirt-domain.html#virDomainEventGraphicsAddress) * remote,\n    \t\t\t\t\t\t const char * authScheme,\n    \t\t\t\t\t\t const [virDomainEventGraphicsSubject](libvirt-libvirt-domain.html#virDomainEventGraphicsSubject) * subject,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_GRAPHICS](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_GRAPHICS) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nphase\n\n    the phase of the connection ([virDomainEventGraphicsPhase](libvirt-libvirt-domain.html#virDomainEventGraphicsPhase))\nlocal\n\n    the local server address\nremote\n\n    the remote client address\nauthScheme\n\n    the authentication scheme activated\nsubject\n\n    the authenticated subject (user)\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventIOErrorCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventIOErrorCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2b322489-5c98-418c-aa59-ab6d53eaf160": {"__data__": {"id_": "2b322489-5c98-418c-aa59-ab6d53eaf160", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1bce59cb-fa8d-44a1-8c82-686707d2cc32", "node_type": null, "metadata": {}, "hash": "d425d6ea66fafe57ceb2fa1a18b46015a490ded3e2a311cbe50735b1629596d3"}, "3": {"node_id": "58148b8f-2a33-48cc-a1b9-2b18c98ca633", "node_type": null, "metadata": {}, "hash": "4e69df2fb060f0b12c24b7d13fef4f48d1e4ab06ea3138549e55afb7b86f24c4"}}, "hash": "511d50887e9dbb6ed3bea17372f3298d3bdc2e03c0ed9cf0c7fbd8f386cf753b", "text": "html#virDomainPtr) dom,\n    \t\t\t\t\t\t const char * srcPath,\n    \t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t int action,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_IO_ERROR](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_IO_ERROR) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nsrcPath\n\n    The host file on which the IO error occurred\ndevAlias\n\n    The guest device alias associated with the path\naction\n\n    action that is to be taken due to the IO error ([virDomainEventIOErrorAction](libvirt-libvirt-domain.html#virDomainEventIOErrorAction))\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventIOErrorReasonCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventIOErrorReasonCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * srcPath,\n    \t\t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t\t int action,\n    \t\t\t\t\t\t\t const char * reason,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "58148b8f-2a33-48cc-a1b9-2b18c98ca633": {"__data__": {"id_": "58148b8f-2a33-48cc-a1b9-2b18c98ca633", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2b322489-5c98-418c-aa59-ab6d53eaf160", "node_type": null, "metadata": {}, "hash": "511d50887e9dbb6ed3bea17372f3298d3bdc2e03c0ed9cf0c7fbd8f386cf753b"}, "3": {"node_id": "5214dc12-96af-4eec-9901-25774521d78b", "node_type": null, "metadata": {}, "hash": "c14d1d8aeb3fc6dac41539ca50bb9ce0aeacd3651aa5b74afd72525637fda4a8"}}, "hash": "4e69df2fb060f0b12c24b7d13fef4f48d1e4ab06ea3138549e55afb7b86f24c4", "text": "html#VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nIf the I/O error is known to be caused by an ENOSPC condition in the host\n(where resizing the disk to be larger will allow the guest to be resumed as if\nnothing happened), `reason` will be \"enospc\". Otherwise, `reason` will be \"\",\nalthough future strings may be added if determination of other error types\nbecomes possible.\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nsrcPath\n\n    The host file on which the IO error occurred\ndevAlias\n\n    The guest device alias associated with the path\naction\n\n    action that is to be taken due to the IO error ([virDomainEventIOErrorAction](libvirt-libvirt-domain.html#virDomainEventIOErrorAction))\nreason\n\n    the cause of the IO error\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventJobCompletedCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventJobCompletedCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t\t\t int nparams,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when a job (such as migration or backup) running on the\ndomain is completed.\n\nThe params array will contain statistics of the just completed job as\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats) would\nreturn. The callback must not free `params` (the array will be freed once the\ncallback finishes).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5214dc12-96af-4eec-9901-25774521d78b": {"__data__": {"id_": "5214dc12-96af-4eec-9901-25774521d78b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "58148b8f-2a33-48cc-a1b9-2b18c98ca633", "node_type": null, "metadata": {}, "hash": "4e69df2fb060f0b12c24b7d13fef4f48d1e4ab06ea3138549e55afb7b86f24c4"}, "3": {"node_id": "89853cb1-f9ee-4d28-9729-b16f37118e16", "node_type": null, "metadata": {}, "hash": "72ba0bc74b3e1f233147afd65f2ecc5cb343ba49919d97b494886643e40f54bf"}}, "hash": "c14d1d8aeb3fc6dac41539ca50bb9ce0aeacd3651aa5b74afd72525637fda4a8", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)().\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nparams\n\n    job statistics stored as an array of [virTypedParameter](libvirt-libvirt-common.html#virTypedParameter)\nnparams\n\n    size of the params array\nopaque\n\n    application specific data\n  \n\n### `virConnectDomainEventMemoryDeviceSizeChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventMemoryDeviceSizeChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t const char * alias,\n    \t\t\t\t\t\t\t unsigned long long size,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThe callback occurs when the guest acknowledges request to change size of\nmemory device (so far only virtio-mem model supports this). The `size` then\nreflects the new amount of guest visible memory (in kibibytes).\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "89853cb1-f9ee-4d28-9729-b16f37118e16": {"__data__": {"id_": "89853cb1-f9ee-4d28-9729-b16f37118e16", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5214dc12-96af-4eec-9901-25774521d78b", "node_type": null, "metadata": {}, "hash": "c14d1d8aeb3fc6dac41539ca50bb9ce0aeacd3651aa5b74afd72525637fda4a8"}, "3": {"node_id": "590e344c-14cb-406c-8294-75b5c71b2a7a", "node_type": null, "metadata": {}, "hash": "a66668145bba41b35675357d3dba74d3b953510f6173b6d145ad6421bc2e8f23"}}, "hash": "72ba0bc74b3e1f233147afd65f2ecc5cb343ba49919d97b494886643e40f54bf", "text": "conn\n\n    connection object\ndom\n\n    domain on which the event occurred\nalias\n\n    memory device alias\nsize\n\n    new current size of memory device (in KiB)\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventMemoryFailureCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventMemoryFailureCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t int recipient,\n    \t\t\t\t\t\t\t int action,\n    \t\t\t\t\t\t\t unsigned int flags,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThe callback occurs when the hypervisor handles the hardware memory corrupted\nevent.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "590e344c-14cb-406c-8294-75b5c71b2a7a": {"__data__": {"id_": "590e344c-14cb-406c-8294-75b5c71b2a7a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "89853cb1-f9ee-4d28-9729-b16f37118e16", "node_type": null, "metadata": {}, "hash": "72ba0bc74b3e1f233147afd65f2ecc5cb343ba49919d97b494886643e40f54bf"}, "3": {"node_id": "662ddfb4-80ef-4961-9925-8a3af6d6d8e5", "node_type": null, "metadata": {}, "hash": "7839ba9debfe00caad718092850ef94c13f65669f384772fe13964c4598b3b26"}}, "hash": "a66668145bba41b35675357d3dba74d3b953510f6173b6d145ad6421bc2e8f23", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_MEMORY_FAILURE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_MEMORY_FAILURE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nrecipient\n\n    the recipient of hardware memory failure ([virDomainMemoryFailureRecipientType](libvirt-libvirt-domain.html#virDomainMemoryFailureRecipientType))\naction\n\n    the action of hardware memory failure ([virDomainMemoryFailureActionType](libvirt-libvirt-domain.html#virDomainMemoryFailureActionType))\nflags\n\n    the flags of hardware memory failure ([virDomainMemoryFailureFlags](libvirt-libvirt-domain.html#virDomainMemoryFailureFlags))\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventMetadataChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventMetadataChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t int type,\n    \t\t\t\t\t\t\t const char * nsuri,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback is triggered when the domain XML metadata is changed\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_METADATA_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_METADATA_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "662ddfb4-80ef-4961-9925-8a3af6d6d8e5": {"__data__": {"id_": "662ddfb4-80ef-4961-9925-8a3af6d6d8e5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "590e344c-14cb-406c-8294-75b5c71b2a7a", "node_type": null, "metadata": {}, "hash": "a66668145bba41b35675357d3dba74d3b953510f6173b6d145ad6421bc2e8f23"}, "3": {"node_id": "0a0ae59c-d49d-4310-9b59-26ca334f467f", "node_type": null, "metadata": {}, "hash": "283853a3394df9fa94b34936502c4c710cfd0c92c552ed53111c3fb6f93a4096"}}, "hash": "7839ba9debfe00caad718092850ef94c13f65669f384772fe13964c4598b3b26", "text": "conn\n\n    connection object\ndom\n\n    domain on which the event occurred\ntype\n\n    a value from virDomainMetadataTypea\nnsuri\n\n    XML namespace URI\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventMigrationIterationCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventMigrationIterationCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t int iteration,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs during live migration when a new iteration over domain's\nmemory starts. The `iteration` value is increased by one every time a new\niteration is started to transfer memory pages dirtied since the last\niteration.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0a0ae59c-d49d-4310-9b59-26ca334f467f": {"__data__": {"id_": "0a0ae59c-d49d-4310-9b59-26ca334f467f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "662ddfb4-80ef-4961-9925-8a3af6d6d8e5", "node_type": null, "metadata": {}, "hash": "7839ba9debfe00caad718092850ef94c13f65669f384772fe13964c4598b3b26"}, "3": {"node_id": "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767", "node_type": null, "metadata": {}, "hash": "4eaf45f47ee20d332aa9e464fbd1eff2c6cfb2eb2db2465ee97fc883c96e9a15"}}, "hash": "283853a3394df9fa94b34936502c4c710cfd0c92c552ed53111c3fb6f93a4096", "text": "conn\n\n    connection object\ndom\n\n    domain on which the event occurred\niteration\n\n    current iteration over domain's memory\nopaque\n\n    application specific data\n  \n\n### `virConnectDomainEventPMSuspendCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventPMSuspendCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when the guest is suspended.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_PMSUSPEND](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_PMSUSPEND) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nreason\n\n    reason why the callback was called, unused currently, always passes 0\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventPMSuspendDiskCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventPMSuspendDiskCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when the guest is suspended to disk.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767": {"__data__": {"id_": "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0a0ae59c-d49d-4310-9b59-26ca334f467f", "node_type": null, "metadata": {}, "hash": "283853a3394df9fa94b34936502c4c710cfd0c92c552ed53111c3fb6f93a4096"}, "3": {"node_id": "0c996bcb-7391-40b6-974e-87f16de0d430", "node_type": null, "metadata": {}, "hash": "45f925c63325378f9dd6138399790958403ce19f559dda44ff9afd5508b5b621"}}, "hash": "4eaf45f47ee20d332aa9e464fbd1eff2c6cfb2eb2db2465ee97fc883c96e9a15", "text": "The callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nreason\n\n    reason why the callback was called, unused currently, always passes 0\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventPMWakeupCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventPMWakeupCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when the guest is woken up.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_PMWAKEUP](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_PMWAKEUP) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nreason\n\n    reason why the callback was called, unused currently, always passes 0\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventRTCChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventRTCChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0c996bcb-7391-40b6-974e-87f16de0d430": {"__data__": {"id_": "0c996bcb-7391-40b6-974e-87f16de0d430", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767", "node_type": null, "metadata": {}, "hash": "4eaf45f47ee20d332aa9e464fbd1eff2c6cfb2eb2db2465ee97fc883c96e9a15"}, "3": {"node_id": "6241709e-0424-4da0-bcab-e171420abfe4", "node_type": null, "metadata": {}, "hash": "ed1d33cb3d6ee52647b55b2b2b2eb000fb4ef29cdecca34e110ad9d9d0c97b84"}}, "hash": "45f925c63325378f9dd6138399790958403ce19f559dda44ff9afd5508b5b621", "text": "html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t long long utcoffset,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_RTC_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_RTC_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nutcoffset\n\n    the new RTC offset from UTC, measured in seconds\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventRegister`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectDomainEventRegister\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virConnectDomainEventCallback](libvirt-libvirt-domain.html#virConnectDomainEventCallback) cb,\n    \t\t\t\t\t void * opaque,\n    \t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) freecb)\n\nAdds a callback to receive notifications of domain lifecycle events occurring\non a connection. This function requires that an event loop has been previously\nregistered with [virEventRegisterImpl](libvirt-libvirt-\nevent.html#virEventRegisterImpl)() or [virEventRegisterDefaultImpl](libvirt-\nlibvirt-event.html#virEventRegisterDefaultImpl)().\n\nUse of this method is no longer recommended. Instead applications should try\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)() which has a more flexible API\ncontract.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6241709e-0424-4da0-bcab-e171420abfe4": {"__data__": {"id_": "6241709e-0424-4da0-bcab-e171420abfe4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0c996bcb-7391-40b6-974e-87f16de0d430", "node_type": null, "metadata": {}, "hash": "45f925c63325378f9dd6138399790958403ce19f559dda44ff9afd5508b5b621"}, "3": {"node_id": "f51521bc-46e1-4c43-86eb-3e2e04f63287", "node_type": null, "metadata": {}, "hash": "9049ef5238e62c1f9c1e855b871951422cbfe27f4a408347e6c2497f23a47711"}}, "hash": "ed1d33cb3d6ee52647b55b2b2b2eb000fb4ef29cdecca34e110ad9d9d0c97b84", "text": "The [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) object handle\npassed into the callback upon delivery of an event is only valid for the\nduration of execution of the callback. If the callback wishes to keep the\ndomain object after the callback returns, it shall take a reference to it, by\ncalling [virDomainRef](libvirt-libvirt-domain.html#virDomainRef). The\nreference can be released once the object is no longer required by calling\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree).\n\nconn\n\n    pointer to the connection\ncb\n\n    callback to the function handling domain events\nopaque\n\n    opaque data to pass on to the callback\nfreecb\n\n    optional function to deallocate opaque when not used anymore\nReturns\n\n    0 on success, -1 on failure. Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f51521bc-46e1-4c43-86eb-3e2e04f63287": {"__data__": {"id_": "f51521bc-46e1-4c43-86eb-3e2e04f63287", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6241709e-0424-4da0-bcab-e171420abfe4", "node_type": null, "metadata": {}, "hash": "ed1d33cb3d6ee52647b55b2b2b2eb000fb4ef29cdecca34e110ad9d9d0c97b84"}, "3": {"node_id": "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81", "node_type": null, "metadata": {}, "hash": "a60cf6a766c8b61565b9a467292cf7f35d292fffcb686acc547b5d57b47ff27a"}}, "hash": "9049ef5238e62c1f9c1e855b871951422cbfe27f4a408347e6c2497f23a47711", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectDomainEventRegisterAny`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectDomainEventRegisterAny\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t int eventID,\n    \t\t\t\t\t\t [virConnectDomainEventGenericCallback](libvirt-libvirt-domain.html#virConnectDomainEventGenericCallback) cb,\n    \t\t\t\t\t\t void * opaque,\n    \t\t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) freecb)\n\nAdds a callback to receive notifications of arbitrary domain events occurring\non a domain. This function requires that an event loop has been previously\nregistered with [virEventRegisterImpl](libvirt-libvirt-\nevent.html#virEventRegisterImpl)() or [virEventRegisterDefaultImpl](libvirt-\nlibvirt-event.html#virEventRegisterDefaultImpl)().\n\nIf `dom` is NULL, then events will be monitored for any domain. If `dom` is\nnon-NULL, then only the specific domain will be monitored.\n\nMost types of event have a callback providing a custom set of parameters for\nthe event. When registering an event, it is thus necessary to use the\n[VIR_DOMAIN_EVENT_CALLBACK](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_CALLBACK)() macro to cast the supplied function\npointer to match the signature of this method.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81": {"__data__": {"id_": "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f51521bc-46e1-4c43-86eb-3e2e04f63287", "node_type": null, "metadata": {}, "hash": "9049ef5238e62c1f9c1e855b871951422cbfe27f4a408347e6c2497f23a47711"}, "3": {"node_id": "3aaa549c-7068-4369-b75f-a30d7715a4cd", "node_type": null, "metadata": {}, "hash": "2835d06f246fd5e0e07f09ea939876c4dabff4afaa1bafa3bea38e93f432d915"}}, "hash": "a60cf6a766c8b61565b9a467292cf7f35d292fffcb686acc547b5d57b47ff27a", "text": "The [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) object handle\npassed into the callback upon delivery of an event is only valid for the\nduration of execution of the callback. If the callback wishes to keep the\ndomain object after the callback returns, it shall take a reference to it, by\ncalling [virDomainRef](libvirt-libvirt-domain.html#virDomainRef)(). The\nreference can be released once the object is no longer required by calling\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree)().\n\nThe return value from this method is a non-negative integer identifier for the\ncallback. To unregister a callback, this callback ID should be passed to the\n[virConnectDomainEventDeregisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventDeregisterAny)() method.\n\nconn\n\n    pointer to the connection\ndom\n\n    pointer to the domain\neventID\n\n    the event type to receive\ncb\n\n    callback to the function handling domain events\nopaque\n\n    opaque data to pass on to the callback\nfreecb\n\n    optional function to deallocate opaque when not used anymore\nReturns\n\n    a callback identifier on success, -1 on failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3aaa549c-7068-4369-b75f-a30d7715a4cd": {"__data__": {"id_": "3aaa549c-7068-4369-b75f-a30d7715a4cd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81", "node_type": null, "metadata": {}, "hash": "a60cf6a766c8b61565b9a467292cf7f35d292fffcb686acc547b5d57b47ff27a"}, "3": {"node_id": "6b134353-ec7e-4430-b8e7-a122d9040d20", "node_type": null, "metadata": {}, "hash": "143622ed78e2c73fac851cc944e645d3dd45a33eee613f864c09af084618f647"}}, "hash": "2835d06f246fd5e0e07f09ea939876c4dabff4afaa1bafa3bea38e93f432d915", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectDomainEventTrayChangeCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventTrayChangeCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t const char * devAlias,\n    \t\t\t\t\t\t int reason,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when the tray of a removable device is moved.\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_TRAY_CHANGE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_TRAY_CHANGE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\ndevAlias\n\n    device alias\nreason\n\n    why the tray status was changed?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6b134353-ec7e-4430-b8e7-a122d9040d20": {"__data__": {"id_": "6b134353-ec7e-4430-b8e7-a122d9040d20", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3aaa549c-7068-4369-b75f-a30d7715a4cd", "node_type": null, "metadata": {}, "hash": "2835d06f246fd5e0e07f09ea939876c4dabff4afaa1bafa3bea38e93f432d915"}, "3": {"node_id": "3157aff3-116f-4e04-b81f-cccee957f5f1", "node_type": null, "metadata": {}, "hash": "a394073b286cc7828fc6fae86054223a570ed07dea3ea1f4c347cba89b58a895"}}, "hash": "143622ed78e2c73fac851cc944e645d3dd45a33eee613f864c09af084618f647", "text": "([virDomainEventTrayChangeReason](libvirt-libvirt-domain.html#virDomainEventTrayChangeReason))\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventTunableCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventTunableCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t\t int nparams,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThis callback occurs when tunable values are updated. The params must not be\nfreed in the callback handler as it's done internally after the callback\nhandler is executed.\n\nCurrently supported name spaces: \"cputune.*\" \"blkdeviotune.*\"\n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_TUNABLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_TUNABLE) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\nparams\n\n    changed tunable values stored as array of [virTypedParameter](libvirt-libvirt-common.html#virTypedParameter)\nnparams\n\n    size of the array\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainEventWatchdogCallback`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectDomainEventWatchdogCallback)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3157aff3-116f-4e04-b81f-cccee957f5f1": {"__data__": {"id_": "3157aff3-116f-4e04-b81f-cccee957f5f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6b134353-ec7e-4430-b8e7-a122d9040d20", "node_type": null, "metadata": {}, "hash": "143622ed78e2c73fac851cc944e645d3dd45a33eee613f864c09af084618f647"}, "3": {"node_id": "620145cd-eb5c-4193-974d-4a70e7747bbd", "node_type": null, "metadata": {}, "hash": "52c2889bb29cd58f84908335c5428cfe51a5b695ee3bfa9a873e1a30040cf206"}}, "hash": "a394073b286cc7828fc6fae86054223a570ed07dea3ea1f4c347cba89b58a895", "text": "html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t\t int action,\n    \t\t\t\t\t\t void * opaque)\n    \n\nThe callback signature to use when registering for an event of type\n[VIR_DOMAIN_EVENT_ID_WATCHDOG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_WATCHDOG) with\n[virConnectDomainEventRegisterAny](libvirt-libvirt-\ndomain.html#virConnectDomainEventRegisterAny)()\n\nconn\n\n    connection object\ndom\n\n    domain on which the event occurred\naction\n\n    action that is to be taken due to watchdog firing ([virDomainEventWatchdogAction](libvirt-libvirt-domain.html#virDomainEventWatchdogAction))\nopaque\n\n    application specified data\n  \n\n### `virConnectDomainXMLFromNative`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectDomainXMLFromNative\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * nativeFormat,\n    \t\t\t\t\t const char * nativeConfig,\n    \t\t\t\t\t unsigned int flags)\n\nReads native configuration data describing a domain, and generates libvirt\ndomain XML. The format of the native data is hypervisor dependent.\n\nconn\n\n    a connection object\nnativeFormat\n\n    configuration format importing from\nnativeConfig\n\n    the configuration data to import\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. The caller must free() the returned value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "620145cd-eb5c-4193-974d-4a70e7747bbd": {"__data__": {"id_": "620145cd-eb5c-4193-974d-4a70e7747bbd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3157aff3-116f-4e04-b81f-cccee957f5f1", "node_type": null, "metadata": {}, "hash": "a394073b286cc7828fc6fae86054223a570ed07dea3ea1f4c347cba89b58a895"}, "3": {"node_id": "79b82724-33d3-4db0-abda-ab04edd56f65", "node_type": null, "metadata": {}, "hash": "7430516d60fed87c420f5fb7795dc383be4a4bfd85115c0cef5331af295893a9"}}, "hash": "52c2889bb29cd58f84908335c5428cfe51a5b695ee3bfa9a873e1a30040cf206", "text": "The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectDomainXMLToNative`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectDomainXMLToNative\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * nativeFormat,\n    \t\t\t\t\t const char * domainXml,\n    \t\t\t\t\t unsigned int flags)\n\nReads a domain XML configuration document, and generates a native\nconfiguration file describing the domain. The format of the native data is\nhypervisor dependent.\n\nNote that certain hypervisor drivers such as the QEMU driver configure many\naspects of the domain dynamically via hypervisor APIs and that may not be part\nof the returned native configuration format. Similarly certain resources are\npassed to the hypervisor via file descriptors, which are not part of the\nnative configuration returned by this API. Such configuration is thus not\ntrivially usable outside of libvirt.\n\nconn\n\n    a connection object\nnativeFormat\n\n    configuration format exporting to\ndomainXml\n\n    the domain configuration to export\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    a 0 terminated UTF-8 encoded native config datafile, or NULL in case of error. The caller must free() the returned value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "79b82724-33d3-4db0-abda-ab04edd56f65": {"__data__": {"id_": "79b82724-33d3-4db0-abda-ab04edd56f65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "620145cd-eb5c-4193-974d-4a70e7747bbd", "node_type": null, "metadata": {}, "hash": "52c2889bb29cd58f84908335c5428cfe51a5b695ee3bfa9a873e1a30040cf206"}, "3": {"node_id": "24f77309-320f-4c5d-9224-2bb951ccf7f3", "node_type": null, "metadata": {}, "hash": "c0cb51713b36da5af24c3f0f08e4ee8735708f4fb3d45e09b150d4af9672404e"}}, "hash": "7430516d60fed87c420f5fb7795dc383be4a4bfd85115c0cef5331af295893a9", "text": "The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectGetAllDomainStats`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectGetAllDomainStats\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned int stats,\n    \t\t\t\t\t [virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) ** retStats,\n    \t\t\t\t\t unsigned int flags)\n\nQuery statistics for all domains on a given connection.\n\nReport statistics of various parameters for a running VM according to `stats`\nfield. The statistics are returned as an array of structures for each queried\ndomain. The structure contains an array of typed parameters containing the\nindividual statistics. The typed parameter name for each statistic field\nconsists of a dot-separated string containing name of the requested group\nfollowed by a group specific description of the statistic value.\n\nThe statistic groups are enabled using the `stats` parameter which is a\nbinary-OR of enum [virDomainStatsTypes](libvirt-libvirt-\ndomain.html#virDomainStatsTypes). The following groups are available (although\nnot necessarily implemented for each hypervisor):\n\n[VIR_DOMAIN_STATS_STATE](libvirt-libvirt-domain.html#VIR_DOMAIN_STATS_STATE):\nReturn domain state and reason for entering that state. The typed parameter\nkeys are in this format:\n\n    \n    \n      \"state.state\" - state of the VM, returned as int from virDomainState enum\n      \"state.reason\" - reason for entering given state, returned as int from\n                       virDomain*Reason enum corresponding to given state.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "24f77309-320f-4c5d-9224-2bb951ccf7f3": {"__data__": {"id_": "24f77309-320f-4c5d-9224-2bb951ccf7f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "79b82724-33d3-4db0-abda-ab04edd56f65", "node_type": null, "metadata": {}, "hash": "7430516d60fed87c420f5fb7795dc383be4a4bfd85115c0cef5331af295893a9"}, "3": {"node_id": "bb0a8f25-5f30-4757-a987-a6a6031f5a97", "node_type": null, "metadata": {}, "hash": "c46447fa0dd4210c58828bce2dc29948247cf5b2270beaa6421e82b1d744ed4c"}}, "hash": "c0cb51713b36da5af24c3f0f08e4ee8735708f4fb3d45e09b150d4af9672404e", "text": "[VIR_DOMAIN_STATS_CPU_TOTAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_CPU_TOTAL): Return CPU statistics and usage\ninformation. The typed parameter keys are in this format:\n\n    \n    \n      \"cpu.time\" - total cpu time spent for this domain in nanoseconds\n                   as unsigned long long.\n      \"cpu.user\" - user cpu time spent in nanoseconds as unsigned long long.\n      \"cpu.system\" - system cpu time spent in nanoseconds as unsigned long\n                     long.\n      \"cpu.haltpoll.success.time\" - halt-polling cpu usage about the VCPU polled\n                                    until a virtual interrupt was delivered in\n                                    nanoseconds as unsigned long long.\n      \"cpu.haltpoll.fail.time\" - halt-polling cpu usage about the VCPU had to schedule\n                                 out (either because the maximum poll time was reached\n                                 or it needed to yield the CPU) in nanoseconds as\n                                 unsigned long long.\n      \"cpu.cache.monitor.count\" - the number of cache monitors for this domain\n      \"cpu.cache.monitor.<num>.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bb0a8f25-5f30-4757-a987-a6a6031f5a97": {"__data__": {"id_": "bb0a8f25-5f30-4757-a987-a6a6031f5a97", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "24f77309-320f-4c5d-9224-2bb951ccf7f3", "node_type": null, "metadata": {}, "hash": "c0cb51713b36da5af24c3f0f08e4ee8735708f4fb3d45e09b150d4af9672404e"}, "3": {"node_id": "b8a769bf-038a-464a-ae59-985e8d0495c7", "node_type": null, "metadata": {}, "hash": "654382371bacb7b21047af444679a5a3dde0d3fca8ebbf285129f4301e24e135"}}, "hash": "c46447fa0dd4210c58828bce2dc29948247cf5b2270beaa6421e82b1d744ed4c", "text": "cache.monitor.<num>.name\" - the name of cache monitor <num>\n      \"cpu.cache.monitor.<num>.vcpus\" - vcpu list of cache monitor <num>\n      \"cpu.cache.monitor.<num>.bank.count\" - the number of cache banks in\n                                             cache monitor <num>\n      \"cpu.cache.monitor.<num>.bank.<index>.id\" - host allocated cache id for\n                                                  bank <index> in cache\n                                                  monitor <num>\n      \"cpu.cache.monitor.<num>.bank.<index>.bytes\" - the number of bytes of\n                                                     last level cache that the\n                                                     domain is using on cache\n                                                     bank <index>\n\n[VIR_DOMAIN_STATS_BALLOON](libvirt-libvirt-\ndomain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b8a769bf-038a-464a-ae59-985e8d0495c7": {"__data__": {"id_": "b8a769bf-038a-464a-ae59-985e8d0495c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bb0a8f25-5f30-4757-a987-a6a6031f5a97", "node_type": null, "metadata": {}, "hash": "c46447fa0dd4210c58828bce2dc29948247cf5b2270beaa6421e82b1d744ed4c"}, "3": {"node_id": "26e93bf0-cb48-4544-a26f-849a883e7f22", "node_type": null, "metadata": {}, "hash": "35d7ff00926f1c3605cff4315fc4daddea93de08d0b044c33c771d91dc23cf9f"}}, "hash": "654382371bacb7b21047af444679a5a3dde0d3fca8ebbf285129f4301e24e135", "text": "html#VIR_DOMAIN_STATS_BALLOON): Return memory balloon device\ninformation. The typed parameter keys are in this format:\n\n    \n    \n      \"balloon.current\" - the memory in kiB currently used\n                          as unsigned long long.\n      \"balloon.maximum\" - the maximum memory in kiB allowed\n                          as unsigned long long.\n      \"balloon.swap_in\" - the amount of data read from swap space (in KiB)\n                          as unsigned long long\n      \"balloon.swap_out\" - the amount of memory written out to swap space\n                           (in KiB) as unsigned long long\n      \"balloon.major_fault\" - the number of page faults when disk IO was\n                              required as unsigned long long\n      \"balloon.minor_fault\" - the number of other page faults\n                              as unsigned long long\n      \"balloon.unused\" - the amount of memory left unused by the system\n                         (in KiB) as unsigned long long\n      \"balloon.available\" - the amount of usable memory as seen by the domain\n                            (in KiB) as unsigned long long\n      \"balloon.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "26e93bf0-cb48-4544-a26f-849a883e7f22": {"__data__": {"id_": "26e93bf0-cb48-4544-a26f-849a883e7f22", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b8a769bf-038a-464a-ae59-985e8d0495c7", "node_type": null, "metadata": {}, "hash": "654382371bacb7b21047af444679a5a3dde0d3fca8ebbf285129f4301e24e135"}, "3": {"node_id": "57bcc06c-0f05-406a-9f4c-037a64f4957e", "node_type": null, "metadata": {}, "hash": "a18322943126b4821c321b66819b94172a2539643fb3b3624c88fd4e3c738d5b"}}, "hash": "35d7ff00926f1c3605cff4315fc4daddea93de08d0b044c33c771d91dc23cf9f", "text": "rss\" - Resident Set Size of running domain's process\n                      (in KiB) as unsigned long long\n      \"balloon.usable\" - the amount of memory which can be reclaimed by balloon\n                         without causing host swapping (in KiB)\n                         as unsigned long long\n      \"balloon.last-update\" - timestamp of the last update of statistics\n                              (in seconds) as unsigned long long\n      \"balloon.disk_caches\" - the amount of memory that can be reclaimed\n                              without additional I/O, typically disk (in KiB)\n                              as unsigned long long\n      \"balloon.hugetlb_pgalloc\" - the number of successful huge page allocations\n                                  from inside the domain via virtio balloon\n                                  as unsigned long long\n      \"balloon.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "57bcc06c-0f05-406a-9f4c-037a64f4957e": {"__data__": {"id_": "57bcc06c-0f05-406a-9f4c-037a64f4957e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "26e93bf0-cb48-4544-a26f-849a883e7f22", "node_type": null, "metadata": {}, "hash": "35d7ff00926f1c3605cff4315fc4daddea93de08d0b044c33c771d91dc23cf9f"}, "3": {"node_id": "8c6ea19b-e24d-4612-b407-23faf71b73a9", "node_type": null, "metadata": {}, "hash": "e0ac99ccea5d469bf07ed1c3da38e2306d6c672a9a311376b6fac79f2c814059"}}, "hash": "a18322943126b4821c321b66819b94172a2539643fb3b3624c88fd4e3c738d5b", "text": "hugetlb_pgfail\" - the number of failed huge page allocations\n                                 from inside the domain via virtio balloon\n                                 as unsigned long long\n\n[VIR_DOMAIN_STATS_VCPU](libvirt-libvirt-domain.html#VIR_DOMAIN_STATS_VCPU):\nReturn virtual CPU statistics. Due to VCPU hotplug, the vcpu.<num>.* array\ncould be sparse. The actual size of the array corresponds to \"vcpu.current\".\nThe array size will never exceed \"vcpu.maximum\". The typed parameter keys are\nin this format:\n\n    \n    \n      \"vcpu.current\" - current number of online virtual CPUs as unsigned int.\n      \"vcpu.maximum\" - maximum number of online virtual CPUs as unsigned int.\n      \"vcpu.<num>.state\" - state of the virtual CPU <num>, as int\n                           from virVcpuState enum.\n      \"vcpu.<num>.time\" - virtual cpu time spent by virtual CPU <num>\n                          as unsigned long long.\n      \"vcpu.<num>.wait\" - time the vCPU <num> wants to run, but the host\n                          scheduler has something else running ahead of it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8c6ea19b-e24d-4612-b407-23faf71b73a9": {"__data__": {"id_": "8c6ea19b-e24d-4612-b407-23faf71b73a9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "57bcc06c-0f05-406a-9f4c-037a64f4957e", "node_type": null, "metadata": {}, "hash": "a18322943126b4821c321b66819b94172a2539643fb3b3624c88fd4e3c738d5b"}, "3": {"node_id": "748bacc0-46d0-46c9-9bb3-196e14cd9ab6", "node_type": null, "metadata": {}, "hash": "ffdbc8aa6f4732259e86857ea31059408b0b80cf9cade431d3460ab780e764e0"}}, "hash": "e0ac99ccea5d469bf07ed1c3da38e2306d6c672a9a311376b6fac79f2c814059", "text": "\"vcpu.<num>.halted\" - virtual CPU <num> is halted, may indicate the\n                            processor is idle or even disabled, depending\n                            on the architecture)\n      \"vcpu.<num>.delay\" - time the vCPU <num> thread was enqueued by the\n                           host scheduler, but was waiting in the queue\n                           instead of running. Exposed to the VM as a steal\n                           time.\n    \n     This group of statistics also reports additional hypervisor-originating\n     per-vCPU stats. The hypervisor-specific statistics in this group have the\n     following naming scheme:\n    \n      \"vcpu.<num>.$NAME.$TYPE\"\n    \n        $NAME - name of the statistics field provided by the hypervisor\n    \n        $TYPE - Type of the value. The following types are returned:\n           'cur' - current instant value\n           'sum' - aggregate value\n           'max' - peak value\n    \n       The returned value may be either an unsigned long long or a boolean.\n       Meaning is hypervisor specific. Please see the disclaimer for the\n       VIR_DOMAIN_STATS_VM group below.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "748bacc0-46d0-46c9-9bb3-196e14cd9ab6": {"__data__": {"id_": "748bacc0-46d0-46c9-9bb3-196e14cd9ab6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8c6ea19b-e24d-4612-b407-23faf71b73a9", "node_type": null, "metadata": {}, "hash": "e0ac99ccea5d469bf07ed1c3da38e2306d6c672a9a311376b6fac79f2c814059"}, "3": {"node_id": "456f442a-b859-43b1-9296-770c722bb961", "node_type": null, "metadata": {}, "hash": "9b25a7293328b0a6cb799184af13b024d98f0eeba02cb15ceca09fd1d6daac25"}}, "hash": "ffdbc8aa6f4732259e86857ea31059408b0b80cf9cade431d3460ab780e764e0", "text": "[VIR_DOMAIN_STATS_INTERFACE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_INTERFACE): Return network interface statistics\n(from domain point of view). The typed parameter keys are in this format:\n\n    \n    \n      \"net.count\" - number of network interfaces on this domain\n                    as unsigned int.\n      \"net.<num>.name\" - name of the interface <num> as string.\n      \"net.<num>.rx.bytes\" - bytes received as unsigned long long.\n      \"net.<num>.rx.pkts\" - packets received as unsigned long long.\n      \"net.<num>.rx.errs\" - receive errors as unsigned long long.\n      \"net.<num>.rx.drop\" - receive packets dropped as unsigned long long.\n      \"net.<num>.tx.bytes\" - bytes transmitted as unsigned long long.\n      \"net.<num>.tx.pkts\" - packets transmitted as unsigned long long.\n      \"net.<num>.tx.errs\" - transmission errors as unsigned long long.\n      \"net.<num>.tx.drop\" - transmit packets dropped as unsigned long long.\n\n[VIR_DOMAIN_STATS_BLOCK](libvirt-libvirt-domain.html#VIR_DOMAIN_STATS_BLOCK):\nReturn block devices statistics. By default, this information is limited to\nthe active layer of each <disk> of the domain (where block.count is equal to\nthe number of disks), but adding\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING) to `flags` will expand\nthe array to cover backing chains (block.count corresponds to the number of\nhost resources used together to provide the guest disks).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "456f442a-b859-43b1-9296-770c722bb961": {"__data__": {"id_": "456f442a-b859-43b1-9296-770c722bb961", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "748bacc0-46d0-46c9-9bb3-196e14cd9ab6", "node_type": null, "metadata": {}, "hash": "ffdbc8aa6f4732259e86857ea31059408b0b80cf9cade431d3460ab780e764e0"}, "3": {"node_id": "78c17330-0bfd-42b5-88cc-190c63103182", "node_type": null, "metadata": {}, "hash": "3fadb41612f8368c93f24566c32e88f0acb65dd61c50314b5d62b9fabbb79715"}}, "hash": "9b25a7293328b0a6cb799184af13b024d98f0eeba02cb15ceca09fd1d6daac25", "text": "The typed parameter\nkeys are in this format:\n\n    \n    \n      \"block.count\" - number of block devices in the subsequent list,\n                      as unsigned int.\n      \"block.<num>.name\" - name of the block device <num> as string.\n                           matches the target name (vda/sda/hda) of the\n                           block device.  If the backing chain is listed,\n                           this name is the same for all host resources tied\n                           to the same guest device.\n      \"block.<num>.backingIndex\" - unsigned int giving the <backingStore>\n                                    index, only used when backing images\n                                    are listed.\n      \"block.<num>.path\" - string describing the source of block device <num>,\n                           if it is a file or block device (omitted for network\n                           sources and drives with no media inserted).\n      \"block.<num>.rd.reqs\" - number of read requests as unsigned long long.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78c17330-0bfd-42b5-88cc-190c63103182": {"__data__": {"id_": "78c17330-0bfd-42b5-88cc-190c63103182", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "456f442a-b859-43b1-9296-770c722bb961", "node_type": null, "metadata": {}, "hash": "9b25a7293328b0a6cb799184af13b024d98f0eeba02cb15ceca09fd1d6daac25"}, "3": {"node_id": "1bab4f04-f762-4de5-b5cf-7719943c38eb", "node_type": null, "metadata": {}, "hash": "d79e8ecff33a5a65d6065bafd23a74cfaeb4929695c1097df48a04b66a89feba"}}, "hash": "3fadb41612f8368c93f24566c32e88f0acb65dd61c50314b5d62b9fabbb79715", "text": "\"block.<num>.rd.bytes\" - number of read bytes as unsigned long long.\n      \"block.<num>.rd.times\" - total time (ns) spent on reads as\n                               unsigned long long.\n      \"block.<num>.wr.reqs\" - number of write requests as unsigned long long.\n      \"block.<num>.wr.bytes\" - number of written bytes as unsigned long long.\n      \"block.<num>.wr.times\" - total time (ns) spent on writes as\n                               unsigned long long.\n      \"block.<num>.fl.reqs\" - total flush requests as unsigned long long.\n      \"block.<num>.fl.times\" - total time (ns) spent on cache flushing as\n                               unsigned long long.\n      \"block.<num>.errors\" - Xen only: the 'oo_req' value as\n                             unsigned long long.\n      \"block.<num>.allocation\" - offset of the highest written sector\n                                 as unsigned long long.\n      \"block.<num>.capacity\" - logical size in bytes of the block device\n                               backing image as unsigned long long.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bab4f04-f762-4de5-b5cf-7719943c38eb": {"__data__": {"id_": "1bab4f04-f762-4de5-b5cf-7719943c38eb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "78c17330-0bfd-42b5-88cc-190c63103182", "node_type": null, "metadata": {}, "hash": "3fadb41612f8368c93f24566c32e88f0acb65dd61c50314b5d62b9fabbb79715"}, "3": {"node_id": "501aecb1-0b9c-4c4d-bede-05b03e78bf38", "node_type": null, "metadata": {}, "hash": "43141f1a8f29d63265430d8f0e5a239043be58f7b10ba1ddcfcaa3956988f7a9"}}, "hash": "d79e8ecff33a5a65d6065bafd23a74cfaeb4929695c1097df48a04b66a89feba", "text": "\"block.<num>.physical\" - physical size in bytes of the container of the\n                               backing image as unsigned long long.\n      \"block.<num>.threshold\" - current threshold for delivering the\n                                VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD\n                                event in bytes. See virDomainSetBlockThreshold.\n\n[VIR_DOMAIN_STATS_PERF](libvirt-libvirt-domain.html#VIR_DOMAIN_STATS_PERF):\nReturn perf event statistics. The typed parameter keys are in this format:\n\n    \n    \n      \"perf.cmt\" - the usage of l3 cache (bytes) by applications running on\n                   the platform as unsigned long long. It is produced by cmt\n                   perf event.\n      \"perf.mbmt\" - the total system bandwidth (bytes/s) from one level of\n                    cache to another as unsigned long long. It is produced\n                    by mbmt perf event.\n      \"perf.mbml\" - the amount of data (bytes/s) sent through the memory\n                    controller on the socket as unsigned long long. It is\n                    produced by mbml perf event.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "501aecb1-0b9c-4c4d-bede-05b03e78bf38": {"__data__": {"id_": "501aecb1-0b9c-4c4d-bede-05b03e78bf38", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1bab4f04-f762-4de5-b5cf-7719943c38eb", "node_type": null, "metadata": {}, "hash": "d79e8ecff33a5a65d6065bafd23a74cfaeb4929695c1097df48a04b66a89feba"}, "3": {"node_id": "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2", "node_type": null, "metadata": {}, "hash": "740d747ad824d422c407e6ea93e7b67a045979a8febc89667bef56fda4623914"}}, "hash": "43141f1a8f29d63265430d8f0e5a239043be58f7b10ba1ddcfcaa3956988f7a9", "text": "\"perf.cache_misses\" - the count of cache misses as unsigned long long.\n                            It is produced by cache_misses perf event.\n      \"perf.cache_references\" - the count of cache hits as unsigned long long.\n                                It is produced by cache_references perf event.\n      \"perf.instructions\" - The count of instructions as unsigned long long.\n                            It is produced by instructions perf event.\n      \"perf.cpu_cycles\" - The count of cpu cycles (total/elapsed) as an\n                          unsigned long long. It is produced by cpu_cycles\n                          perf event.\n      \"perf.branch_instructions\" - The count of branch instructions as\n                                   unsigned long long. It is produced by\n                                   branch_instructions perf event.\n      \"perf.branch_misses\" - The count of branch misses as unsigned long\n                             long. It is produced by branch_misses perf event.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2": {"__data__": {"id_": "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "501aecb1-0b9c-4c4d-bede-05b03e78bf38", "node_type": null, "metadata": {}, "hash": "43141f1a8f29d63265430d8f0e5a239043be58f7b10ba1ddcfcaa3956988f7a9"}, "3": {"node_id": "4433f5b2-256c-4457-bbe4-d278aa9538fe", "node_type": null, "metadata": {}, "hash": "bff2c687a9d24e1a4cb384b5869829213f0b94ff1867981287e1b9a2ef973d9d"}}, "hash": "740d747ad824d422c407e6ea93e7b67a045979a8febc89667bef56fda4623914", "text": "It is produced by branch_misses perf event.\n      \"perf.bus_cycles\" - The count of bus cycles as unsigned long\n                          long. It is produced by bus_cycles perf event.\n      \"perf.stalled_cycles_frontend\" - The count of stalled cpu cycles in the\n                                       frontend of the instruction processor\n                                       pipeline as unsigned long long. It is\n                                       produced by stalled_cycles_frontend\n                                       perf event.\n      \"perf.stalled_cycles_backend\"  - The count of stalled cpu cycles in the\n                                       backend of the instruction processor\n                                       pipeline as unsigned long long. It is\n                                       produced by stalled_cycles_backend\n                                       perf event.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4433f5b2-256c-4457-bbe4-d278aa9538fe": {"__data__": {"id_": "4433f5b2-256c-4457-bbe4-d278aa9538fe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2", "node_type": null, "metadata": {}, "hash": "740d747ad824d422c407e6ea93e7b67a045979a8febc89667bef56fda4623914"}, "3": {"node_id": "b7f767b0-4195-444a-8d6b-7ab09bf3b682", "node_type": null, "metadata": {}, "hash": "367ec6270a88035d9fd756e0c012a9065bcc2f49e35576646bc014443a499e8c"}}, "hash": "bff2c687a9d24e1a4cb384b5869829213f0b94ff1867981287e1b9a2ef973d9d", "text": "\"perf.ref_cpu_cycles\" - The count of total cpu cycles not affected by\n                              CPU frequency scaling by applications running\n                              as unsigned long long. It is produced by the\n                              ref_cpu_cycles perf event.\n      \"perf.cpu_clock\" - The count of cpu clock time as unsigned long long.\n                         It is produced by the cpu_clock perf event.\n      \"perf.task_clock\" - The count of task clock time as unsigned long long.\n                          It is produced by the task_clock perf event.\n      \"perf.page_faults\" - The count of page faults as unsigned long long.\n                           It is produced by the page_faults perf event\n      \"perf.context_switches\" - The count of context switches as unsigned long\n                                long. It is produced by the context_switches\n                                perf event.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b7f767b0-4195-444a-8d6b-7ab09bf3b682": {"__data__": {"id_": "b7f767b0-4195-444a-8d6b-7ab09bf3b682", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4433f5b2-256c-4457-bbe4-d278aa9538fe", "node_type": null, "metadata": {}, "hash": "bff2c687a9d24e1a4cb384b5869829213f0b94ff1867981287e1b9a2ef973d9d"}, "3": {"node_id": "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5", "node_type": null, "metadata": {}, "hash": "2f70e023ce41ce3fa6c018d9f6559b690cfcab7ee386859a62ef8c1198ea3415"}}, "hash": "367ec6270a88035d9fd756e0c012a9065bcc2f49e35576646bc014443a499e8c", "text": "\"perf.cpu_migrations\" - The count of cpu migrations, from one logical\n                              processor to another, as unsigned long\n                              long. It is produced by the cpu_migrations\n                              perf event.\n      \"perf.page_faults_min\" - The count of minor page faults as unsigned\n                               long long. It is produced by the\n                               page_faults_min perf event.\n      \"perf.page_faults_maj\" - The count of major page faults as unsigned\n                               long long. It is produced by the\n                               page_faults_maj perf event.\n      \"perf.alignment_faults\" - The count of alignment faults as unsigned\n                                long long.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5": {"__data__": {"id_": "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b7f767b0-4195-444a-8d6b-7ab09bf3b682", "node_type": null, "metadata": {}, "hash": "367ec6270a88035d9fd756e0c012a9065bcc2f49e35576646bc014443a499e8c"}, "3": {"node_id": "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3", "node_type": null, "metadata": {}, "hash": "d7ec5b4dfa71f9dfb44a7ff284b181836ec27f7f321e33fa2f1f6a8e3388a845"}}, "hash": "2f70e023ce41ce3fa6c018d9f6559b690cfcab7ee386859a62ef8c1198ea3415", "text": "It is produced by the\n                                alignment_faults perf event\n      \"perf.emulation_faults\" - The count of emulation faults as unsigned\n                                long long. It is produced by the\n                                emulation_faults perf event\n\n[VIR_DOMAIN_STATS_IOTHREAD](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_IOTHREAD): Return IOThread statistics if\navailable. IOThread polling is a timing mechanism that allows the hypervisor\nto generate a longer period of time in which the guest will perform operations\non the CPU being used by the IOThread. The higher the value for poll-max-ns\nthe longer the guest will keep the CPU. This may affect other host threads\nusing the CPU. The poll-grow and poll-shrink values allow the hypervisor to\ngenerate a mechanism to add or remove polling time within the confines of 0\nand poll-max-ns. For QEMU, the poll-grow is multiplied by the polling\ninterval, while poll-shrink is used as a divisor. When not provided, QEMU may\ndouble the polling time until poll-max-ns is reached. When poll-shrink is 0\n(zero) QEMU may reset the polling interval to 0 until it finds its \"sweet\nspot\". Setting poll-grow too large may cause frequent fluctuation of the time;\nhowever, this can be tempered by a high poll-shrink to reduce the polling\ninterval. For example, a poll-grow of 3 will triple the polling time which\ncould quickly exceed poll-max-ns; however, a poll-shrink of 10 would cut that\npolling time more gradually.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3": {"__data__": {"id_": "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5", "node_type": null, "metadata": {}, "hash": "2f70e023ce41ce3fa6c018d9f6559b690cfcab7ee386859a62ef8c1198ea3415"}, "3": {"node_id": "5671496a-1628-43ee-a9a8-54774d75a24b", "node_type": null, "metadata": {}, "hash": "b275295e9e6dd7a2c56ba52259a86130413f90bc88e3b3e2e03c59f7d4dad51d"}}, "hash": "d7ec5b4dfa71f9dfb44a7ff284b181836ec27f7f321e33fa2f1f6a8e3388a845", "text": "The typed parameter keys are in this format:\n    \n      \"iothread.count\" - maximum number of IOThreads in the subsequent list\n                         as unsigned int. Each IOThread in the list will\n                         will use it's iothread_id value as the <id>. There\n                         may be fewer <id> entries than the iothread.count\n                         value if the polling values are not supported.\n      \"iothread.<id>.poll-max-ns\" - maximum polling time in ns as an unsigned\n                                    long long. A 0 (zero) means polling is\n                                    disabled.\n      \"iothread.<id>.poll-grow\" - polling time factor as an unsigned int or\n                                  unsigned long long if exceeding range of\n                                  unsigned int.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5671496a-1628-43ee-a9a8-54774d75a24b": {"__data__": {"id_": "5671496a-1628-43ee-a9a8-54774d75a24b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3", "node_type": null, "metadata": {}, "hash": "d7ec5b4dfa71f9dfb44a7ff284b181836ec27f7f321e33fa2f1f6a8e3388a845"}, "3": {"node_id": "9c326316-647b-4aff-a227-cc717c5cc122", "node_type": null, "metadata": {}, "hash": "61d3c9ce0d67219b197184dbecbc39166f73fc5d1284ff80cc795aa2724ba247"}}, "hash": "b275295e9e6dd7a2c56ba52259a86130413f90bc88e3b3e2e03c59f7d4dad51d", "text": "A 0 (zero) indicates to allow the underlying\n                                  hypervisor to choose how to grow the\n                                  polling time.\n      \"iothread.<id>.poll-shrink\" - polling time divisor as an unsigned int or\n                                    unsigned long long if exceeding range of\n                                    unsigned int.\n                                    A 0 (zero) indicates to allow the underlying\n                                    hypervisor to choose how to shrink the\n                                    polling time.\n\n[VIR_DOMAIN_STATS_MEMORY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_MEMORY): Return memory bandwidth statistics and\nthe usage information.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9c326316-647b-4aff-a227-cc717c5cc122": {"__data__": {"id_": "9c326316-647b-4aff-a227-cc717c5cc122", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5671496a-1628-43ee-a9a8-54774d75a24b", "node_type": null, "metadata": {}, "hash": "b275295e9e6dd7a2c56ba52259a86130413f90bc88e3b3e2e03c59f7d4dad51d"}, "3": {"node_id": "97f6f4d6-56ac-4e35-91fc-a2c73078f07c", "node_type": null, "metadata": {}, "hash": "d2deed09c85fb6bac924ab878e7077f56b96a11b4c24262f4b7dc32f51074a01"}}, "hash": "61d3c9ce0d67219b197184dbecbc39166f73fc5d1284ff80cc795aa2724ba247", "text": "The typed parameter keys are in this format:\n\n    \n    \n      \"memory.bandwidth.monitor.count\" - the number of memory bandwidth\n                                         monitors for this domain\n      \"memory.bandwidth.monitor.<num>.name\" - the name of monitor <num>\n      \"memory.bandwidth.monitor.<num>.vcpus\" - the vcpu list of monitor <num>\n      \"memory.bandwidth.monitor.<num>.node.count\" - the number of memory\n                                             controller in monitor <num>\n      \"memory.bandwidth.monitor.<num>.node.<index>.id\" - host allocated memory\n                                                  controller id for controller\n                                                  <index> of monitor <num>\n      \"memory.bandwidth.monitor.<num>.node.<index>.bytes.local\" - the\n                        accumulative bytes consumed by @vcpus that passing\n                        through the memory controller in the same processor\n                        that the scheduled host CPU belongs to.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97f6f4d6-56ac-4e35-91fc-a2c73078f07c": {"__data__": {"id_": "97f6f4d6-56ac-4e35-91fc-a2c73078f07c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9c326316-647b-4aff-a227-cc717c5cc122", "node_type": null, "metadata": {}, "hash": "61d3c9ce0d67219b197184dbecbc39166f73fc5d1284ff80cc795aa2724ba247"}, "3": {"node_id": "5c6f41f1-454c-4bc5-9908-a300cb647814", "node_type": null, "metadata": {}, "hash": "836bbe9efd6e8396d8a8a019b3397a181d526213e8ba4762a5cc9080310f4188"}}, "hash": "d2deed09c85fb6bac924ab878e7077f56b96a11b4c24262f4b7dc32f51074a01", "text": "\"memory.bandwidth.monitor.<num>.node.<index>.bytes.total\" - the total\n                        bytes consumed by @vcpus that passing through all\n                        memory controllers, either local or remote controller.\n\n[VIR_DOMAIN_STATS_DIRTYRATE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_DIRTYRATE): Return memory dirty rate information.\nThe typed parameter keys are in this format:\n\n    \n    \n      \"dirtyrate.calc_status\" - the status of last memory dirty rate calculation,\n                                returned as int from virDomainDirtyRateStatus\n                                enum.\n      \"dirtyrate.calc_start_time\" - the start time of last memory dirty rate\n                                    calculation as long long.\n      \"dirtyrate.calc_period\" - the period of last memory dirty rate calculation\n                                as int.\n      \"dirtyrate.megabytes_per_second\" - the calculated memory dirty rate in\n                                         MiB/s as long long.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c6f41f1-454c-4bc5-9908-a300cb647814": {"__data__": {"id_": "5c6f41f1-454c-4bc5-9908-a300cb647814", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "97f6f4d6-56ac-4e35-91fc-a2c73078f07c", "node_type": null, "metadata": {}, "hash": "d2deed09c85fb6bac924ab878e7077f56b96a11b4c24262f4b7dc32f51074a01"}, "3": {"node_id": "70549b44-86d5-4600-bf79-a3e671936e29", "node_type": null, "metadata": {}, "hash": "8303a6678c646cfdd7b7b01021bbfa4b864a33478c499a00f9e368aaa0fddb75"}}, "hash": "836bbe9efd6e8396d8a8a019b3397a181d526213e8ba4762a5cc9080310f4188", "text": "It is produced\n                                         only if the calc_status is measured.\n      \"dirtyrate.calc_mode\" - the calculation mode used last measurement, either\n                              of these 3 'page-sampling,dirty-bitmap,dirty-ring'\n                              values returned.\n      \"dirtyrate.vcpu.<num>.megabytes_per_second\" - the calculated memory dirty\n                                                    rate for a virtual cpu as\n                                                    unsigned long long.\n\n[VIR_DOMAIN_STATS_VM](libvirt-libvirt-domain.html#VIR_DOMAIN_STATS_VM): Return\nhypervisor-specific statistics. Note that the naming and meaning of the fields\nis entirely hypervisor dependent.\n\n    \n    \n      The statistics in this group have the following naming scheme:\n    \n      \"vm.$NAME.$TYPE\"\n    \n        $NAME - name of the statistics field provided by the hypervisor\n    \n        $TYPE - Type of the value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "70549b44-86d5-4600-bf79-a3e671936e29": {"__data__": {"id_": "70549b44-86d5-4600-bf79-a3e671936e29", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5c6f41f1-454c-4bc5-9908-a300cb647814", "node_type": null, "metadata": {}, "hash": "836bbe9efd6e8396d8a8a019b3397a181d526213e8ba4762a5cc9080310f4188"}, "3": {"node_id": "65e526d0-0e2a-4400-812b-876f64458384", "node_type": null, "metadata": {}, "hash": "7734320fe54a5d346d41ca85e1f489f1d5f3714f1f2922b8c3e1d0a0b7c14ec8"}}, "hash": "8303a6678c646cfdd7b7b01021bbfa4b864a33478c499a00f9e368aaa0fddb75", "text": "The following types are returned:\n           'cur' - current instant value\n           'sum' - aggregate value\n           'max' - peak value\n    \n       The returned value may be either an unsigned long long or a boolean.\n    \n      WARNING:\n       The stats reported in this group are runtime-collected and\n       hypervisor originated, thus fall outside of the usual stable API\n       policies of libvirt.\n    \n       Libvirt can't guarantee that the statistics reported from the outside\n       source will be present in further versions of the hypervisor, or that\n       naming or meaning will stay consistent. Changes to existing fields,\n       however, are expected to be rare.\n\nNote that entire stats groups or individual stat fields may be missing from\nthe output in case they are not supported by the given hypervisor, are not\napplicable for the current state of the guest domain, or their retrieval was\nnot successful.\n\nUsing 0 for `stats` returns all stats groups supported by the given\nhypervisor.\n\nSpecifying [VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS) as `flags` makes\nthe function return error in case some of the stat types in `stats` were not\nrecognized by the daemon. However, even with this flag, a hypervisor may omit\nindividual fields within a known group if the information is not available; as\nan extreme example, a supported group may produce zero fields for offline\ndomains if the statistics are meaningful only for a running domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "65e526d0-0e2a-4400-812b-876f64458384": {"__data__": {"id_": "65e526d0-0e2a-4400-812b-876f64458384", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "70549b44-86d5-4600-bf79-a3e671936e29", "node_type": null, "metadata": {}, "hash": "8303a6678c646cfdd7b7b01021bbfa4b864a33478c499a00f9e368aaa0fddb75"}, "3": {"node_id": "f24022e0-e1f6-4a52-8752-a26719bb3cb2", "node_type": null, "metadata": {}, "hash": "b585fb37b092bd1db784aa31f1235483f1f4634479dfb8eefc6d438f065a65c5"}}, "hash": "7734320fe54a5d346d41ca85e1f489f1d5f3714f1f2922b8c3e1d0a0b7c14ec8", "text": "Passing [VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT) in `flags` means when\nlibvirt is unable to fetch stats for any of the domains (for whatever reason)\nonly a subset of statistics is returned for the domain. That subset being\nstatistics that don't involve querying the underlying hypervisor.\n\nSimilarly to [virConnectListAllDomains](libvirt-libvirt-\ndomain.html#virConnectListAllDomains), `flags` can contain various flags to\nfilter the list of domains to provide stats for.\n\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE) selects online domains\nwhile [VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE) selects offline ones.\n\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT) and\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT) allow to filter the\nlist according to their persistence.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f24022e0-e1f6-4a52-8752-a26719bb3cb2": {"__data__": {"id_": "f24022e0-e1f6-4a52-8752-a26719bb3cb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "65e526d0-0e2a-4400-812b-876f64458384", "node_type": null, "metadata": {}, "hash": "7734320fe54a5d346d41ca85e1f489f1d5f3714f1f2922b8c3e1d0a0b7c14ec8"}, "3": {"node_id": "d06f9ca3-b2cc-4773-85f7-9183db1bb8af", "node_type": null, "metadata": {}, "hash": "900f9ea750b2d0874ceeff7af029fe81472bc74090aa1407ed3a277e6c3bb354"}}, "hash": "b585fb37b092bd1db784aa31f1235483f1f4634479dfb8eefc6d438f065a65c5", "text": "To filter the list of VMs by domain state `flags` can contain\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING),\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED),\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF) and/or\n[VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER) for all other states.\n\nconn\n\n    pointer to the hypervisor connection\nstats\n\n    stats to return, binary-OR of [virDomainStatsTypes](libvirt-libvirt-domain.html#virDomainStatsTypes)\nretStats\n\n    Pointer that will be filled with the array of returned stats\nflags\n\n    extra flags; binary-OR of [virConnectGetAllDomainStatsFlags](libvirt-libvirt-domain.html#virConnectGetAllDomainStatsFlags)\nReturns\n\n    the count of returned statistics structures on success, -1 on error. The requested data are returned in the `retStats` parameter. The returned array should be freed by the caller. See [virDomainStatsRecordListFree](libvirt-libvirt-domain.html#virDomainStatsRecordListFree).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d06f9ca3-b2cc-4773-85f7-9183db1bb8af": {"__data__": {"id_": "d06f9ca3-b2cc-4773-85f7-9183db1bb8af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f24022e0-e1f6-4a52-8752-a26719bb3cb2", "node_type": null, "metadata": {}, "hash": "b585fb37b092bd1db784aa31f1235483f1f4634479dfb8eefc6d438f065a65c5"}, "3": {"node_id": "89eec67c-46d1-4b22-9c63-94346eb2838b", "node_type": null, "metadata": {}, "hash": "d7d0f1d659d83bca70c8d16048640f6a72acc9427b4d4a2a250fa67051eeb9aa"}}, "hash": "900f9ea750b2d0874ceeff7af029fe81472bc74090aa1407ed3a277e6c3bb354", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| read  \n  \n### `virConnectGetDomainCapabilities`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectGetDomainCapabilities\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * emulatorbin,\n    \t\t\t\t\t const char * arch,\n    \t\t\t\t\t const char * machine,\n    \t\t\t\t\t const char * virttype,\n    \t\t\t\t\t unsigned int flags)\n\nPrior creating a domain (for instance via [virDomainCreateXML](libvirt-\nlibvirt-domain.html#virDomainCreateXML) or [virDomainDefineXML](libvirt-\nlibvirt-domain.html#virDomainDefineXML)) it may be suitable to know what the\nunderlying emulator and/or libvirt is capable of. For instance, if host,\nlibvirt and qemu is capable of VFIO passthrough and so on.\n\nconn\n\n    pointer to the hypervisor connection\nemulatorbin\n\n    path to emulator\narch\n\n    domain architecture\nmachine\n\n    machine type\nvirttype\n\n    virtualization type\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    NULL in case of error or an XML string defining the capabilities.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "89eec67c-46d1-4b22-9c63-94346eb2838b": {"__data__": {"id_": "89eec67c-46d1-4b22-9c63-94346eb2838b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d06f9ca3-b2cc-4773-85f7-9183db1bb8af", "node_type": null, "metadata": {}, "hash": "900f9ea750b2d0874ceeff7af029fe81472bc74090aa1407ed3a277e6c3bb354"}, "3": {"node_id": "a605e421-dcc4-4afa-85ee-89a288db5d3a", "node_type": null, "metadata": {}, "hash": "5cf58fc6e5c7e34bf3b4dc48f38babc2a714dd7b7967ec85992666ec8521aa7d"}}, "hash": "d7d0f1d659d83bca70c8d16048640f6a72acc9427b4d4a2a250fa67051eeb9aa", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectListAllDomains`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectListAllDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) ** domains,\n    \t\t\t\t\t unsigned int flags)\n\nCollect a possibly-filtered list of all domains, and return an allocated array\nof information for each. This API solves the race inherent in\n[virConnectListDomains](libvirt-libvirt-domain.html#virConnectListDomains)()\nand [virConnectListDefinedDomains](libvirt-libvirt-\ndomain.html#virConnectListDefinedDomains)().\n\nNormally, all domains are returned; however, `flags` can be used to filter the\nresults for a smaller list of targeted domains. The valid flags are divided\ninto groups, where each group contains bits that describe mutually exclusive\nattributes of a domain, and where all bits within a group describe all\npossible domains. Some hypervisors might reject explicit bits from a group\nwhere the hypervisor cannot make a distinction (for example, not all\nhypervisors can tell whether domains have snapshots). For a group supported by\na given hypervisor, the behavior when no bits of a group are set is identical\nto the behavior when all bits in that group are set. When setting bits from\nmore than one group, it is possible to select an impossible combination (such\nas an inactive transient domain), in that case a hypervisor may return either\n0 or an error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a605e421-dcc4-4afa-85ee-89a288db5d3a": {"__data__": {"id_": "a605e421-dcc4-4afa-85ee-89a288db5d3a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "89eec67c-46d1-4b22-9c63-94346eb2838b", "node_type": null, "metadata": {}, "hash": "d7d0f1d659d83bca70c8d16048640f6a72acc9427b4d4a2a250fa67051eeb9aa"}, "3": {"node_id": "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b", "node_type": null, "metadata": {}, "hash": "ab28855e2c207680674d224134b470b533b04e0d111d7b9c6e26aef61b1ef3e7"}}, "hash": "5cf58fc6e5c7e34bf3b4dc48f38babc2a714dd7b7967ec85992666ec8521aa7d", "text": "The first group of `flags` is [VIR_CONNECT_LIST_DOMAINS_ACTIVE](libvirt-\nlibvirt-domain.html#VIR_CONNECT_LIST_DOMAINS_ACTIVE) (online domains) and\n[VIR_CONNECT_LIST_DOMAINS_INACTIVE](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_INACTIVE) (offline domains).\n\nThe next group of `flags` is [VIR_CONNECT_LIST_DOMAINS_PERSISTENT](libvirt-\nlibvirt-domain.html#VIR_CONNECT_LIST_DOMAINS_PERSISTENT) (defined domains) and\n[VIR_CONNECT_LIST_DOMAINS_TRANSIENT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_TRANSIENT) (running but not defined).\n\nThe next group of `flags` covers various domain states:\n[VIR_CONNECT_LIST_DOMAINS_RUNNING](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_RUNNING),\n[VIR_CONNECT_LIST_DOMAINS_PAUSED](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_PAUSED),\n[VIR_CONNECT_LIST_DOMAINS_SHUTOFF](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_SHUTOFF), and a catch-all for all other\nstates (such as crashed, this catch-all covers the possibility of adding new\nstates).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b": {"__data__": {"id_": "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a605e421-dcc4-4afa-85ee-89a288db5d3a", "node_type": null, "metadata": {}, "hash": "5cf58fc6e5c7e34bf3b4dc48f38babc2a714dd7b7967ec85992666ec8521aa7d"}, "3": {"node_id": "25d9ac87-180a-4db3-bd68-5fb9f2446902", "node_type": null, "metadata": {}, "hash": "17f01f338cddf26663ba33741ccc8fccb15c75db309cbbef1566064d32069ed8"}}, "hash": "ab28855e2c207680674d224134b470b533b04e0d111d7b9c6e26aef61b1ef3e7", "text": "The remaining groups cover boolean attributes commonly asked about domains;\nthey include [VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE) and\n[VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE), for filtering based on\nwhether a managed save image exists;\n[VIR_CONNECT_LIST_DOMAINS_AUTOSTART](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_AUTOSTART) and\n[VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART), for filtering based on\nautostart; [VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT) and\n[VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT), for filtering based on\nwhether a domain has snapshots;\n[VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT) and\n[VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT), for filtering based on\nwhether a domain has checkpoints.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "25d9ac87-180a-4db3-bd68-5fb9f2446902": {"__data__": {"id_": "25d9ac87-180a-4db3-bd68-5fb9f2446902", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b", "node_type": null, "metadata": {}, "hash": "ab28855e2c207680674d224134b470b533b04e0d111d7b9c6e26aef61b1ef3e7"}, "3": {"node_id": "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c", "node_type": null, "metadata": {}, "hash": "097b7c19b4fd93e6bfa2625b9d2d22c8ad240aa719b0e3af8886e34c816e0fb2"}}, "hash": "17f01f338cddf26663ba33741ccc8fccb15c75db309cbbef1566064d32069ed8", "text": "Example of usage:\n\n    \n    \n    virDomainPtr *domains;\n    size_t i;\n    int ret;\n    unsigned int flags = VIR_CONNECT_LIST_DOMAINS_RUNNING |\n                         VIR_CONNECT_LIST_DOMAINS_PERSISTENT;\n    ret = virConnectListAllDomains(conn, &domains, flags);\n    if (ret < 0)\n        error();\n    for (i = 0; i < ret; i++) {\n         do_something_with_domain(domains[i]);\n         //here or in a separate loop if needed\n         virDomainFree(domains[i]);\n    }\n    free(domains);\n\nconn\n\n    Pointer to the hypervisor connection.\ndomains\n\n    Pointer to a variable to store the array containing domain objects or NULL if the list is not required (just returns number of guests).\nflags\n\n    bitwise-OR of [virConnectListAllDomainsFlags](libvirt-libvirt-domain.html#virConnectListAllDomainsFlags)\nReturns\n\n    the number of domains found or -1 and sets domains to NULL in case of error. On success, the array stored into `domains` is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier. The caller is responsible for calling [virDomainFree](libvirt-libvirt-domain.html#virDomainFree)() on each array element, then calling free() on `domains`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c": {"__data__": {"id_": "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "25d9ac87-180a-4db3-bd68-5fb9f2446902", "node_type": null, "metadata": {}, "hash": "17f01f338cddf26663ba33741ccc8fccb15c75db309cbbef1566064d32069ed8"}, "3": {"node_id": "f8c87dfa-a189-442d-83d6-962496cbdb33", "node_type": null, "metadata": {}, "hash": "a1d902ca938ed16d1d3aa50873f53d4ead226f8e293d20fb1490d309aa7a396e"}}, "hash": "097b7c19b4fd93e6bfa2625b9d2d22c8ad240aa719b0e3af8886e34c816e0fb2", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectListDefinedDomains`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectListDefinedDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t char ** const names,\n    \t\t\t\t\t int maxnames)\n\nlist the defined but inactive domains, stores the pointers to the names in\n`names`\n\nThe use of this function is discouraged. Instead, use\n[virConnectListAllDomains](libvirt-libvirt-\ndomain.html#virConnectListAllDomains)().\n\nconn\n\n    pointer to the hypervisor connection\nnames\n\n    pointer to an array to store the names\nmaxnames\n\n    size of the array\nReturns\n\n    the number of names provided in the array or -1 in case of error. Note that this command is inherently racy; a domain can be defined between a call to [virConnectNumOfDefinedDomains](libvirt-libvirt-domain.html#virConnectNumOfDefinedDomains)() and this call; you are only guaranteed that all currently defined domains were listed if the return is less than `maxids`. The client must call free() on each returned name.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f8c87dfa-a189-442d-83d6-962496cbdb33": {"__data__": {"id_": "f8c87dfa-a189-442d-83d6-962496cbdb33", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c", "node_type": null, "metadata": {}, "hash": "097b7c19b4fd93e6bfa2625b9d2d22c8ad240aa719b0e3af8886e34c816e0fb2"}, "3": {"node_id": "35c814f2-19ab-4320-835c-10736be26a3e", "node_type": null, "metadata": {}, "hash": "cf7112178191a572443fd53f62f2d93ef25725cd279cb3289563839fef57bffb"}}, "hash": "a1d902ca938ed16d1d3aa50873f53d4ead226f8e293d20fb1490d309aa7a396e", "text": "The client must call free() on each returned name.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectListDomains`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectListDomains\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int * ids,\n    \t\t\t\t\t int maxids)\n\nCollect the list of active domains, and store their IDs in array `ids`\n\nThe use of this function is discouraged. Instead, use\n[virConnectListAllDomains](libvirt-libvirt-\ndomain.html#virConnectListAllDomains)().\n\nconn\n\n    pointer to the hypervisor connection\nids\n\n    array to collect the list of IDs of active domains\nmaxids\n\n    size of `ids`\nReturns\n\n    the number of domains found or -1 in case of error. Note that this command is inherently racy; a domain can be started between a call to [virConnectNumOfDomains](libvirt-libvirt-domain.html#virConnectNumOfDomains)() and this call; you are only guaranteed that all currently active domains were listed if the return is less than `maxids`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "35c814f2-19ab-4320-835c-10736be26a3e": {"__data__": {"id_": "35c814f2-19ab-4320-835c-10736be26a3e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f8c87dfa-a189-442d-83d6-962496cbdb33", "node_type": null, "metadata": {}, "hash": "a1d902ca938ed16d1d3aa50873f53d4ead226f8e293d20fb1490d309aa7a396e"}, "3": {"node_id": "a6895752-fdf1-477c-b3f3-5ec04c8df762", "node_type": null, "metadata": {}, "hash": "19a2c07d9450c68bf7ee14ce0280bd9b88fafa8a6604f6023c24437ebb061f3c"}}, "hash": "cf7112178191a572443fd53f62f2d93ef25725cd279cb3289563839fef57bffb", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectNumOfDefinedDomains`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectNumOfDefinedDomains\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nProvides the number of defined but inactive domains.\n\nconn\n\n    pointer to the hypervisor connection\nReturns\n\n    the number of domain found or -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virConnectNumOfDomains`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectNumOfDomains\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nProvides the number of active domains.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a6895752-fdf1-477c-b3f3-5ec04c8df762": {"__data__": {"id_": "a6895752-fdf1-477c-b3f3-5ec04c8df762", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "35c814f2-19ab-4320-835c-10736be26a3e", "node_type": null, "metadata": {}, "hash": "cf7112178191a572443fd53f62f2d93ef25725cd279cb3289563839fef57bffb"}, "3": {"node_id": "1945a342-c010-437b-942e-4aca09cf784d", "node_type": null, "metadata": {}, "hash": "c58998d5107b461f7958c570e18ae677a62b9ab85f2e21db61a31bbb07178d08"}}, "hash": "19a2c07d9450c68bf7ee14ce0280bd9b88fafa8a6604f6023c24437ebb061f3c", "text": "conn\n\n    pointer to the hypervisor connection\nReturns\n\n    the number of domain found or -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [search-\ndomains](../acl.html#perm_connect_search-domains)| -  \n  \n##### Access control return value filters\n\nObject| Permission  \n---|---  \ndomain| getattr  \n  \n### `virDomainAbortJob`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAbortJob\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nRequests that the current background job be aborted at the soonest\nopportunity. In case the job is a migration in a post-copy mode,\n[virDomainAbortJob](libvirt-libvirt-domain.html#virDomainAbortJob) will report\nan error (see [virDomainMigrateStartPostCopy](libvirt-libvirt-\ndomain.html#virDomainMigrateStartPostCopy) for more details).\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainAbortJobFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAbortJobFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nRequests that the current background job be aborted at the soonest\nopportunity.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1945a342-c010-437b-942e-4aca09cf784d": {"__data__": {"id_": "1945a342-c010-437b-942e-4aca09cf784d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a6895752-fdf1-477c-b3f3-5ec04c8df762", "node_type": null, "metadata": {}, "hash": "19a2c07d9450c68bf7ee14ce0280bd9b88fafa8a6604f6023c24437ebb061f3c"}, "3": {"node_id": "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de", "node_type": null, "metadata": {}, "hash": "677c5c335d3beef904ca44abbb7718e2172a87ad2036cd46924ebeeaa7dcd143"}}, "hash": "c58998d5107b461f7958c570e18ae677a62b9ab85f2e21db61a31bbb07178d08", "text": "In case the job is a migration in a post-copy mode, this function\nwill report an error unless [VIR_DOMAIN_ABORT_JOB_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_ABORT_JOB_POSTCOPY) flag is used (see\n[virDomainMigrateStartPostCopy](libvirt-libvirt-\ndomain.html#virDomainMigrateStartPostCopy) for more details).\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainAbortJobFlagsValues](libvirt-libvirt-domain.html#virDomainAbortJobFlagsValues)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainAddIOThread`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAddIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int iothread_id,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically add an IOThread to the domain. It is left up to the underlying\nvirtual hypervisor to determine the valid range for an `iothread_id` and\ndetermining whether the `iothread_id` already exists.\n\nNote that this call can fail if the underlying virtualization hypervisor does\nnot support it or if growing the number is arbitrarily limited. This function\nrequires privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de": {"__data__": {"id_": "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1945a342-c010-437b-942e-4aca09cf784d", "node_type": null, "metadata": {}, "hash": "c58998d5107b461f7958c570e18ae677a62b9ab85f2e21db61a31bbb07178d08"}, "3": {"node_id": "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3", "node_type": null, "metadata": {}, "hash": "ae0d5a27c747cb139c21b4f9982467da4e153c855a06893e9f9040648c65d471"}}, "hash": "677c5c335d3beef904ca44abbb7718e2172a87ad2036cd46924ebeeaa7dcd143", "text": "Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and may fail if domain is not\nalive. If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains. If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed.\n\ndomain\n\n    a domain object\niothread_id\n\n    the specific IOThread ID value to add\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3": {"__data__": {"id_": "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de", "node_type": null, "metadata": {}, "hash": "677c5c335d3beef904ca44abbb7718e2172a87ad2036cd46924ebeeaa7dcd143"}, "3": {"node_id": "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3", "node_type": null, "metadata": {}, "hash": "623d106af236b99eb6bd291ce62e2d665061a9663f6388c3b759ff74d53ae372"}}, "hash": "ae0d5a27c747cb139c21b4f9982467da4e153c855a06893e9f9040648c65d471", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainAgentSetResponseTimeout`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAgentSetResponseTimeout\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t\t int timeout,\n    \t\t\t\t\t\t unsigned int flags)\n\nSet how long to wait for a response from guest agent commands. By default,\nagent commands block forever waiting for a response.\n\n`timeout` must be a value from [virDomainAgentResponseTimeoutValues](libvirt-\nlibvirt-domain.html#virDomainAgentResponseTimeoutValues) or positive:\n\n    \n    \n    VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK(-2): meaning to block forever\n       waiting for a result.\n    VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT(-1): use default timeout value.\n    VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT(0): does not wait.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3": {"__data__": {"id_": "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3", "node_type": null, "metadata": {}, "hash": "ae0d5a27c747cb139c21b4f9982467da4e153c855a06893e9f9040648c65d471"}, "3": {"node_id": "79abd010-3a73-404f-92c5-6c7d53ade8f7", "node_type": null, "metadata": {}, "hash": "a7a9b5ad53dc0d0a5a0041a8f42414416f0b01c031a7dcfa2ef570a89d922f9f"}}, "hash": "623d106af236b99eb6bd291ce62e2d665061a9663f6388c3b759ff74d53ae372", "text": "positive value: wait for @timeout seconds\n\ndomain\n\n    a domain object\ntimeout\n\n    timeout in seconds\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 on success, -1 on failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainAttachDevice`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAttachDevice\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * xml)\n\nCreate a virtual device attachment to backend. This function, having hotplug\nsemantics, is only allowed on an active domain.\n\nFor compatibility, this method can also be used to change the media in an\nexisting CDROM/Floppy device, however, applications are recommended to use the\n[virDomainUpdateDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainUpdateDeviceFlags) method instead.\n\nBe aware that hotplug changes might not persist across a domain going into S4\nstate (also known as hibernation) unless you also modify the persistent domain\ndefinition.\n\ndomain\n\n    pointer to domain object\nxml\n\n    pointer to XML description of one device\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "79abd010-3a73-404f-92c5-6c7d53ade8f7": {"__data__": {"id_": "79abd010-3a73-404f-92c5-6c7d53ade8f7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3", "node_type": null, "metadata": {}, "hash": "623d106af236b99eb6bd291ce62e2d665061a9663f6388c3b759ff74d53ae372"}, "3": {"node_id": "d3df132f-0b27-44db-9b80-061faa504b67", "node_type": null, "metadata": {}, "hash": "aa0b270ecaf60015ba667b471d4745acff9267163bbf2c7be83059dc0544662c"}}, "hash": "a7a9b5ad53dc0d0a5a0041a8f42414416f0b01c031a7dcfa2ef570a89d922f9f", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainAttachDeviceFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAttachDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * xml,\n    \t\t\t\t\t unsigned int flags)\n\nAttach a virtual device to a domain, using the flags parameter to control how\nthe device is attached. [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT) specifies that the device allocation is\nmade based on current domain state. [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) specifies that the device shall be\nallocated to the active domain instance only and is not added to the persisted\ndomain configuration. [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) specifies that the device shall be\nallocated to the persisted domain configuration only. Note that the target\nhypervisor must return an error if unable to satisfy flags. E.g. the\nhypervisor driver will return failure if LIVE is specified but it only\nsupports modifying the persisted device allocation.\n\nFor compatibility, this method can also be used to change the media in an\nexisting CDROM/Floppy device, however, applications are recommended to use the\nvirDomainUpdateDeviceFlag method instead.\n\nBe aware that hotplug changes might not persist across a domain going into S4\nstate (also known as hibernation) unless you also modify the persistent domain\ndefinition.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d3df132f-0b27-44db-9b80-061faa504b67": {"__data__": {"id_": "d3df132f-0b27-44db-9b80-061faa504b67", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "79abd010-3a73-404f-92c5-6c7d53ade8f7", "node_type": null, "metadata": {}, "hash": "a7a9b5ad53dc0d0a5a0041a8f42414416f0b01c031a7dcfa2ef570a89d922f9f"}, "3": {"node_id": "f73f9d95-5c1f-42f5-9f9c-f937e929c23f", "node_type": null, "metadata": {}, "hash": "9117020a6105c77f04fb0214a2a2c9248e90d8285565515b3141e9406d2c5968"}}, "hash": "aa0b270ecaf60015ba667b471d4745acff9267163bbf2c7be83059dc0544662c", "text": "domain\n\n    pointer to domain object\nxml\n\n    pointer to XML description of one device\nflags\n\n    bitwise-OR of [virDomainDeviceModifyFlags](libvirt-libvirt-domain.html#virDomainDeviceModifyFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainAuthorizedSSHKeysGet`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAuthorizedSSHKeysGet\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * user,\n    \t\t\t\t\t char *** keys,\n    \t\t\t\t\t unsigned int flags)\n\nFor given `user` in `domain` fetch list of public SSH authorized keys and\nstore them into `keys` array which is allocated upon successful return and is\nNULL terminated. The caller is responsible for freeing `keys` when no longer\nneeded.\n\nKeys are in OpenSSH format (see sshd(8)) but from libvirt's point of view are\nopaque strings, i.e. not interpreted.\n\nPlease note that some hypervisors may require guest agent to be configured and\nrunning in order to be able to run this API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f73f9d95-5c1f-42f5-9f9c-f937e929c23f": {"__data__": {"id_": "f73f9d95-5c1f-42f5-9f9c-f937e929c23f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d3df132f-0b27-44db-9b80-061faa504b67", "node_type": null, "metadata": {}, "hash": "aa0b270ecaf60015ba667b471d4745acff9267163bbf2c7be83059dc0544662c"}, "3": {"node_id": "9218771b-bf1e-44f3-999b-b3fe84067247", "node_type": null, "metadata": {}, "hash": "feff25c3fefc9b372559a1505a5d650ae7bfdcadd772c55a7a8fa22768e272c0"}}, "hash": "9117020a6105c77f04fb0214a2a2c9248e90d8285565515b3141e9406d2c5968", "text": "domain\n\n    a domain object\nuser\n\n    user to list keys for\nkeys\n\n    pointer to a variable to store authorized keys\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    number of keys stored in `keys`, -1 otherwise.\n\n### `virDomainAuthorizedSSHKeysSet`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainAuthorizedSSHKeysSet\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * user,\n    \t\t\t\t\t const char ** keys,\n    \t\t\t\t\t unsigned int nkeys,\n    \t\t\t\t\t unsigned int flags)\n\nFor given `user` in `domain` set `keys` in authorized keys file. Any previous\ncontent of the file is overwritten with new keys. That is, if this API is\ncalled with `nkeys` = 0, `keys` = NULL and `flags` = 0 then the authorized\nkeys file for `user` is cleared out.\n\nKeys are in OpenSSH format (see sshd(8)) but from libvirt's point of view are\nopaque strings, i.e. not interpreted.\n\nIf [VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND) flag is set then the\nfile is not overwritten and new `keys` are appended instead.\n\nIf [VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE) flag is set then\ninstead of adding any new keys, provided `keys` are removed from the file.\nIt's not considered error if the key doesn't exist.\n\nPlease note that some hypervisors may require guest agent to be configured and\nrunning in order to be able to run this API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9218771b-bf1e-44f3-999b-b3fe84067247": {"__data__": {"id_": "9218771b-bf1e-44f3-999b-b3fe84067247", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f73f9d95-5c1f-42f5-9f9c-f937e929c23f", "node_type": null, "metadata": {}, "hash": "9117020a6105c77f04fb0214a2a2c9248e90d8285565515b3141e9406d2c5968"}, "3": {"node_id": "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c", "node_type": null, "metadata": {}, "hash": "261708ead83213e948382125e9d9030004130e8bf45fa7438985820761f04523"}}, "hash": "feff25c3fefc9b372559a1505a5d650ae7bfdcadd772c55a7a8fa22768e272c0", "text": "domain\n\n    a domain object\nuser\n\n    user to add keys for\nkeys\n\n    authorized keys to set\nnkeys\n\n    number of keys in `keys` array\nflags\n\n    bitwise or of [virDomainAuthorizedSSHKeysSetFlags](libvirt-libvirt-domain.html#virDomainAuthorizedSSHKeysSetFlags)\nReturns\n\n    0 on success, -1 otherwise.\n\n### `virDomainBackupBegin`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBackupBegin\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * backupXML,\n    \t\t\t\t\t const char * checkpointXML,\n    \t\t\t\t\t unsigned int flags)\n\nStart a point-in-time backup job for the specified disks of a running domain.\n\nA backup job is a domain job and thus mutually exclusive with any other domain\njob such as migration.\n\nFor now, backup jobs are also mutually exclusive with any other block job on\nthe same device, although this restriction may be lifted in a future release.\nProgress of the backup job can be tracked via [virDomainGetJobStats](libvirt-\nlibvirt-domain.html#virDomainGetJobStats)(). Completion of the job is also\nannounced asynchronously via [VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) event.\n\nThere are two fundamental backup approaches. The first, called a push model,\ninstructs the hypervisor to copy the state of the guest disk to the designated\nstorage destination (which may be on the local file system or a network\ndevice).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c": {"__data__": {"id_": "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9218771b-bf1e-44f3-999b-b3fe84067247", "node_type": null, "metadata": {}, "hash": "feff25c3fefc9b372559a1505a5d650ae7bfdcadd772c55a7a8fa22768e272c0"}, "3": {"node_id": "f86095e1-5348-456b-8568-76fd77fd09b8", "node_type": null, "metadata": {}, "hash": "579c2ceee796503b404bbca7855af2e8794991d4112b84fb013d2b1b4a7195e8"}}, "hash": "261708ead83213e948382125e9d9030004130e8bf45fa7438985820761f04523", "text": "In this mode, the hypervisor writes the content of the guest disk to\nthe destination, then emits [VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) when the backup is\neither complete or failed (the backup image is invalid if the job fails or\n[virDomainAbortJob](libvirt-libvirt-domain.html#virDomainAbortJob)() is used\nprior to the event being emitted). This kind of the job finishes\nautomatically. Users can determine success by using\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)()\nwith [VIR_DOMAIN_JOB_STATS_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_STATS_COMPLETED) flag.\n\nThe second, called a pull model, instructs the hypervisor to expose the state\nof the guest disk over an NBD export. A third-party client can then connect to\nthis export and read whichever portions of the disk it desires. In this mode\nlibvirt has to be informed via [virDomainAbortJob](libvirt-libvirt-\ndomain.html#virDomainAbortJob)() when the third-party NBD client is done and\nthe backup resources can be released.\n\nThe `backupXML` parameter contains details about the backup in the top-level\nelement <domainbackup>, including which backup mode to use, whether the backup\nis incremental from a previous checkpoint, which disks participate in the\nbackup, the destination for a push model backup, and the temporary storage and\nNBD server details for a pull model backup.\n\n[virDomainBackupGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainBackupGetXMLDesc)() can be called to learn actual values\nselected.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f86095e1-5348-456b-8568-76fd77fd09b8": {"__data__": {"id_": "f86095e1-5348-456b-8568-76fd77fd09b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c", "node_type": null, "metadata": {}, "hash": "261708ead83213e948382125e9d9030004130e8bf45fa7438985820761f04523"}, "3": {"node_id": "c8784db6-0a2d-493d-9c90-be0a6ac71036", "node_type": null, "metadata": {}, "hash": "2dddd7c495169ca516058c0bf9d7a6c0a9bd2b42c5e08d06fdf01785aea0d10f"}}, "hash": "579c2ceee796503b404bbca7855af2e8794991d4112b84fb013d2b1b4a7195e8", "text": "For more information, see\n<https://libvirt.org/formatbackup.html#backup-xml>\n\nThe `checkpointXML` parameter is optional; if non-NULL, then libvirt behaves\nas if [virDomainCheckpointCreateXML](libvirt-libvirt-domain-\ncheckpoint.html#virDomainCheckpointCreateXML)() were called to create a\ncheckpoint atomically covering the same point in time as the backup.\n\nThe [VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL) specifies that the output\nor temporary files described by the `backupXML` document were created by the\ncaller with correct format and size to hold the backup or temporary data.\n\nThe creation of a new checkpoint allows for future incremental backups. Note\nthat some hypervisors may require a particular disk format, such as qcow2, in\norder to take advantage of checkpoints, while allowing arbitrary formats if\ncheckpoints are not involved.\n\ndomain\n\n    a domain object\nbackupXML\n\n    description of the requested backup\ncheckpointXML\n\n    description of a checkpoint to create or NULL\nflags\n\n    bitwise or of [virDomainBackupBeginFlags](libvirt-libvirt-domain.html#virDomainBackupBeginFlags)\nReturns\n\n    0 on success or -1 on failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c8784db6-0a2d-493d-9c90-be0a6ac71036": {"__data__": {"id_": "c8784db6-0a2d-493d-9c90-be0a6ac71036", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f86095e1-5348-456b-8568-76fd77fd09b8", "node_type": null, "metadata": {}, "hash": "579c2ceee796503b404bbca7855af2e8794991d4112b84fb013d2b1b4a7195e8"}, "3": {"node_id": "0675d9da-cb75-430d-99ec-38d765a840de", "node_type": null, "metadata": {}, "hash": "5be11c9462c9cb7ab226ede930d93adde06d2b64d4c752c5dfc4ac3690535143"}}, "hash": "2dddd7c495169ca516058c0bf9d7a6c0a9bd2b42c5e08d06fdf01785aea0d10f", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[checkpoint](../acl.html#perm_domain_checkpoint)| -  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBackupGetXMLDesc`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainBackupGetXMLDesc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nQueries the configuration of the active backup job.\n\nIn some cases, a user can start a backup job without supplying all details and\nrely on libvirt to fill in the rest (for example, selecting the port used for\nan NBD export). This API can then be used to learn what default values were\nchosen.\n\ndomain\n\n    a domain object\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    a NUL-terminated UTF-8 encoded XML instance or NULL in case of error. The caller must free() the returned value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0675d9da-cb75-430d-99ec-38d765a840de": {"__data__": {"id_": "0675d9da-cb75-430d-99ec-38d765a840de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c8784db6-0a2d-493d-9c90-be0a6ac71036", "node_type": null, "metadata": {}, "hash": "2dddd7c495169ca516058c0bf9d7a6c0a9bd2b42c5e08d06fdf01785aea0d10f"}, "3": {"node_id": "d270b055-0ab2-433d-a1dd-fd005123817d", "node_type": null, "metadata": {}, "hash": "eb9adf772322dc31a2fa55216916534812030377375ed7d528bcfff3d9091927"}}, "hash": "5be11c9462c9cb7ab226ede930d93adde06d2b64d4c752c5dfc4ac3690535143", "text": "The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainBlockCommit`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockCommit\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t const char * base,\n    \t\t\t\t\t const char * top,\n    \t\t\t\t\t unsigned long bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nCommit changes that were made to temporary top-level files within a disk image\nbacking file chain into a lower-level base file. In other words, take all the\ndifference between `base` and `top`, and update `base` to contain that\ndifference; after the commit, any portion of the chain that previously\ndepended on `top` will now depend on `base`, and all files after `base` up to\nand including `top` will now be invalidated. A typical use of this command is\nto reduce the length of a backing file chain after taking an external disk\nsnapshot. To move data in the opposite direction, see\n[virDomainBlockPull](libvirt-libvirt-domain.html#virDomainBlockPull)().\n\nThis command starts a long-running commit block job, whose status may be\ntracked by [virDomainBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainBlockJobInfo)() with a job type of\n[VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT), and the operation can be\naborted with [virDomainBlockJobAbort](libvirt-libvirt-\ndomain.html#virDomainBlockJobAbort)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d270b055-0ab2-433d-a1dd-fd005123817d": {"__data__": {"id_": "d270b055-0ab2-433d-a1dd-fd005123817d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0675d9da-cb75-430d-99ec-38d765a840de", "node_type": null, "metadata": {}, "hash": "5be11c9462c9cb7ab226ede930d93adde06d2b64d4c752c5dfc4ac3690535143"}, "3": {"node_id": "09de3d53-0008-411b-a2ea-2b4156d2de6f", "node_type": null, "metadata": {}, "hash": "ef248dbb67dc8dbf2895c8c7b6d2f9dc7acd34d23b5349042248cb187e0700a6"}}, "hash": "eb9adf772322dc31a2fa55216916534812030377375ed7d528bcfff3d9091927", "text": "When finished, an asynchronous event is\nraised to indicate the final status, and the job no longer exists. If the job\nis aborted, it is up to the hypervisor whether starting a new job will resume\nfrom the same point, or start over.\n\nAs a special case, if `top` is the active image (or NULL), and `flags`\nincludes [VIR_DOMAIN_BLOCK_COMMIT_ACTIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COMMIT_ACTIVE), the block job will have a type of\n[VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT), and operates in two\nphases. In the first phase, the contents are being committed into `base`, and\nthe job can only be canceled. The job transitions to the second phase when the\nblock job event with state [VIR_DOMAIN_BLOCK_JOB_READY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_READY) is emitted for the given device. This\ninformation is also visible in the live XML as 'ready=\"yes\"' attribute of the\ncorresponding <mirror> element. Once in the second phase, the user must choose\nwhether to cancel the job (keeping `top` as the active image, but now\ncontaining only the changes since the time the job ended) or to pivot the job\n(adjusting to `base` as the active image, and invalidating `top`).\n\nBe aware that this command may invalidate files even if it is aborted; the\nuser is cautioned against relying on the contents of invalidated intermediate\nfiles such as `top` (when `top` is not the active image) without manually\nrebasing those files to use a backing file of a read-only copy of `base` prior\nto the point where the commit operation was started (and such a rebase cannot\nbe safely done until the commit has successfully completed). However, the\ndomain itself will not have any issues; the active layer remains valid\nthroughout the entire commit operation.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "09de3d53-0008-411b-a2ea-2b4156d2de6f": {"__data__": {"id_": "09de3d53-0008-411b-a2ea-2b4156d2de6f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d270b055-0ab2-433d-a1dd-fd005123817d", "node_type": null, "metadata": {}, "hash": "eb9adf772322dc31a2fa55216916534812030377375ed7d528bcfff3d9091927"}, "3": {"node_id": "84ba11b0-dad0-418c-8b37-8f865e1d0743", "node_type": null, "metadata": {}, "hash": "bfa3e98ed0fdc0f66853277f13e7d042a673f5ef082cad78523948ea24dd7783"}}, "hash": "ef248dbb67dc8dbf2895c8c7b6d2f9dc7acd34d23b5349042248cb187e0700a6", "text": "Some hypervisors may support a shortcut where if `flags` contains\n[VIR_DOMAIN_BLOCK_COMMIT_DELETE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COMMIT_DELETE), then this command will unlink all\nfiles that were invalidated, after the commit successfully completes.\n\nIf `flags` contains [VIR_DOMAIN_BLOCK_COMMIT_RELATIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COMMIT_RELATIVE), the name recorded into the\noverlay of the `top` image (if there is such image) as the path to the new\nbacking file will be kept relative to other images. The operation will fail if\nlibvirt can't infer the name.\n\nBy default, if `base` is NULL, the commit target will be the bottom of the\nbacking chain; if `flags` contains [VIR_DOMAIN_BLOCK_COMMIT_SHALLOW](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_BLOCK_COMMIT_SHALLOW), then the immediate\nbacking file of `top` will be used instead. If `top` is NULL, the active image\nat the top of the chain will be used. Some hypervisors place restrictions on\nhow much can be committed, and might fail if `base` is not the immediate\nbacking file of `top`, or if `top` is the active layer in use by a running\ndomain but `flags` did not include [VIR_DOMAIN_BLOCK_COMMIT_ACTIVE](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_BLOCK_COMMIT_ACTIVE), or if `top` is not the\ntop-most file; restrictions may differ for online vs. offline domains.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"vda\").", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "84ba11b0-dad0-418c-8b37-8f865e1d0743": {"__data__": {"id_": "84ba11b0-dad0-418c-8b37-8f865e1d0743", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "09de3d53-0008-411b-a2ea-2b4156d2de6f", "node_type": null, "metadata": {}, "hash": "ef248dbb67dc8dbf2895c8c7b6d2f9dc7acd34d23b5349042248cb187e0700a6"}, "3": {"node_id": "606e2612-cd8d-4126-9b0d-c0ac4cb148e7", "node_type": null, "metadata": {}, "hash": "afe6023367e0dfc3f189822ec1305bde48d62dc6bdf95915163316d8dadeae39"}}, "hash": "bfa3e98ed0fdc0f66853277f13e7d042a673f5ef082cad78523948ea24dd7783", "text": "Valid names can be found by calling [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nThe `base` and `top` parameters can be either paths to files within the\nbacking chain, or the device target shorthand (the <target dev='...'/> sub-\nelement, such as \"vda\") followed by an index to the backing chain enclosed in\nsquare brackets. Backing chain indexes can be found by inspecting\n//disk//backingStore/`//disk//backingStore/index` in the domain XML. Thus, for\nexample, \"vda[3]\" refers to the backing store with index equal to \"3\" in the\nchain of disk \"vda\".\n\nThe maximum bandwidth that will be used to do the commit can be specified with\nthe `bandwidth` parameter. If set to 0, there is no limit. If `flags` includes\n[VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES), `bandwidth` is in\nbytes/second; otherwise, it is in MiB/second. Values larger than 2^52\nbytes/sec may be rejected due to overflow considerations based on the word\nsize of both client and server, and values larger than 2^31 bytes/sec may\ncause overflow problems if later queried by\n[virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() without scaling. Hypervisors may\nfurther restrict the range of valid bandwidth values. Some hypervisors do not\nsupport this feature and will return an error if bandwidth is not 0; in this\ncase, it might still be possible for a later call to\n[virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)() to succeed. The actual speed can be\ndetermined with [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "606e2612-cd8d-4126-9b0d-c0ac4cb148e7": {"__data__": {"id_": "606e2612-cd8d-4126-9b0d-c0ac4cb148e7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "84ba11b0-dad0-418c-8b37-8f865e1d0743", "node_type": null, "metadata": {}, "hash": "bfa3e98ed0fdc0f66853277f13e7d042a673f5ef082cad78523948ea24dd7783"}, "3": {"node_id": "7a53ea1f-57c9-478b-8c0c-818872c024fd", "node_type": null, "metadata": {}, "hash": "f58cfb5d30328dc444d0f9c640d67f5684f28ebff5713522be9358670f0d8be2"}}, "hash": "afe6023367e0dfc3f189822ec1305bde48d62dc6bdf95915163316d8dadeae39", "text": "dom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nbase\n\n    path to backing file to merge into, or device shorthand, or NULL for default\ntop\n\n    path to file within backing chain that contains data to be merged, or device shorthand, or NULL to merge all possible data\nbandwidth\n\n    (optional) specify bandwidth limit; flags determine the unit\nflags\n\n    bitwise-OR of [virDomainBlockCommitFlags](libvirt-libvirt-domain.html#virDomainBlockCommitFlags)\nReturns\n\n    0 if the operation has started, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBlockCopy`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockCopy\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t const char * destxml,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nCopy the guest-visible contents of a disk image to a new file described by\n`destxml`. The destination XML has a top-level element of <disk>, and\nresembles what is used when hot-plugging a disk via\n[virDomainAttachDevice](libvirt-libvirt-domain.html#virDomainAttachDevice)(),\nexcept that only sub-elements related to describing the new host resource are\nnecessary (sub-elements related to the guest view, such as <target>, are\nignored).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a53ea1f-57c9-478b-8c0c-818872c024fd": {"__data__": {"id_": "7a53ea1f-57c9-478b-8c0c-818872c024fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "606e2612-cd8d-4126-9b0d-c0ac4cb148e7", "node_type": null, "metadata": {}, "hash": "afe6023367e0dfc3f189822ec1305bde48d62dc6bdf95915163316d8dadeae39"}, "3": {"node_id": "289ab008-1e36-4d84-a2ec-ce3fdd947cae", "node_type": null, "metadata": {}, "hash": "924ca351fb347fc62f23e9a84259c742c134958b6c7dbb131f73dc3e3838aeb9"}}, "hash": "f58cfb5d30328dc444d0f9c640d67f5684f28ebff5713522be9358670f0d8be2", "text": "It is strongly recommended to include a <driver type='...'/> format\ndesignation for the destination, to avoid the potential of any security\nproblem that might be caused by probing a file for its format.\n\nThis command starts a long-running copy. By default, the copy will pull the\nentire source chain into the destination file, but if `flags` also contains\n[VIR_DOMAIN_BLOCK_COPY_SHALLOW](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COPY_SHALLOW), then only the top of the source\nchain will be copied (the source and destination have a common backing file).\nThe format of the destination file is controlled by the <driver> sub-element\nof the XML. The destination will be created unless the\n[VIR_DOMAIN_BLOCK_COPY_REUSE_EXT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COPY_REUSE_EXT) flag is present stating that the\nfile was pre-created with the correct format and metadata and sufficient size\nto hold the copy. In case the [VIR_DOMAIN_BLOCK_COPY_SHALLOW](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COPY_SHALLOW) flag is used the pre-created file\nhas to exhibit the same guest visible contents as the backing file of the\noriginal image. This allows a management app to pre-create files with relative\nbacking file names, rather than the default of absolute backing file names.\n\nA copy job has two parts; in the first phase, the source is copied into the\ndestination, and the job can only be canceled by reverting to the source file;\nprogress in this phase can be tracked via the [virDomainBlockJobInfo](libvirt-\nlibvirt-domain.html#virDomainBlockJobInfo)() command, with a job type of\n[VIR_DOMAIN_BLOCK_JOB_TYPE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_COPY).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "289ab008-1e36-4d84-a2ec-ce3fdd947cae": {"__data__": {"id_": "289ab008-1e36-4d84-a2ec-ce3fdd947cae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7a53ea1f-57c9-478b-8c0c-818872c024fd", "node_type": null, "metadata": {}, "hash": "f58cfb5d30328dc444d0f9c640d67f5684f28ebff5713522be9358670f0d8be2"}, "3": {"node_id": "e0afff3b-1044-4c3d-b448-0b0d532cfe70", "node_type": null, "metadata": {}, "hash": "9db850e3656f74c51cd3eee7869ffc3e923af87c94f75483b28be3b49a628228"}}, "hash": "924ca351fb347fc62f23e9a84259c742c134958b6c7dbb131f73dc3e3838aeb9", "text": "The job transitions to the second\nphase when the block job event with state\n[VIR_DOMAIN_BLOCK_JOB_READY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_READY) is emitted for the given device. This\ninformation is also visible in the live XML as 'ready=\"yes\"' attribute of the\ncorresponding <mirror> element. All further changes are saved to both source\nand destination. The user must call [virDomainBlockJobAbort](libvirt-libvirt-\ndomain.html#virDomainBlockJobAbort)() to end the mirroring while choosing\nwhether to revert to source or pivot to the destination. An event is issued\nwhen the job ends, and depending on the hypervisor, an event may also be\nissued when the job transitions from pulling to mirroring. If the job is\naborted, a new job will have to start over from the beginning of the first\nphase.\n\nSome hypervisors will restrict certain actions, such as\n[virDomainSave](libvirt-libvirt-domain.html#virDomainSave)() or\n[virDomainDetachDevice](libvirt-libvirt-domain.html#virDomainDetachDevice)(),\nwhile a copy job is active; they may also restrict a copy job to transient\ndomains.\n\nIf `flags` contains [VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB) the job will not be\nrecoverable if the VM is turned off while job is active. This flag will remove\nthe restriction of copy jobs to transient domains. Note that this flag is\nautomatically implied if the VM is transient at the time it's started.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e0afff3b-1044-4c3d-b448-0b0d532cfe70": {"__data__": {"id_": "e0afff3b-1044-4c3d-b448-0b0d532cfe70", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "289ab008-1e36-4d84-a2ec-ce3fdd947cae", "node_type": null, "metadata": {}, "hash": "924ca351fb347fc62f23e9a84259c742c134958b6c7dbb131f73dc3e3838aeb9"}, "3": {"node_id": "c7f5b3ce-2815-4eaf-b04a-d6d23d451049", "node_type": null, "metadata": {}, "hash": "0a42806aafffa51f5562c3fd2b2cda5a58acedb18d56ab5e113e3ddc037a3b91"}}, "hash": "9db850e3656f74c51cd3eee7869ffc3e923af87c94f75483b28be3b49a628228", "text": "If `flags` contains [VIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES) the job will\nwait for guest writes to be propagated both to the original image and to the\ndestination of the copy so that it's guaranteed that the job converges if the\ndestination storage is slower. This may impact performance of writes while the\nblockjob is running.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"vda\").\nValid names can be found by calling [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nThe `params` and `nparams` arguments can be used to set hypervisor-specific\ntuning parameters, such as maximum bandwidth or granularity. For a parameter\nthat the hypervisor understands, explicitly specifying 0 behaves the same as\nomitting the parameter, to use the hypervisor default; however, omitting a\nparameter is less likely to fail.\n\nThis command is a superset of the older [virDomainBlockRebase](libvirt-\nlibvirt-domain.html#virDomainBlockRebase)() when used with the\n[VIR_DOMAIN_BLOCK_REBASE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_COPY) flag, and offers better control over\nthe destination format, the ability to copy to a destination that is not a\nlocal file, and the possibility of additional tuning parameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c7f5b3ce-2815-4eaf-b04a-d6d23d451049": {"__data__": {"id_": "c7f5b3ce-2815-4eaf-b04a-d6d23d451049", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e0afff3b-1044-4c3d-b448-0b0d532cfe70", "node_type": null, "metadata": {}, "hash": "9db850e3656f74c51cd3eee7869ffc3e923af87c94f75483b28be3b49a628228"}, "3": {"node_id": "caa20907-9305-4e2d-a70e-c3fe4ee2073f", "node_type": null, "metadata": {}, "hash": "6caa883c8d79e7c62c83c4e459180715cdad63e74e58536c8b2cf592f7004688"}}, "hash": "0a42806aafffa51f5562c3fd2b2cda5a58acedb18d56ab5e113e3ddc037a3b91", "text": "dom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\ndestxml\n\n    XML description of the copy destination\nparams\n\n    Pointer to block copy parameter objects, or NULL\nnparams\n\n    Number of block copy parameters (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainBlockCopyFlags](libvirt-libvirt-domain.html#virDomainBlockCopyFlags)\nReturns\n\n    0 if the operation has started, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBlockJobAbort`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockJobAbort\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t unsigned int flags)\n\nCancel the active block job on the given disk.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nIf the current block job for `disk` is\n[VIR_DOMAIN_BLOCK_JOB_TYPE_PULL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_PULL), then by default, this function\nperforms a synchronous operation and the caller may assume that the operation\nhas completed when 0 is returned.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "caa20907-9305-4e2d-a70e-c3fe4ee2073f": {"__data__": {"id_": "caa20907-9305-4e2d-a70e-c3fe4ee2073f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c7f5b3ce-2815-4eaf-b04a-d6d23d451049", "node_type": null, "metadata": {}, "hash": "0a42806aafffa51f5562c3fd2b2cda5a58acedb18d56ab5e113e3ddc037a3b91"}, "3": {"node_id": "c78edbbb-3545-49bd-b784-e44e443973f5", "node_type": null, "metadata": {}, "hash": "34217afa43efa6e448bbec7053232f7ebfb09a3f21100637ace0cd5328f648b0"}}, "hash": "6caa883c8d79e7c62c83c4e459180715cdad63e74e58536c8b2cf592f7004688", "text": "However, BlockJob operations may take a long\ntime to cancel, and during this time further domain interactions may be\nunresponsive. To avoid this problem, pass\n[VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC) in the `flags` argument to\nenable asynchronous behavior, returning as soon as possible. When the job has\nbeen canceled, a BlockJob event will be emitted, with status\n[VIR_DOMAIN_BLOCK_JOB_CANCELED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_CANCELED) (even if the ABORT_ASYNC flag was\nnot used); it is also possible to poll [virDomainBlockJobInfo](libvirt-\nlibvirt-domain.html#virDomainBlockJobInfo)() to see if the job cancellation is\nstill pending. This type of job can be restarted to pick up from where it left\noff.\n\nIf the current block job for `disk` is\n[VIR_DOMAIN_BLOCK_JOB_TYPE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_COPY), then the default is to abort the\nmirroring and revert to the source disk; likewise, if the current job is\n[VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT), the default is to abort\nwithout changing the active layer of `disk`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c78edbbb-3545-49bd-b784-e44e443973f5": {"__data__": {"id_": "c78edbbb-3545-49bd-b784-e44e443973f5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "caa20907-9305-4e2d-a70e-c3fe4ee2073f", "node_type": null, "metadata": {}, "hash": "6caa883c8d79e7c62c83c4e459180715cdad63e74e58536c8b2cf592f7004688"}, "3": {"node_id": "290a11a9-2638-495b-89e5-cfb9ed3d86ed", "node_type": null, "metadata": {}, "hash": "17af93d43b9e6a61e06895e43e9865e0d8e77f0505fbb8270bc069a2bfcf371e"}}, "hash": "34217afa43efa6e448bbec7053232f7ebfb09a3f21100637ace0cd5328f648b0", "text": "Adding `flags` of\n[VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT) causes this call to fail with\n[VIR_ERR_BLOCK_COPY_ACTIVE](libvirt-virterror.html#VIR_ERR_BLOCK_COPY_ACTIVE)\nif the copy or commit is not yet ready; otherwise it will swap the disk over\nto the new active image to end the mirroring or active commit. An event will\nbe issued when the job is ended, and it is possible to use\n[VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC) to control whether this command\nwaits for the completion of the job. Restarting a copy or active commit job\nrequires starting over from the beginning of the first phase.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nflags\n\n    bitwise-OR of [virDomainBlockJobAbortFlags](libvirt-libvirt-domain.html#virDomainBlockJobAbortFlags)\nReturns\n\n    -1 in case of failure, 0 when successful.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainBlockJobSetSpeed`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockJobSetSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t unsigned long bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nSet the maximum allowable bandwidth that a block job may consume.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "290a11a9-2638-495b-89e5-cfb9ed3d86ed": {"__data__": {"id_": "290a11a9-2638-495b-89e5-cfb9ed3d86ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c78edbbb-3545-49bd-b784-e44e443973f5", "node_type": null, "metadata": {}, "hash": "34217afa43efa6e448bbec7053232f7ebfb09a3f21100637ace0cd5328f648b0"}, "3": {"node_id": "fd6a304c-1da1-481b-a909-b87341899aa5", "node_type": null, "metadata": {}, "hash": "e75a11ee25037e8770be9820bffdcd2fb45d5bd725c3d199608eb751fb739445"}}, "hash": "17af93d43b9e6a61e06895e43e9865e0d8e77f0505fbb8270bc069a2bfcf371e", "text": "If bandwidth\nis 0, the limit will revert to the hypervisor default of unlimited.\n\nIf `flags` contains [VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES), `bandwidth`\nis in bytes/second; otherwise, it is in MiB/second. Values larger than 2^52\nbytes/sec may be rejected due to overflow considerations based on the word\nsize of both client and server, and values larger than 2^31 bytes/sec may\ncause overflow problems if later queried by\n[virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() without scaling. Hypervisors may\nfurther restrict the range of valid bandwidth values.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nbandwidth\n\n    specify bandwidth limit; flags determine the unit\nflags\n\n    bitwise-OR of [virDomainBlockJobSetSpeedFlags](libvirt-libvirt-domain.html#virDomainBlockJobSetSpeedFlags)\nReturns\n\n    -1 in case of failure, 0 when successful.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fd6a304c-1da1-481b-a909-b87341899aa5": {"__data__": {"id_": "fd6a304c-1da1-481b-a909-b87341899aa5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "290a11a9-2638-495b-89e5-cfb9ed3d86ed", "node_type": null, "metadata": {}, "hash": "17af93d43b9e6a61e06895e43e9865e0d8e77f0505fbb8270bc069a2bfcf371e"}, "3": {"node_id": "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a", "node_type": null, "metadata": {}, "hash": "ba23ba9f7a9718927e265b96b28d594440bf38cb25486f49f62d2dbbc0fe2e70"}}, "hash": "e75a11ee25037e8770be9820bffdcd2fb45d5bd725c3d199608eb751fb739445", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainBlockPeek`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockPeek\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t unsigned long long offset,\n    \t\t\t\t\t size_t size,\n    \t\t\t\t\t void * buffer,\n    \t\t\t\t\t unsigned int flags)\n\nThis function allows you to read the contents of a domain's disk device.\n\nTypical uses for this are to determine if the domain has written a Master Boot\nRecord (indicating that the domain has completed installation), or to try to\nwork out the state of the domain's filesystems.\n\n(Note that in the local case you might try to open the block device or file\ndirectly, but that won't work in the remote case, nor if you don't have\nsufficient permission. Hence the need for this call).\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\n'offset' and 'size' represent an area which must lie entirely within the\ndevice or file. 'size' may be 0 to test if the call would succeed.\n\n'buffer' is the return buffer and must be at least 'size' bytes.\n\nNB. The remote driver imposes a 64K byte limit on 'size'.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a": {"__data__": {"id_": "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fd6a304c-1da1-481b-a909-b87341899aa5", "node_type": null, "metadata": {}, "hash": "e75a11ee25037e8770be9820bffdcd2fb45d5bd725c3d199608eb751fb739445"}, "3": {"node_id": "4954cf34-3a02-4c6a-94f4-88d0b33a00e0", "node_type": null, "metadata": {}, "hash": "a6c2ed64825265669df66e2d592a733fb9c203f3c99380eb09c0ed23977b22b3"}}, "hash": "ba23ba9f7a9718927e265b96b28d594440bf38cb25486f49f62d2dbbc0fe2e70", "text": "NB. The remote driver imposes a 64K byte limit on 'size'. For your program to\nbe able to work reliably over a remote connection you should split large\nrequests to <= 65536 bytes. However, with 0.9.13 this RPC limit has been\nraised to 1M byte. Starting with version 1.0.6 the RPC limit has been raised\nagain. Now large requests up to 16M byte are supported.\n\ndom\n\n    pointer to the domain object\ndisk\n\n    path to the block device, or device shorthand\noffset\n\n    offset within block device\nsize\n\n    size to read\nbuffer\n\n    return buffer (must be at least size bytes)\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success or -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nread](../acl.html#perm_domain_block-read)| -  \n  \n### `virDomainBlockPull`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockPull\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t unsigned long bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nPopulate a disk image with data from its backing image. Once all data from its\nbacking image has been pulled, the disk no longer depends on a backing image.\nThis function pulls data for the entire device in the background. Progress of\nthe operation can be checked with [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() and the operation can be aborted with\n[virDomainBlockJobAbort](libvirt-libvirt-\ndomain.html#virDomainBlockJobAbort)(). When finished, an asynchronous event is\nraised to indicate the final status.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4954cf34-3a02-4c6a-94f4-88d0b33a00e0": {"__data__": {"id_": "4954cf34-3a02-4c6a-94f4-88d0b33a00e0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a", "node_type": null, "metadata": {}, "hash": "ba23ba9f7a9718927e265b96b28d594440bf38cb25486f49f62d2dbbc0fe2e70"}, "3": {"node_id": "0155cbeb-1ab3-4158-9036-d3c926c00206", "node_type": null, "metadata": {}, "hash": "9d899d674290b013b7dfb6996a70387942c435aa6aee8065150ad67e40cd619b"}}, "hash": "a6c2ed64825265669df66e2d592a733fb9c203f3c99380eb09c0ed23977b22b3", "text": "When finished, an asynchronous event is\nraised to indicate the final status. To move data in the opposite direction,\nsee [virDomainBlockCommit](libvirt-libvirt-\ndomain.html#virDomainBlockCommit)().\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nThe maximum bandwidth that will be used to do the copy can be specified with\nthe `bandwidth` parameter. If set to 0, there is no limit. If `flags` includes\n[VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES), `bandwidth` is in\nbytes/second; otherwise, it is in MiB/second. Values larger than 2^52\nbytes/sec may be rejected due to overflow considerations based on the word\nsize of both client and server, and values larger than 2^31 bytes/sec may\ncause overflow problems if later queried by\n[virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() without scaling. Hypervisors may\nfurther restrict the range of valid bandwidth values. Some hypervisors do not\nsupport this feature and will return an error if bandwidth is not 0; in this\ncase, it might still be possible for a later call to\n[virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)() to succeed. The actual speed can be\ndetermined with [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0155cbeb-1ab3-4158-9036-d3c926c00206": {"__data__": {"id_": "0155cbeb-1ab3-4158-9036-d3c926c00206", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4954cf34-3a02-4c6a-94f4-88d0b33a00e0", "node_type": null, "metadata": {}, "hash": "a6c2ed64825265669df66e2d592a733fb9c203f3c99380eb09c0ed23977b22b3"}, "3": {"node_id": "97242db6-b061-4453-9d20-67cfc43a9d90", "node_type": null, "metadata": {}, "hash": "db815499c5a0286af9b69b9954f8351e06d4e6dd44824535bbaa7b92e6f815e0"}}, "hash": "9d899d674290b013b7dfb6996a70387942c435aa6aee8065150ad67e40cd619b", "text": "This is shorthand for [virDomainBlockRebase](libvirt-libvirt-\ndomain.html#virDomainBlockRebase)() with a NULL base.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nbandwidth\n\n    (optional) specify bandwidth limit; flags determine the unit\nflags\n\n    bitwise-OR of [virDomainBlockPullFlags](libvirt-libvirt-domain.html#virDomainBlockPullFlags)\nReturns\n\n    0 if the operation has started, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBlockRebase`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockRebase\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t const char * base,\n    \t\t\t\t\t unsigned long bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nPopulate a disk image with data from its backing image chain, and setting the\nbacking image to `base`, or alternatively copy an entire backing chain to a\nnew file `base`.\n\nWhen `flags` is 0, this starts a pull, where `base` must be the absolute path\nof one of the backing images further up the chain, or NULL to convert the disk\nimage so that it has no backing image. Once all data from its backing image\nchain has been pulled, the disk no longer depends on those intermediate\nbacking images. This function pulls data for the entire device in the\nbackground.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97242db6-b061-4453-9d20-67cfc43a9d90": {"__data__": {"id_": "97242db6-b061-4453-9d20-67cfc43a9d90", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0155cbeb-1ab3-4158-9036-d3c926c00206", "node_type": null, "metadata": {}, "hash": "9d899d674290b013b7dfb6996a70387942c435aa6aee8065150ad67e40cd619b"}, "3": {"node_id": "24c8b5bd-5a32-4d42-a51d-84e627bcca17", "node_type": null, "metadata": {}, "hash": "d4625dc2c8e9a34450ad305b93ad3a57416f19bfbf08891692352bd0727ea58a"}}, "hash": "db815499c5a0286af9b69b9954f8351e06d4e6dd44824535bbaa7b92e6f815e0", "text": "This function pulls data for the entire device in the\nbackground. Progress of the operation can be checked with\n[virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() with a job type of\n[VIR_DOMAIN_BLOCK_JOB_TYPE_PULL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_PULL), and the operation can be aborted\nwith [virDomainBlockJobAbort](libvirt-libvirt-\ndomain.html#virDomainBlockJobAbort)(). When finished, an asynchronous event is\nraised to indicate the final status, and the job no longer exists. If the job\nis aborted, a new one can be started later to resume from the same point.\n\nIf `flags` contains [VIR_DOMAIN_BLOCK_REBASE_RELATIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_RELATIVE), the name recorded into the\nactive disk as the location for `base` will be kept relative. The operation\nwill fail if libvirt can't infer the name.\n\nWhen `flags` includes [VIR_DOMAIN_BLOCK_REBASE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_COPY), this starts a copy, where `base`\nmust be the name of a new file to copy the chain to. By default, the copy will\npull the entire source chain into the destination file, but if `flags` also\ncontains [VIR_DOMAIN_BLOCK_REBASE_SHALLOW](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_SHALLOW), then only the top of the source\nchain will be copied (the source and destination have a common backing file).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "24c8b5bd-5a32-4d42-a51d-84e627bcca17": {"__data__": {"id_": "24c8b5bd-5a32-4d42-a51d-84e627bcca17", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "97242db6-b061-4453-9d20-67cfc43a9d90", "node_type": null, "metadata": {}, "hash": "db815499c5a0286af9b69b9954f8351e06d4e6dd44824535bbaa7b92e6f815e0"}, "3": {"node_id": "2e0cc0f1-bc75-4ad7-826e-68d99882a50e", "node_type": null, "metadata": {}, "hash": "d58cff7dae2b4539dba9005c1334964eb69b0d676c4a1b9e1924bb10fba13658"}}, "hash": "d4625dc2c8e9a34450ad305b93ad3a57416f19bfbf08891692352bd0727ea58a", "text": "By default, `base` will be created with the same file format as the source,\nbut this can be altered by adding [VIR_DOMAIN_BLOCK_REBASE_COPY_RAW](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_BLOCK_REBASE_COPY_RAW) to force the copy to be\nraw (does not make sense with the shallow flag unless the source is also raw),\nor by using [VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT) to reuse an existing file which\nwas pre-created with the correct format and metadata and sufficient size to\nhold the copy. In case the [VIR_DOMAIN_BLOCK_REBASE_SHALLOW](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_SHALLOW) flag is used the pre-created file\nhas to exhibit the same guest visible contents as the backing file of the\noriginal image. This allows a management app to pre-create files with relative\nbacking file names, rather than the default of absolute backing file names; as\na security precaution, you should generally only use reuse_ext with the\nshallow flag and a non-raw destination file. By default, the copy destination\nwill be treated as type='file', but using\n[VIR_DOMAIN_BLOCK_REBASE_COPY_DEV](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_COPY_DEV) treats the destination as\ntype='block' (affecting how [virDomainGetBlockInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockInfo)() will report allocation after pivoting).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2e0cc0f1-bc75-4ad7-826e-68d99882a50e": {"__data__": {"id_": "2e0cc0f1-bc75-4ad7-826e-68d99882a50e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "24c8b5bd-5a32-4d42-a51d-84e627bcca17", "node_type": null, "metadata": {}, "hash": "d4625dc2c8e9a34450ad305b93ad3a57416f19bfbf08891692352bd0727ea58a"}, "3": {"node_id": "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50", "node_type": null, "metadata": {}, "hash": "e11b88fdb0218c8b0e885a53e82a3097afbc4733df94a04831c92a5044bd1b7f"}}, "hash": "d58cff7dae2b4539dba9005c1334964eb69b0d676c4a1b9e1924bb10fba13658", "text": "A copy job has two parts; in the first phase, the `bandwidth` parameter\naffects how fast the source is pulled into the destination, and the job can\nonly be canceled by reverting to the source file; progress in this phase can\nbe tracked via the [virDomainBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainBlockJobInfo)() command, with a job type of\n[VIR_DOMAIN_BLOCK_JOB_TYPE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_TYPE_COPY). The job transitions to the second\nphase when the job info states cur == end, and remains alive to mirror all\nfurther changes to both source and destination. The user must call\n[virDomainBlockJobAbort](libvirt-libvirt-domain.html#virDomainBlockJobAbort)()\nto end the mirroring while choosing whether to revert to source or pivot to\nthe destination. An event is issued when the job ends, and depending on the\nhypervisor, an event may also be issued when the job transitions from pulling\nto mirroring. If the job is aborted, a new job will have to start over from\nthe beginning of the first phase.\n\nSome hypervisors will restrict certain actions, such as\n[virDomainSave](libvirt-libvirt-domain.html#virDomainSave)() or\n[virDomainDetachDevice](libvirt-libvirt-domain.html#virDomainDetachDevice)(),\nwhile a copy job is active; they may also restrict a copy job to transient\ndomains.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"vda\").\nValid names can be found by calling [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50": {"__data__": {"id_": "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2e0cc0f1-bc75-4ad7-826e-68d99882a50e", "node_type": null, "metadata": {}, "hash": "d58cff7dae2b4539dba9005c1334964eb69b0d676c4a1b9e1924bb10fba13658"}, "3": {"node_id": "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2", "node_type": null, "metadata": {}, "hash": "eca0b0101730bdf48c674b8782f08310433149d7a467f18afc4864836b6ae35f"}}, "hash": "e11b88fdb0218c8b0e885a53e82a3097afbc4733df94a04831c92a5044bd1b7f", "text": "The `base` parameter can be either a path to a file within the backing chain,\nor the device target shorthand (the <target dev='...'/> sub-element, such as\n\"vda\") followed by an index to the backing chain enclosed in square brackets.\nBacking chain indexes can be found by inspecting\n//disk//backingStore/`//disk//backingStore/index` in the domain XML. Thus, for\nexample, \"vda[3]\" refers to the backing store with index equal to \"3\" in the\nchain of disk \"vda\".\n\nThe maximum bandwidth that will be used to do the copy can be specified with\nthe `bandwidth` parameter. If set to 0, there is no limit. If `flags` includes\n[VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES), `bandwidth` is in\nbytes/second; otherwise, it is in MiB/second. Values larger than 2^52\nbytes/sec may be rejected due to overflow considerations based on the word\nsize of both client and server, and values larger than 2^31 bytes/sec may\ncause overflow problems if later queried by\n[virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)() without scaling. Hypervisors may\nfurther restrict the range of valid bandwidth values. Some hypervisors do not\nsupport this feature and will return an error if bandwidth is not 0; in this\ncase, it might still be possible for a later call to\n[virDomainBlockJobSetSpeed](libvirt-libvirt-\ndomain.html#virDomainBlockJobSetSpeed)() to succeed. The actual speed can be\ndetermined with [virDomainGetBlockJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetBlockJobInfo)().\n\nWhen `base` is NULL and `flags` is 0, this is identical to\n[virDomainBlockPull](libvirt-libvirt-domain.html#virDomainBlockPull)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2": {"__data__": {"id_": "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50", "node_type": null, "metadata": {}, "hash": "e11b88fdb0218c8b0e885a53e82a3097afbc4733df94a04831c92a5044bd1b7f"}, "3": {"node_id": "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce", "node_type": null, "metadata": {}, "hash": "ba0bd85168bd265519607f838fce8b80a3268891b5159e8ecad0f97b1a024458"}}, "hash": "eca0b0101730bdf48c674b8782f08310433149d7a467f18afc4864836b6ae35f", "text": "When\n`flags` contains [VIR_DOMAIN_BLOCK_REBASE_COPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_REBASE_COPY), this command is shorthand for\n[virDomainBlockCopy](libvirt-libvirt-domain.html#virDomainBlockCopy)() where\nthe destination XML encodes `base` as a <disk type='file'>, `bandwidth` is\nproperly scaled and passed as a typed parameter, the shallow and reuse\nexternal flags are preserved, and remaining flags control whether the XML\nencodes a destination format of raw instead of leaving the destination\nidentical to the source format or probed from the reused file.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nbase\n\n    path to backing file to keep, or device shorthand, or NULL for no backing file\nbandwidth\n\n    (optional) specify bandwidth limit; flags determine the unit\nflags\n\n    bitwise-OR of [virDomainBlockRebaseFlags](libvirt-libvirt-domain.html#virDomainBlockRebaseFlags)\nReturns\n\n    0 if the operation has started, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBlockResize`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockResize\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t unsigned long long size,\n    \t\t\t\t\t unsigned int flags)\n\nResize a block device of domain while the domain is running.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce": {"__data__": {"id_": "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2", "node_type": null, "metadata": {}, "hash": "eca0b0101730bdf48c674b8782f08310433149d7a467f18afc4864836b6ae35f"}, "3": {"node_id": "3400b622-640c-4514-a25e-a68691e3c343", "node_type": null, "metadata": {}, "hash": "1a632bcf3a50fcd17b8796145c0bd1acf2afbfba0764e741cc39d8ffcb45d59f"}}, "hash": "ba0bd85168bd265519607f838fce8b80a3268891b5159e8ecad0f97b1a024458", "text": "If `flags` is 0,\nthen `size` is in kibibytes (blocks of 1024 bytes); since 0.9.11, if `flags`\nincludes [VIR_DOMAIN_BLOCK_RESIZE_BYTES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_RESIZE_BYTES), `size` is in bytes instead. `size`\nis taken directly as the new size. Depending on the file format, the\nhypervisor may round up to the next alignment boundary.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nNote that this call may fail if the underlying virtualization hypervisor does\nnot support it; this call requires privileged access to the hypervisor.\n\ndom\n\n    pointer to the domain object\ndisk\n\n    path to the block image, or shorthand\nsize\n\n    new size of the block image, see below for unit\nflags\n\n    bitwise-OR of [virDomainBlockResizeFlags](libvirt-libvirt-domain.html#virDomainBlockResizeFlags)\nReturns\n\n    0 in case of success or -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3400b622-640c-4514-a25e-a68691e3c343": {"__data__": {"id_": "3400b622-640c-4514-a25e-a68691e3c343", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce", "node_type": null, "metadata": {}, "hash": "ba0bd85168bd265519607f838fce8b80a3268891b5159e8ecad0f97b1a024458"}, "3": {"node_id": "463fb124-4016-46b2-8e15-832b8281bd91", "node_type": null, "metadata": {}, "hash": "9d35db57795faa23f78cbd2737351badfb711d6353b579bedffc995648ec2385"}}, "hash": "1a632bcf3a50fcd17b8796145c0bd1acf2afbfba0764e741cc39d8ffcb45d59f", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [block-\nwrite](../acl.html#perm_domain_block-write)| -  \n  \n### `virDomainBlockStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virDomainBlockStatsPtr](libvirt-libvirt-domain.html#virDomainBlockStatsPtr) stats,\n    \t\t\t\t\t size_t size)\n\nThis function returns block device (disk) stats for block devices attached to\nthe domain.\n\nThe `disk` parameter is either the device target shorthand (the <target\ndev='...'/> sub-element, such as \"vda\"), or (since 0.9.8) an unambiguous\nsource name of the block device (the <source file='...'/> sub-element, such as\n\"/path/to/image\"). Valid names can be found by calling\n[virDomainGetXMLDesc](libvirt-libvirt-domain.html#virDomainGetXMLDesc)() and\ninspecting elements within //domain/devices/disk. Some drivers might also\naccept the empty string for the `disk` parameter, and then yield summary stats\nfor the entire domain.\n\nDomains may have more than one block device. To get stats for each you should\nmake multiple calls to this function.\n\nIndividual fields within the stats structure may be returned as -1, which\nindicates that the hypervisor does not support that particular statistic.\n\ndom\n\n    pointer to the domain object\ndisk\n\n    path to the block device, or device shorthand\nstats\n\n    block device stats (returned)\nsize\n\n    size of stats structure\nReturns\n\n    0 in case of success or -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "463fb124-4016-46b2-8e15-832b8281bd91": {"__data__": {"id_": "463fb124-4016-46b2-8e15-832b8281bd91", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3400b622-640c-4514-a25e-a68691e3c343", "node_type": null, "metadata": {}, "hash": "1a632bcf3a50fcd17b8796145c0bd1acf2afbfba0764e741cc39d8ffcb45d59f"}, "3": {"node_id": "514c3283-9c7e-4327-8e1f-82d0bf0c5c68", "node_type": null, "metadata": {}, "hash": "f0754f475b9b7f3c256d72678194991b433aafabefd8265e82a723e8082c47ab"}}, "hash": "9d35db57795faa23f78cbd2737351badfb711d6353b579bedffc995648ec2385", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainBlockStatsFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainBlockStatsFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nThis function is to get block stats parameters for block devices attached to\nthe domain.\n\nThe `disk` parameter is either the device target shorthand (the <target\ndev='...'/> sub-element, such as \"vda\"), or (since 0.9.8) an unambiguous\nsource name of the block device (the <source file='...'/> sub-element, such as\n\"/path/to/image\"). Valid names can be found by calling\n[virDomainGetXMLDesc](libvirt-libvirt-domain.html#virDomainGetXMLDesc)() and\ninspecting elements within //domain/devices/disk. Some drivers might also\naccept the empty string for the `disk` parameter, and then yield summary stats\nfor the entire domain.\n\nDomains may have more than one block device. To get stats for each you should\nmake multiple calls to this function.\n\nOn input, `nparams` gives the size of the `params` array; on output, `nparams`\ngives how many slots were filled with parameter information, which might be\nless but will not exceed the input value.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "514c3283-9c7e-4327-8e1f-82d0bf0c5c68": {"__data__": {"id_": "514c3283-9c7e-4327-8e1f-82d0bf0c5c68", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "463fb124-4016-46b2-8e15-832b8281bd91", "node_type": null, "metadata": {}, "hash": "9d35db57795faa23f78cbd2737351badfb711d6353b579bedffc995648ec2385"}, "3": {"node_id": "532676ed-8b5d-4734-81dc-cf356ac825e6", "node_type": null, "metadata": {}, "hash": "ce9fd76e9123c650a0109bed3d419941e5272795c818de55cabfc71f0667b9bb"}}, "hash": "f0754f475b9b7f3c256d72678194991b433aafabefd8265e82a723e8082c47ab", "text": "(Note that block devices of different types might support\ndifferent parameters, so it might be necessary to compute `nparams` for each\nblock device). The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for more details.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nparams\n\n    pointer to block stats parameter object (return value, allocated by the caller)\nnparams\n\n    pointer to number of block stats; input and output\nflags\n\n    bitwise-OR of [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainCoreDump`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainCoreDump\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * to,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will dump the core of a domain on a given file for analysis. Note\nthat for remote Xen Daemon the file path will be interpreted in the remote\nhost. Hypervisors may require the user to manually ensure proper permissions\non the file named by `to`.\n\nIf `flags` includes [VIR_DUMP_CRASH](libvirt-libvirt-\ndomain.html#VIR_DUMP_CRASH), then leave the guest shut off with a crashed\nstate after the dump completes.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "532676ed-8b5d-4734-81dc-cf356ac825e6": {"__data__": {"id_": "532676ed-8b5d-4734-81dc-cf356ac825e6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "514c3283-9c7e-4327-8e1f-82d0bf0c5c68", "node_type": null, "metadata": {}, "hash": "f0754f475b9b7f3c256d72678194991b433aafabefd8265e82a723e8082c47ab"}, "3": {"node_id": "d76268d7-4943-421b-ae35-2c755c165ac5", "node_type": null, "metadata": {}, "hash": "3fa289cfabf1d3c66173e9b76270438eeb79cfb768040da3b3c3e2c918bb7fe5"}}, "hash": "ce9fd76e9123c650a0109bed3d419941e5272795c818de55cabfc71f0667b9bb", "text": "If `flags` includes [VIR_DUMP_LIVE](libvirt-\nlibvirt-domain.html#VIR_DUMP_LIVE), then make the core dump while continuing\nto allow the guest to run; otherwise, the guest is suspended during the dump.\n[VIR_DUMP_RESET](libvirt-libvirt-domain.html#VIR_DUMP_RESET) flag forces reset\nof the guest after dump. The above three flags are mutually exclusive.\n\nAdditionally, if `flags` includes [VIR_DUMP_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DUMP_BYPASS_CACHE), then libvirt will attempt to bypass the\nfile system cache while creating the file, or fail if it cannot do so for the\ngiven system; this can allow less pressure on file system cache, but also\nrisks slowing saves to NFS.\n\nFor more control over the output format, see\n[virDomainCoreDumpWithFormat](libvirt-libvirt-\ndomain.html#virDomainCoreDumpWithFormat)().\n\ndomain\n\n    a domain object\nto\n\n    path for the core file\nflags\n\n    bitwise-OR of [virDomainCoreDumpFlags](libvirt-libvirt-domain.html#virDomainCoreDumpFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [core-dump](../acl.html#perm_domain_core-\ndump)| -  \n  \n### `virDomainCoreDumpWithFormat`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainCoreDumpWithFormat\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * to,\n    \t\t\t\t\t unsigned int dumpformat,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will dump the core of a domain on a given file for analysis.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d76268d7-4943-421b-ae35-2c755c165ac5": {"__data__": {"id_": "d76268d7-4943-421b-ae35-2c755c165ac5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "532676ed-8b5d-4734-81dc-cf356ac825e6", "node_type": null, "metadata": {}, "hash": "ce9fd76e9123c650a0109bed3d419941e5272795c818de55cabfc71f0667b9bb"}, "3": {"node_id": "4bf28811-1f6b-4ec3-8d45-118212c31f4d", "node_type": null, "metadata": {}, "hash": "888e581f974e35efba997cf3712653091b3436156a3656997701b1406ebe50b5"}}, "hash": "3fa289cfabf1d3c66173e9b76270438eeb79cfb768040da3b3c3e2c918bb7fe5", "text": "Note\nthat for remote Xen Daemon the file path will be interpreted in the remote\nhost. Hypervisors may require the user to manually ensure proper permissions\non the file named by `to`.\n\n`dumpformat` controls which format the dump will have; use of\n[VIR_DOMAIN_CORE_DUMP_FORMAT_RAW](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_CORE_DUMP_FORMAT_RAW) mirrors what\n[virDomainCoreDump](libvirt-libvirt-domain.html#virDomainCoreDump)() will\nperform. Not all hypervisors are able to support all formats.\n\nIf `flags` includes [VIR_DUMP_CRASH](libvirt-libvirt-\ndomain.html#VIR_DUMP_CRASH), then leave the guest shut off with a crashed\nstate after the dump completes. If `flags` includes [VIR_DUMP_LIVE](libvirt-\nlibvirt-domain.html#VIR_DUMP_LIVE), then make the core dump while continuing\nto allow the guest to run; otherwise, the guest is suspended during the dump.\n[VIR_DUMP_RESET](libvirt-libvirt-domain.html#VIR_DUMP_RESET) flag forces reset\nof the guest after dump. The above three flags are mutually exclusive.\n\nAdditionally, if `flags` includes [VIR_DUMP_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DUMP_BYPASS_CACHE), then libvirt will attempt to bypass the\nfile system cache while creating the file, or fail if it cannot do so for the\ngiven system; this can allow less pressure on file system cache, but also\nrisks slowing saves to NFS.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4bf28811-1f6b-4ec3-8d45-118212c31f4d": {"__data__": {"id_": "4bf28811-1f6b-4ec3-8d45-118212c31f4d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d76268d7-4943-421b-ae35-2c755c165ac5", "node_type": null, "metadata": {}, "hash": "3fa289cfabf1d3c66173e9b76270438eeb79cfb768040da3b3c3e2c918bb7fe5"}, "3": {"node_id": "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5", "node_type": null, "metadata": {}, "hash": "050525731a806295f6fa3ce26dfc695d6a08ed19c0a1f82086cee1b2ca145fd1"}}, "hash": "888e581f974e35efba997cf3712653091b3436156a3656997701b1406ebe50b5", "text": "domain\n\n    a domain object\nto\n\n    path for the core file\ndumpformat\n\n    format of domain memory's dump (one of [virDomainCoreDumpFormat](libvirt-libvirt-domain.html#virDomainCoreDumpFormat) enum)\nflags\n\n    bitwise-OR of [virDomainCoreDumpFlags](libvirt-libvirt-domain.html#virDomainCoreDumpFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [core-dump](../acl.html#perm_domain_core-\ndump)| -  \n  \n### `virDomainCreate`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainCreate\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nLaunch a defined domain. If the call succeeds the domain moves from the\ndefined to the running domains pools. The domain will be paused only if\nrestoring from managed state created from a paused domain. For more control,\nsee [virDomainCreateWithFlags](libvirt-libvirt-\ndomain.html#virDomainCreateWithFlags)().\n\ndomain\n\n    pointer to a defined domain\nReturns\n\n    0 in case of success, -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n  \n### `virDomainCreateLinux`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainCreateLinux\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * xmlDesc,\n    \t\t\t\t\t unsigned int flags)\n\nDeprecated after 0.4.6.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5": {"__data__": {"id_": "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4bf28811-1f6b-4ec3-8d45-118212c31f4d", "node_type": null, "metadata": {}, "hash": "888e581f974e35efba997cf3712653091b3436156a3656997701b1406ebe50b5"}, "3": {"node_id": "57628bfe-d8df-4979-a55c-2971e0a841fa", "node_type": null, "metadata": {}, "hash": "0f55f0a96a06b95f8442ce55913e9150603f3a125f06965dd797aae7c4681e8e"}}, "hash": "050525731a806295f6fa3ce26dfc695d6a08ed19c0a1f82086cee1b2ca145fd1", "text": "Renamed to [virDomainCreateXML](libvirt-libvirt-\ndomain.html#virDomainCreateXML)() providing identical functionality. This\nexisting name will be left indefinitely for API compatibility.\n\nconn\n\n    pointer to the hypervisor connection\nxmlDesc\n\n    string containing an XML description of the domain\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    a new domain object or NULL in case of failure\n\n### `virDomainCreateWithFiles`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainCreateWithFiles\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int nfiles,\n    \t\t\t\t\t int * files,\n    \t\t\t\t\t unsigned int flags)\n\nLaunch a defined domain. If the call succeeds the domain moves from the\ndefined to the running domains pools.\n\n`files` provides an array of file descriptors which will be made available to\nthe 'init' process of the guest. The file handles exposed to the guest will be\nrenumbered to start from 3 (ie immediately following stderr). This is only\nsupported for guests which use container based virtualization technology.\n\nIf the [VIR_DOMAIN_START_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_PAUSED) flag is set, or if the guest domain has a\nmanaged save image that requested paused state (see\n[virDomainManagedSave](libvirt-libvirt-domain.html#virDomainManagedSave)())\nthe guest domain will be started, but its CPUs will remain paused. The CPUs\ncan later be manually started using [virDomainResume](libvirt-libvirt-\ndomain.html#virDomainResume)(). In all other cases, the guest domain will be\nrunning.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "57628bfe-d8df-4979-a55c-2971e0a841fa": {"__data__": {"id_": "57628bfe-d8df-4979-a55c-2971e0a841fa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5", "node_type": null, "metadata": {}, "hash": "050525731a806295f6fa3ce26dfc695d6a08ed19c0a1f82086cee1b2ca145fd1"}, "3": {"node_id": "6e25327d-870e-4326-bf2b-d03d6d0991c3", "node_type": null, "metadata": {}, "hash": "d3fb6f9ea599b69a13db4d68d13918efb127b624f22c7de606342e13cc6f892b"}}, "hash": "0f55f0a96a06b95f8442ce55913e9150603f3a125f06965dd797aae7c4681e8e", "text": "In all other cases, the guest domain will be\nrunning.\n\nIf the [VIR_DOMAIN_START_AUTODESTROY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_AUTODESTROY) flag is set, the guest domain will\nbe automatically destroyed when the [virConnectPtr](libvirt-libvirt-\nhost.html#virConnectPtr) object is finally released. This will also happen if\nthe client application crashes / loses its connection to the libvirtd daemon.\nAny domains marked for auto destroy will block attempts at migration, save-to-\nfile, or snapshots.\n\nIf the [VIR_DOMAIN_START_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_BYPASS_CACHE) flag is set, and there is a managed\nsave file for this domain (created by [virDomainManagedSave](libvirt-libvirt-\ndomain.html#virDomainManagedSave)()), then libvirt will attempt to bypass the\nfile system cache while restoring the file, or fail if it cannot do so for the\ngiven system; this can allow less pressure on file system cache, but also\nrisks slowing loads from NFS.\n\nIf the [VIR_DOMAIN_START_FORCE_BOOT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_FORCE_BOOT) flag is set, then any managed save\nfile for this domain is discarded, and the domain boots from scratch.\n\nIf `flags` includes [VIR_DOMAIN_START_RESET_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_RESET_NVRAM), then libvirt will discard any\nexisting NVRAM file and re-initialize NVRAM from the pristine template.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6e25327d-870e-4326-bf2b-d03d6d0991c3": {"__data__": {"id_": "6e25327d-870e-4326-bf2b-d03d6d0991c3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "57628bfe-d8df-4979-a55c-2971e0a841fa", "node_type": null, "metadata": {}, "hash": "0f55f0a96a06b95f8442ce55913e9150603f3a125f06965dd797aae7c4681e8e"}, "3": {"node_id": "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf", "node_type": null, "metadata": {}, "hash": "13f5fe6b30ee5d3d006f4542b6a814a8eba3134120200bf341fb799833174f78"}}, "hash": "d3fb6f9ea599b69a13db4d68d13918efb127b624f22c7de606342e13cc6f892b", "text": "domain\n\n    pointer to a defined domain\nnfiles\n\n    number of file descriptors passed\nfiles\n\n    list of file descriptors passed\nflags\n\n    bitwise-OR of supported [virDomainCreateFlags](libvirt-libvirt-domain.html#virDomainCreateFlags)\nReturns\n\n    0 in case of success, -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n  \n### `virDomainCreateWithFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainCreateWithFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nLaunch a defined domain. If the call succeeds the domain moves from the\ndefined to the running domains pools.\n\nIf the [VIR_DOMAIN_START_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_PAUSED) flag is set, or if the guest domain has a\nmanaged save image that requested paused state (see\n[virDomainManagedSave](libvirt-libvirt-domain.html#virDomainManagedSave)())\nthe guest domain will be started, but its CPUs will remain paused. The CPUs\ncan later be manually started using [virDomainResume](libvirt-libvirt-\ndomain.html#virDomainResume)(). In all other cases, the guest domain will be\nrunning.\n\nIf the [VIR_DOMAIN_START_AUTODESTROY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_AUTODESTROY) flag is set, the guest domain will\nbe automatically destroyed when the [virConnectPtr](libvirt-libvirt-\nhost.html#virConnectPtr) object is finally released. This will also happen if\nthe client application crashes / loses its connection to the libvirtd daemon.\nAny domains marked for auto destroy will block attempts at migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf": {"__data__": {"id_": "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6e25327d-870e-4326-bf2b-d03d6d0991c3", "node_type": null, "metadata": {}, "hash": "d3fb6f9ea599b69a13db4d68d13918efb127b624f22c7de606342e13cc6f892b"}, "3": {"node_id": "e6ef620d-5c40-4c63-b223-118c47a666aa", "node_type": null, "metadata": {}, "hash": "957bb2d2fa7d2727975fec322d39f830ab2d2f16ab8ad837c20505f10435905e"}}, "hash": "13f5fe6b30ee5d3d006f4542b6a814a8eba3134120200bf341fb799833174f78", "text": "Any domains marked for auto destroy will block attempts at migration.\nHypervisors may also block save-to-file, or snapshots.\n\nIf the [VIR_DOMAIN_START_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_BYPASS_CACHE) flag is set, and there is a managed\nsave file for this domain (created by [virDomainManagedSave](libvirt-libvirt-\ndomain.html#virDomainManagedSave)()), then libvirt will attempt to bypass the\nfile system cache while restoring the file, or fail if it cannot do so for the\ngiven system; this can allow less pressure on file system cache, but also\nrisks slowing loads from NFS.\n\nIf the [VIR_DOMAIN_START_FORCE_BOOT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_FORCE_BOOT) flag is set, then any managed save\nfile for this domain is discarded, and the domain boots from scratch.\n\nIf `flags` includes [VIR_DOMAIN_START_RESET_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_RESET_NVRAM), then libvirt will discard any\nexisting NVRAM file and re-initialize NVRAM from the pristine template.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e6ef620d-5c40-4c63-b223-118c47a666aa": {"__data__": {"id_": "e6ef620d-5c40-4c63-b223-118c47a666aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf", "node_type": null, "metadata": {}, "hash": "13f5fe6b30ee5d3d006f4542b6a814a8eba3134120200bf341fb799833174f78"}, "3": {"node_id": "f46fcc2a-72f0-4892-91f8-fd454a27f23b", "node_type": null, "metadata": {}, "hash": "b5925b3fe7b7139724c7a8fb9e2678448c6c2a35d9ada492abbae1afb9d81406"}}, "hash": "957bb2d2fa7d2727975fec322d39f830ab2d2f16ab8ad837c20505f10435905e", "text": "domain\n\n    pointer to a defined domain\nflags\n\n    bitwise-OR of supported [virDomainCreateFlags](libvirt-libvirt-domain.html#virDomainCreateFlags)\nReturns\n\n    0 in case of success, -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n  \n### `virDomainCreateXML`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainCreateXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * xmlDesc,\n    \t\t\t\t\t unsigned int flags)\n\nLaunch a new guest domain, based on an XML description similar to the one\nreturned by [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() This function may require privileged access\nto the hypervisor. The domain is not persistent, so its definition will\ndisappear when it is destroyed, or if the host is restarted (see\n[virDomainDefineXML](libvirt-libvirt-domain.html#virDomainDefineXML)() to\ndefine persistent domains).\n\nIf the [VIR_DOMAIN_START_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_PAUSED) flag is set, the guest domain will be\nstarted, but its CPUs will remain paused. The CPUs can later be manually\nstarted using [virDomainResume](libvirt-libvirt-domain.html#virDomainResume).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f46fcc2a-72f0-4892-91f8-fd454a27f23b": {"__data__": {"id_": "f46fcc2a-72f0-4892-91f8-fd454a27f23b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e6ef620d-5c40-4c63-b223-118c47a666aa", "node_type": null, "metadata": {}, "hash": "957bb2d2fa7d2727975fec322d39f830ab2d2f16ab8ad837c20505f10435905e"}, "3": {"node_id": "6e387dea-7e1e-4563-b577-860c14b776aa", "node_type": null, "metadata": {}, "hash": "3f2009c592f561599b94ea4cfc86507e0c35850519ae556afbb7473519e45e25"}}, "hash": "b5925b3fe7b7139724c7a8fb9e2678448c6c2a35d9ada492abbae1afb9d81406", "text": "If the [VIR_DOMAIN_START_AUTODESTROY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_AUTODESTROY) flag is set, the guest domain will\nbe automatically destroyed when the [virConnectPtr](libvirt-libvirt-\nhost.html#virConnectPtr) object is finally released. This will also happen if\nthe client application crashes / loses its connection to the libvirtd daemon.\nAny domains marked for auto destroy will block attempts at migration.\nHypervisors may also block save-to-file, or snapshots.\n\nIf `flags` includes [VIR_DOMAIN_START_RESET_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_RESET_NVRAM), then libvirt will discard any\nexisting NVRAM file and re-initialize NVRAM from the pristine template.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6e387dea-7e1e-4563-b577-860c14b776aa": {"__data__": {"id_": "6e387dea-7e1e-4563-b577-860c14b776aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f46fcc2a-72f0-4892-91f8-fd454a27f23b", "node_type": null, "metadata": {}, "hash": "b5925b3fe7b7139724c7a8fb9e2678448c6c2a35d9ada492abbae1afb9d81406"}, "3": {"node_id": "d7b500a6-cb8a-4506-9351-7f9dc77d62b8", "node_type": null, "metadata": {}, "hash": "e9a08d4727676dd0eb70efc5d0eb7df51cd867245c6f81a079df52d830c54b91"}}, "hash": "3f2009c592f561599b94ea4cfc86507e0c35850519ae556afbb7473519e45e25", "text": "conn\n\n    pointer to the hypervisor connection\nxmlDesc\n\n    string containing an XML description of the domain\nflags\n\n    bitwise-OR of supported [virDomainCreateFlags](libvirt-libvirt-domain.html#virDomainCreateFlags)\nReturns\n\n    a new domain object or NULL in case of failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n  \n### `virDomainCreateXMLWithFiles`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainCreateXMLWithFiles\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t const char * xmlDesc,\n    \t\t\t\t\t\t unsigned int nfiles,\n    \t\t\t\t\t\t int * files,\n    \t\t\t\t\t\t unsigned int flags)\n\nLaunch a new guest domain, based on an XML description similar to the one\nreturned by [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() This function may require privileged access\nto the hypervisor. The domain is not persistent, so its definition will\ndisappear when it is destroyed, or if the host is restarted (see\n[virDomainDefineXML](libvirt-libvirt-domain.html#virDomainDefineXML)() to\ndefine persistent domains).\n\n`files` provides an array of file descriptors which will be made available to\nthe 'init' process of the guest. The file handles exposed to the guest will be\nrenumbered to start from 3 (ie immediately following stderr). This is only\nsupported for guests which use container based virtualization technology.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d7b500a6-cb8a-4506-9351-7f9dc77d62b8": {"__data__": {"id_": "d7b500a6-cb8a-4506-9351-7f9dc77d62b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6e387dea-7e1e-4563-b577-860c14b776aa", "node_type": null, "metadata": {}, "hash": "3f2009c592f561599b94ea4cfc86507e0c35850519ae556afbb7473519e45e25"}, "3": {"node_id": "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc", "node_type": null, "metadata": {}, "hash": "1710d2e2bb8897aa61195ae4931eee461300104553711777d432c6f0381bd7e0"}}, "hash": "e9a08d4727676dd0eb70efc5d0eb7df51cd867245c6f81a079df52d830c54b91", "text": "This is only\nsupported for guests which use container based virtualization technology.\n\nIf the [VIR_DOMAIN_START_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_PAUSED) flag is set, the guest domain will be\nstarted, but its CPUs will remain paused. The CPUs can later be manually\nstarted using [virDomainResume](libvirt-libvirt-domain.html#virDomainResume).\n\nIf the [VIR_DOMAIN_START_AUTODESTROY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_AUTODESTROY) flag is set, the guest domain will\nbe automatically destroyed when the [virConnectPtr](libvirt-libvirt-\nhost.html#virConnectPtr) object is finally released. This will also happen if\nthe client application crashes / loses its connection to the libvirtd daemon.\nAny domains marked for auto destroy will block attempts at migration.\nHypervisors may also block save-to-file, or snapshots.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc": {"__data__": {"id_": "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d7b500a6-cb8a-4506-9351-7f9dc77d62b8", "node_type": null, "metadata": {}, "hash": "e9a08d4727676dd0eb70efc5d0eb7df51cd867245c6f81a079df52d830c54b91"}, "3": {"node_id": "44429442-8eb0-47c7-b375-bb2ce61967a2", "node_type": null, "metadata": {}, "hash": "3c7e8892f874e779fb2f892f4cc0337ec070fe6581841294a83e9e4a9b591e89"}}, "hash": "1710d2e2bb8897aa61195ae4931eee461300104553711777d432c6f0381bd7e0", "text": "conn\n\n    pointer to the hypervisor connection\nxmlDesc\n\n    string containing an XML description of the domain\nnfiles\n\n    number of file descriptors passed\nfiles\n\n    list of file descriptors passed\nflags\n\n    bitwise-OR of supported [virDomainCreateFlags](libvirt-libvirt-domain.html#virDomainCreateFlags)\nReturns\n\n    a new domain object or NULL in case of failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n  \n### `virDomainDefineXML`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainDefineXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * xml)\n\nDefine a domain, but does not start it. This definition is persistent, until\nexplicitly undefined with [virDomainUndefine](libvirt-libvirt-\ndomain.html#virDomainUndefine)(). A previous definition for this domain with\nthe same UUID and name would be overridden if it already exists.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "44429442-8eb0-47c7-b375-bb2ce61967a2": {"__data__": {"id_": "44429442-8eb0-47c7-b375-bb2ce61967a2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc", "node_type": null, "metadata": {}, "hash": "1710d2e2bb8897aa61195ae4931eee461300104553711777d432c6f0381bd7e0"}, "3": {"node_id": "15508e5e-0581-42c4-bb89-c1777f8aec41", "node_type": null, "metadata": {}, "hash": "150e92f78dc5fe7b10b0e17e148f4313b54f403da77e7df76a2e8bf095e6fe4b"}}, "hash": "3c7e8892f874e779fb2f892f4cc0337ec070fe6581841294a83e9e4a9b591e89", "text": "conn\n\n    pointer to the hypervisor connection\nxml\n\n    the XML description for the domain, preferably in UTF-8\nReturns\n\n    NULL in case of error, a pointer to the domain otherwise\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)| -  \n  \n### `virDomainDefineXMLFlags`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainDefineXMLFlags\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * xml,\n    \t\t\t\t\t unsigned int flags)\n\nDefines a domain, but does not start it. This definition is persistent, until\nexplicitly undefined with [virDomainUndefine](libvirt-libvirt-\ndomain.html#virDomainUndefine)(). A previous definition for this domain with\nthe same UUID and name would be overridden if it already exists.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "15508e5e-0581-42c4-bb89-c1777f8aec41": {"__data__": {"id_": "15508e5e-0581-42c4-bb89-c1777f8aec41", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "44429442-8eb0-47c7-b375-bb2ce61967a2", "node_type": null, "metadata": {}, "hash": "3c7e8892f874e779fb2f892f4cc0337ec070fe6581841294a83e9e4a9b591e89"}, "3": {"node_id": "a12b69b9-32d3-4654-84d9-5ccf44aaab78", "node_type": null, "metadata": {}, "hash": "762eff7b5117f26c0fe98e244a84dbc68d1247f14fbafb8baf949c6694363b85"}}, "hash": "150e92f78dc5fe7b10b0e17e148f4313b54f403da77e7df76a2e8bf095e6fe4b", "text": "conn\n\n    pointer to the hypervisor connection\nxml\n\n    the XML description for the domain, preferably in UTF-8\nflags\n\n    bitwise OR of the [virDomainDefineFlags](libvirt-libvirt-domain.html#virDomainDefineFlags) constants\nReturns\n\n    NULL in case of error, a pointer to the domain otherwise\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)| -  \n  \n### `virDomainDelIOThread`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDelIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int iothread_id,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically delete an IOThread from the domain. The `iothread_id` to be\ndeleted must not have a resource associated with it and can be any of the\ncurrently valid IOThread ID's.\n\nNote that this call can fail if the underlying virtualization hypervisor does\nnot support it or if reducing the number is arbitrarily limited. This function\nrequires privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and may fail if domain is not\nalive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a12b69b9-32d3-4654-84d9-5ccf44aaab78": {"__data__": {"id_": "a12b69b9-32d3-4654-84d9-5ccf44aaab78", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "15508e5e-0581-42c4-bb89-c1777f8aec41", "node_type": null, "metadata": {}, "hash": "150e92f78dc5fe7b10b0e17e148f4313b54f403da77e7df76a2e8bf095e6fe4b"}, "3": {"node_id": "0f141aa9-1d06-426f-a202-9312385e98bb", "node_type": null, "metadata": {}, "hash": "b431898d88050f8bbb4ef41df3f795885d6752f1a74972ea751b389686703ff1"}}, "hash": "762eff7b5117f26c0fe98e244a84dbc68d1247f14fbafb8baf949c6694363b85", "text": "If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains. If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed.\n\ndomain\n\n    a domain object\niothread_id\n\n    the specific IOThread ID value to delete\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainDestroy`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDestroy\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nDestroy the domain object. The running instance is shutdown if not down\nalready and all resources used by it are given back to the hypervisor. This\ndoes not free the associated [virDomainPtr](libvirt-libvirt-\ndomain.html#virDomainPtr) object. This function may require privileged access.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f141aa9-1d06-426f-a202-9312385e98bb": {"__data__": {"id_": "0f141aa9-1d06-426f-a202-9312385e98bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a12b69b9-32d3-4654-84d9-5ccf44aaab78", "node_type": null, "metadata": {}, "hash": "762eff7b5117f26c0fe98e244a84dbc68d1247f14fbafb8baf949c6694363b85"}, "3": {"node_id": "af85b08a-f762-4125-a462-e2afbc382b44", "node_type": null, "metadata": {}, "hash": "4ad16870c9f7d1b5179172e157e225479e2497040990dafbd82f6bd8eb0ce847"}}, "hash": "b431898d88050f8bbb4ef41df3f795885d6752f1a74972ea751b389686703ff1", "text": "This function may require privileged access.\n\n[virDomainDestroy](libvirt-libvirt-domain.html#virDomainDestroy) first\nrequests that a guest terminate (e.g. SIGTERM), then waits for it to comply.\nAfter a reasonable timeout, if the guest still exists,\n[virDomainDestroy](libvirt-libvirt-domain.html#virDomainDestroy) will\nforcefully terminate the guest (e.g. SIGKILL) if necessary (which may produce\nundesirable results, for example unflushed disk cache in the guest). To avoid\nthis possibility, it's recommended to instead call\n[virDomainDestroyFlags](libvirt-libvirt-domain.html#virDomainDestroyFlags),\nsending the [VIR_DOMAIN_DESTROY_GRACEFUL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_DESTROY_GRACEFUL) flag.\n\nIf the domain is transient and has any snapshot metadata (see\n[virDomainSnapshotNum](libvirt-libvirt-domain-\nsnapshot.html#virDomainSnapshotNum)()), then that metadata will automatically\nbe deleted when the domain quits.\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [stop](../acl.html#perm_domain_stop)| -  \n  \n### `virDomainDestroyFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDestroyFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nDestroy the domain object. The running instance is shutdown if not down\nalready and all resources used by it are given back to the hypervisor. This\ndoes not free the associated [virDomainPtr](libvirt-libvirt-\ndomain.html#virDomainPtr) object. This function may require privileged access.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "af85b08a-f762-4125-a462-e2afbc382b44": {"__data__": {"id_": "af85b08a-f762-4125-a462-e2afbc382b44", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0f141aa9-1d06-426f-a202-9312385e98bb", "node_type": null, "metadata": {}, "hash": "b431898d88050f8bbb4ef41df3f795885d6752f1a74972ea751b389686703ff1"}, "3": {"node_id": "8f092559-9129-4bcb-ad8e-ec1d02c05105", "node_type": null, "metadata": {}, "hash": "2ad65e06f53cc69f604c48ee9e0647d761f95e91c8968cd3019f036dad0dec6d"}}, "hash": "4ad16870c9f7d1b5179172e157e225479e2497040990dafbd82f6bd8eb0ce847", "text": "This function may require privileged access.\n\nCalling this function with no `flags` set (equal to zero) is equivalent to\ncalling [virDomainDestroy](libvirt-libvirt-domain.html#virDomainDestroy), and\nafter a reasonable timeout will forcefully terminate the guest (e.g. SIGKILL)\nif necessary (which may produce undesirable results, for example unflushed\ndisk cache in the guest). Including [VIR_DOMAIN_DESTROY_GRACEFUL](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_DESTROY_GRACEFUL) in the flags will prevent the\nforceful termination of the guest, and [virDomainDestroyFlags](libvirt-\nlibvirt-domain.html#virDomainDestroyFlags) will instead return an error if the\nguest doesn't terminate by the end of the timeout; at that time, the\nmanagement application can decide if calling again without\n[VIR_DOMAIN_DESTROY_GRACEFUL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_DESTROY_GRACEFUL) is appropriate.\n\nIf [VIR_DOMAIN_DESTROY_REMOVE_LOGS](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_DESTROY_REMOVE_LOGS) flag is set then domain specific\nlogs will be deleted as well if there are any. Note that not all deployments\nare be supported. For example in case of QEMU driver this flags is noop if\nvirtlogd is not used for handling QEMU process output.\n\nAnother alternative which may produce cleaner results for the guest's disks is\nto use [virDomainShutdown](libvirt-libvirt-domain.html#virDomainShutdown)()\ninstead, but that depends on guest support (some hypervisor/guest combinations\nmay ignore the shutdown request).\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainDestroyFlagsValues](libvirt-libvirt-domain.html#virDomainDestroyFlagsValues)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8f092559-9129-4bcb-ad8e-ec1d02c05105": {"__data__": {"id_": "8f092559-9129-4bcb-ad8e-ec1d02c05105", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "af85b08a-f762-4125-a462-e2afbc382b44", "node_type": null, "metadata": {}, "hash": "4ad16870c9f7d1b5179172e157e225479e2497040990dafbd82f6bd8eb0ce847"}, "3": {"node_id": "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e", "node_type": null, "metadata": {}, "hash": "7aebd88eaa326d40eb8f47ba9c28375886cd14489816f6192d2f89163d43bd03"}}, "hash": "2ad65e06f53cc69f604c48ee9e0647d761f95e91c8968cd3019f036dad0dec6d", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [stop](../acl.html#perm_domain_stop)| -  \n  \n### `virDomainDetachDevice`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDetachDevice\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * xml)\n\nThis is an equivalent of [virDomainDetachDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainDetachDeviceFlags)() when called with `flags` parameter\nset to [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE).\n\nSee [virDomainDetachDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainDetachDeviceFlags)() for more details.\n\ndomain\n\n    pointer to domain object\nxml\n\n    pointer to XML description of one device\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainDetachDeviceAlias`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDetachDeviceAlias\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * alias,\n    \t\t\t\t\t unsigned int flags)\n\nDetach a virtual device from a domain, using the alias to specify the device.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e": {"__data__": {"id_": "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8f092559-9129-4bcb-ad8e-ec1d02c05105", "node_type": null, "metadata": {}, "hash": "2ad65e06f53cc69f604c48ee9e0647d761f95e91c8968cd3019f036dad0dec6d"}, "3": {"node_id": "ef0f0af8-58d3-493f-ade0-e1cc96ed5471", "node_type": null, "metadata": {}, "hash": "3223ecab65e3309f45385010ecb19d26b71023bf05b9c6fb65288a60a5498071"}}, "hash": "7aebd88eaa326d40eb8f47ba9c28375886cd14489816f6192d2f89163d43bd03", "text": "The value of `flags` should be either [VIR_DOMAIN_AFFECT_CURRENT](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CURRENT), or a bitwise-or of values from\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nand [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT), although hypervisors vary in which\nflags are supported.\n\nIn contrast to [virDomainDetachDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainDetachDeviceFlags)() this API is asynchronous - it\nreturns immediately after sending the detach request to the hypervisor. It's\ncaller's responsibility to wait for\n[VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED) event to signal actual device\nremoval or for [VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED) to signal rejected\ndevice removal.\n\ndomain\n\n    pointer to a domain object\nalias\n\n    device alias\nflags\n\n    bitwise-OR of [virDomainDeviceModifyFlags](libvirt-libvirt-domain.html#virDomainDeviceModifyFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ef0f0af8-58d3-493f-ade0-e1cc96ed5471": {"__data__": {"id_": "ef0f0af8-58d3-493f-ade0-e1cc96ed5471", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e", "node_type": null, "metadata": {}, "hash": "7aebd88eaa326d40eb8f47ba9c28375886cd14489816f6192d2f89163d43bd03"}, "3": {"node_id": "4910be66-9ce7-4b97-862f-ec1430d3b0a6", "node_type": null, "metadata": {}, "hash": "b57548a20f295e81006b84195759ad99ca01ce90f4209697e25b6ef7efac2346"}}, "hash": "3223ecab65e3309f45385010ecb19d26b71023bf05b9c6fb65288a60a5498071", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainDetachDeviceFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainDetachDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * xml,\n    \t\t\t\t\t unsigned int flags)\n\nDetach a virtual device from a domain, using the flags parameter to control\nhow the device is detached. [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT) specifies that the device allocation is\nremoved based on current domain state. [VIR_DOMAIN_AFFECT_LIVE](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE) specifies that the device shall be\ndeallocated from the active domain instance only and is not from the persisted\ndomain configuration. [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) specifies that the device shall be\ndeallocated from the persisted domain configuration only. Note that the target\nhypervisor must return an error if unable to satisfy flags. E.g. the\nhypervisor driver will return failure if LIVE is specified but it only\nsupports removing the persisted device allocation.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4910be66-9ce7-4b97-862f-ec1430d3b0a6": {"__data__": {"id_": "4910be66-9ce7-4b97-862f-ec1430d3b0a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ef0f0af8-58d3-493f-ade0-e1cc96ed5471", "node_type": null, "metadata": {}, "hash": "3223ecab65e3309f45385010ecb19d26b71023bf05b9c6fb65288a60a5498071"}, "3": {"node_id": "d21a99ff-d968-40ed-9a7e-851effe1401f", "node_type": null, "metadata": {}, "hash": "0d903c22b2c75d950943fe94821614285bf7bf3348ba1172043794d28738ad71"}}, "hash": "b57548a20f295e81006b84195759ad99ca01ce90f4209697e25b6ef7efac2346", "text": "Some hypervisors may prevent this operation if there is a current block job\nrunning operation on the device being detached; in that case, use\n[virDomainBlockJobAbort](libvirt-libvirt-domain.html#virDomainBlockJobAbort)()\nto stop the block job first.\n\nBeware that depending on the hypervisor and device type, detaching a device\nfrom a running domain may be asynchronous. That is, calling\n[virDomainDetachDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainDetachDeviceFlags) may just request device removal while\nthe device is actually removed later (in cooperation with a guest OS).\nPreviously, this fact was ignored and the device could have been removed from\ndomain configuration before it was actually removed by the hypervisor causing\nvarious failures on subsequent operations. To check whether the device was\nsuccessfully removed, either recheck domain configuration using\n[virDomainGetXMLDesc](libvirt-libvirt-domain.html#virDomainGetXMLDesc)() or\nadd a handler for the [VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED) event. In case the device is\nalready gone when [virDomainDetachDeviceFlags](libvirt-libvirt-\ndomain.html#virDomainDetachDeviceFlags) returns, the event is delivered before\nthis API call ends. To help existing clients work better in most cases, this\nAPI will try to transform an asynchronous device removal that finishes shortly\nafter the request into a synchronous removal. In other words, this API may\nwait a bit for the removal to complete in case it was not synchronous.\n\nBe aware that hotplug changes might not persist across a domain going into S4\nstate (also known as hibernation) unless you also modify the persistent domain\ndefinition.\n\nThe supplied XML description of the device should be as specific as its\ndefinition in the domain XML. The set of attributes used to match the device\nare internal to the drivers. Using a partial definition, or attempting to\ndetach a device that is not present in the domain XML, but shares some\nspecific attributes with one that is present, may lead to unexpected results.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d21a99ff-d968-40ed-9a7e-851effe1401f": {"__data__": {"id_": "d21a99ff-d968-40ed-9a7e-851effe1401f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4910be66-9ce7-4b97-862f-ec1430d3b0a6", "node_type": null, "metadata": {}, "hash": "b57548a20f295e81006b84195759ad99ca01ce90f4209697e25b6ef7efac2346"}, "3": {"node_id": "2432c949-d88b-4f2d-8420-eecf72cea2af", "node_type": null, "metadata": {}, "hash": "d5cbd4688e3ad75835582653063cf2467f78334e65cced2bd1b91c2117030814"}}, "hash": "0d903c22b2c75d950943fe94821614285bf7bf3348ba1172043794d28738ad71", "text": "domain\n\n    pointer to domain object\nxml\n\n    pointer to XML description of one device\nflags\n\n    bitwise-OR of [virDomainDeviceModifyFlags](libvirt-libvirt-domain.html#virDomainDeviceModifyFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainFDAssociate`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainFDAssociate\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t unsigned int nfds,\n    \t\t\t\t\t int * fds,\n    \t\t\t\t\t unsigned int flags)\n\nAssociate the FDs in `fd` with `domain` under `name`. The FDs are associated\nas long as the connection used to associated exists and are disposed of\nafterwards. FD may still be kept open by the hypervisor for as long as it's\nneeded.\n\nSecurity labelling (e.g. via the selinux) may be applied on the passed FDs\nwhen required for usage by the VM. By default libvirt does not restore the\nseclabels on the FDs afterwards to avoid keeping it open unnecessarily.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2432c949-d88b-4f2d-8420-eecf72cea2af": {"__data__": {"id_": "2432c949-d88b-4f2d-8420-eecf72cea2af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d21a99ff-d968-40ed-9a7e-851effe1401f", "node_type": null, "metadata": {}, "hash": "0d903c22b2c75d950943fe94821614285bf7bf3348ba1172043794d28738ad71"}, "3": {"node_id": "0e61edcd-513b-4a73-ace0-cec982777d5a", "node_type": null, "metadata": {}, "hash": "ee65f62024be701be4d5f479f289a01a5bcddf14bb6b5f444667198c0d13db90"}}, "hash": "d5cbd4688e3ad75835582653063cf2467f78334e65cced2bd1b91c2117030814", "text": "Restoring of the security label can be requested by passing either\n[VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_RESTORE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_RESTORE) for a best-effort\nattempt to restore the security label after use. Requesting the restore of\nsecurity label will require that the file descriptors are kept open for the\nwhole time they are used by the hypervisor, or other additional overhead.\n\nIn certain cases usage of the fd group would imply read-only access. Passing\n[VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_WRITABLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_WRITABLE) in `flags` ensures that\na writable security label is picked in case when the file represented by the\nfds may be used in write mode.\n\ndomain\n\n    a domain object\nname\n\n    name for the file descriptor group\nnfds\n\n    number of fds in `fds`\nfds\n\n    file descriptors to associate with domain\nflags\n\n    optional flags; bitwise-OR of supported [virDomainFDAssociateFlags](libvirt-libvirt-domain.html#virDomainFDAssociateFlags)\nReturns\n\n    0 on success, -1 on error.\n\n### `virDomainFSFreeze`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainFSFreeze\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char ** mountpoints,\n    \t\t\t\t\t unsigned int nmountpoints,\n    \t\t\t\t\t unsigned int flags)\n\nFreeze specified filesystems within the guest (hence guest agent may be\nrequired depending on hypervisor used). If `mountpoints` is NULL and\n`nmountpoints` is 0, every mounted filesystem on the guest is frozen. In some\nenvironments (e.g.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0e61edcd-513b-4a73-ace0-cec982777d5a": {"__data__": {"id_": "0e61edcd-513b-4a73-ace0-cec982777d5a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2432c949-d88b-4f2d-8420-eecf72cea2af", "node_type": null, "metadata": {}, "hash": "d5cbd4688e3ad75835582653063cf2467f78334e65cced2bd1b91c2117030814"}, "3": {"node_id": "d24dcf59-7884-4cf8-8837-ad3765b8cf11", "node_type": null, "metadata": {}, "hash": "6c5825b476b111ee455651c433095644d6aaee2eb2932c6388906b5b16bf502c"}}, "hash": "ee65f62024be701be4d5f479f289a01a5bcddf14bb6b5f444667198c0d13db90", "text": "In some\nenvironments (e.g. QEMU guest with guest agent which doesn't support\nmountpoints argument), `mountpoints` may need to be NULL.\n\ndom\n\n    a domain object\nmountpoints\n\n    list of mount points to be frozen\nnmountpoints\n\n    the number of mount points specified in `mountpoints`\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    the number of frozen filesystems on success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [fs-freeze](../acl.html#perm_domain_fs-\nfreeze)| -  \n  \n### `virDomainFSInfoFree`\u00c2\u00b6\n\n    \n    \n    void\tvirDomainFSInfoFree\t\t([virDomainFSInfoPtr](libvirt-libvirt-domain.html#virDomainFSInfoPtr) info)\n\nFrees all the memory occupied by `info`.\n\ninfo\n\n    pointer to a FSInfo object\n\n### `virDomainFSThaw`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainFSThaw\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char ** mountpoints,\n    \t\t\t\t\t unsigned int nmountpoints,\n    \t\t\t\t\t unsigned int flags)\n\nThaw specified filesystems within the guest. If `mountpoints` is NULL and\n`nmountpoints` is 0, every mounted filesystem on the guest is thawed. In some\ndrivers (e.g. QEMU driver), `mountpoints` may need to be NULL.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d24dcf59-7884-4cf8-8837-ad3765b8cf11": {"__data__": {"id_": "d24dcf59-7884-4cf8-8837-ad3765b8cf11", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0e61edcd-513b-4a73-ace0-cec982777d5a", "node_type": null, "metadata": {}, "hash": "ee65f62024be701be4d5f479f289a01a5bcddf14bb6b5f444667198c0d13db90"}, "3": {"node_id": "f803dbff-382a-42fd-96e4-bdf47ea5c6a7", "node_type": null, "metadata": {}, "hash": "593679d586d437816b6a74523656abf074ccd3ba537997e9b62ee5c69c062c18"}}, "hash": "6c5825b476b111ee455651c433095644d6aaee2eb2932c6388906b5b16bf502c", "text": "QEMU driver), `mountpoints` may need to be NULL.\n\ndom\n\n    a domain object\nmountpoints\n\n    list of mount points to be thawed\nnmountpoints\n\n    the number of mount points specified in `mountpoints`\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    the number of thawed filesystems on success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [fs-freeze](../acl.html#perm_domain_fs-\nfreeze)| -  \n  \n### `virDomainFSTrim`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainFSTrim\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * mountPoint,\n    \t\t\t\t\t unsigned long long minimum,\n    \t\t\t\t\t unsigned int flags)\n\nCalls FITRIM within the guest (hence guest agent may be required depending on\nhypervisor used). Either call it on each mounted filesystem (`mountPoint` is\nNULL) or just on specified `mountPoint`. `minimum` hints that free ranges\nsmaller than this may be ignored (this is a hint and the guest may not respect\nit). By increasing this value, the fstrim operation will complete more quickly\nfor filesystems with badly fragmented free space, although not all blocks will\nbe discarded. If `minimum` is not zero, the command may fail.\n\ndom\n\n    a domain object\nmountPoint\n\n    which mount point to trim\nminimum\n\n    Minimum contiguous free range to discard in bytes\nflags\n\n    extra flags, not used yet, so callers should always pass 0\nReturns\n\n    0 on success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f803dbff-382a-42fd-96e4-bdf47ea5c6a7": {"__data__": {"id_": "f803dbff-382a-42fd-96e4-bdf47ea5c6a7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d24dcf59-7884-4cf8-8837-ad3765b8cf11", "node_type": null, "metadata": {}, "hash": "6c5825b476b111ee455651c433095644d6aaee2eb2932c6388906b5b16bf502c"}, "3": {"node_id": "fd104015-ba87-478a-bd72-84d720e0c592", "node_type": null, "metadata": {}, "hash": "47685377b3231798d517c6c16cccc8d226ec448319f62c3740e76fc0db55c776"}}, "hash": "593679d586d437816b6a74523656abf074ccd3ba537997e9b62ee5c69c062c18", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [fs-trim](../acl.html#perm_domain_fs-\ntrim)| -  \n  \n### `virDomainFree`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainFree\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nFree the domain object. The running instance is kept alive. The data structure\nis freed and should not be used thereafter.\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n### `virDomainGetAutostart`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetAutostart\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int * autostart)\n\nProvides a boolean value indicating whether the domain configured to be\nautomatically started when the host machine boots.\n\ndomain\n\n    a domain object\nautostart\n\n    the value returned\nReturns\n\n    -1 in case of error, 0 in case of success\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetBlkioParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetBlkioParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all blkio parameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fd104015-ba87-478a-bd72-84d720e0c592": {"__data__": {"id_": "fd104015-ba87-478a-bd72-84d720e0c592", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f803dbff-382a-42fd-96e4-bdf47ea5c6a7", "node_type": null, "metadata": {}, "hash": "593679d586d437816b6a74523656abf074ccd3ba537997e9b62ee5c69c062c18"}, "3": {"node_id": "6f266d74-7a01-4642-8932-8d5f09171b4f", "node_type": null, "metadata": {}, "hash": "566578b27eaaf40752ff53728b405782068b66dde6f382997da77b22045dfa17"}}, "hash": "47685377b3231798d517c6c16cccc8d226ec448319f62c3740e76fc0db55c776", "text": "On input, `nparams` gives the size of the `params`\narray; on output, `nparams` gives how many slots were filled with parameter\ninformation, which might be less but will not exceed the input value.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor. The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\n\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for an equivalent usage example.\n\nThis function may require privileged access to the hypervisor. This function\nexpects the caller to allocate the `params`.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to blkio parameter object (return value, allocated by the caller)\nnparams\n\n    pointer to number of blkio parameters; input and output\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetBlockInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetBlockInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virDomainBlockInfoPtr](libvirt-libvirt-domain.html#virDomainBlockInfoPtr) info,\n    \t\t\t\t\t unsigned int flags)\n\nExtract information about a domain's block device.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6f266d74-7a01-4642-8932-8d5f09171b4f": {"__data__": {"id_": "6f266d74-7a01-4642-8932-8d5f09171b4f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fd104015-ba87-478a-bd72-84d720e0c592", "node_type": null, "metadata": {}, "hash": "47685377b3231798d517c6c16cccc8d226ec448319f62c3740e76fc0db55c776"}, "3": {"node_id": "6982ef1e-1f3b-4380-b2ff-2744579b44b5", "node_type": null, "metadata": {}, "hash": "c448a9cbc2c40f1842c17a887d022eeb0a46770509802c2869f59335b341c13d"}}, "hash": "566578b27eaaf40752ff53728b405782068b66dde6f382997da77b22045dfa17", "text": "The `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nFor QEMU domains, the allocation and physical [virDomainBlockInfo](libvirt-\nlibvirt-domain.html#virDomainBlockInfo) values returned will generally be the\nsame, except when using a non raw, block backing device, such as qcow2 for an\nactive domain. When the persistent domain is not active, QEMU will return the\ndefault which is the same value for allocation and physical.\n\nActive QEMU domains can return an allocation value which is more\nrepresentative of the currently used blocks by the device compared to the\nphysical size of the device. Applications can use/monitor the allocation value\nwith the understanding that if the domain becomes inactive during an attempt\nto get the value, the default values will be returned. Thus, the application\nshould check after the call for the domain being inactive if the values are\nthe same. Optionally, the application could be watching for a shutdown event\nand then ignore any values received afterwards. This can be an issue when a\ndomain is being migrated and the exact timing of the domain being made\ninactive and check of the allocation value results the default being returned.\nFor a transient domain in the similar situation, this call will return -1 and\nan error message indicating the \"domain is not running\".\n\nThe following is some pseudo code illustrating the call sequence:\n\n    \n    \n    ...\n    virDomainPtr dom;\n    virDomainBlockInfo info;\n    char *device;\n    ...\n    // Either get a list of all domains or a specific domain\n    // via a virDomainLookupBy*() call.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6982ef1e-1f3b-4380-b2ff-2744579b44b5": {"__data__": {"id_": "6982ef1e-1f3b-4380-b2ff-2744579b44b5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6f266d74-7a01-4642-8932-8d5f09171b4f", "node_type": null, "metadata": {}, "hash": "566578b27eaaf40752ff53728b405782068b66dde6f382997da77b22045dfa17"}, "3": {"node_id": "8f6bbd47-204f-427f-a4a7-e49c25ec7720", "node_type": null, "metadata": {}, "hash": "495ad8eff84374506257a98373a35e4fd108bd8059b0fd6ec85f83e975361d33"}}, "hash": "c448a9cbc2c40f1842c17a887d022eeb0a46770509802c2869f59335b341c13d", "text": "//\n    // It's also required to fill in the device pointer, but that's\n    // specific to the implementation. For the purposes of this example\n    // a qcow2 backed device name string would need to be provided.\n    ...\n    // If the following call is made on a persistent domain with a\n    // qcow2 block backed block device, then it's possible the returned\n    // allocation equals the physical value. In that case, the domain\n    // that may have been active prior to calling has become inactive,\n    // such as is the case during a domain migration. Thus once we\n    // get data returned, check for active domain when the values are\n    // the same.\n    if (virDomainGetBlockInfo(dom, device, &info, 0) < 0)\n        goto failure;\n    if (info.allocation == info.physical) {\n        // If the domain is no longer active,\n        // then the defaults are being returned.\n        if (!virDomainIsActive())\n                goto ignore_return;\n    }\n    // Do something with the allocation and physical values\n    ...\n\ndomain\n\n    a domain object\ndisk\n\n    path to the block device, or device shorthand\ninfo\n\n    pointer to a [virDomainBlockInfo](libvirt-libvirt-domain.html#virDomainBlockInfo) structure allocated by the user\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8f6bbd47-204f-427f-a4a7-e49c25ec7720": {"__data__": {"id_": "8f6bbd47-204f-427f-a4a7-e49c25ec7720", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6982ef1e-1f3b-4380-b2ff-2744579b44b5", "node_type": null, "metadata": {}, "hash": "c448a9cbc2c40f1842c17a887d022eeb0a46770509802c2869f59335b341c13d"}, "3": {"node_id": "7865805b-71e2-4d98-85ea-d90e918c2416", "node_type": null, "metadata": {}, "hash": "dbd5721e6b6eddec1e7e8b27d48a14532b04c8de2d51737b80d9e6301f3ad8c5"}}, "hash": "495ad8eff84374506257a98373a35e4fd108bd8059b0fd6ec85f83e975361d33", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetBlockIoTune`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetBlockIoTune\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all block IO tunable parameters for a given device. On input, `nparams`\ngives the size of the `params` array; on output, `nparams` gives how many\nslots were filled with parameter information, which might be less but will not\nexceed the input value.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor, either for the given `disk` (note that block devices of\ndifferent types might support different parameters), or if `disk` is NULL, for\nall possible disks. The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for more details.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"xvda\").", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7865805b-71e2-4d98-85ea-d90e918c2416": {"__data__": {"id_": "7865805b-71e2-4d98-85ea-d90e918c2416", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8f6bbd47-204f-427f-a4a7-e49c25ec7720", "node_type": null, "metadata": {}, "hash": "495ad8eff84374506257a98373a35e4fd108bd8059b0fd6ec85f83e975361d33"}, "3": {"node_id": "2b2352f9-72b9-4f78-a12e-03cafd82ccda", "node_type": null, "metadata": {}, "hash": "de24136df7f56d71d076a0a96744a314c900c6e21c802a39b7799b3e4f74e3be"}}, "hash": "dbd5721e6b6eddec1e7e8b27d48a14532b04c8de2d51737b80d9e6301f3ad8c5", "text": "Valid names can be found by calling [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk. This parameter cannot be NULL unless `nparams` is 0 on\ninput.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nparams\n\n    Pointer to blkio parameter object (return value, allocated by the caller)\nnparams\n\n    Pointer to number of blkio parameters\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetBlockJobInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetBlockJobInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virDomainBlockJobInfoPtr](libvirt-libvirt-domain.html#virDomainBlockJobInfoPtr) info,\n    \t\t\t\t\t unsigned int flags)\n\nRequest block job information for the given disk. If an operation is active\n`info` will be updated with the current progress. The units used for the\nbandwidth field of `info` depends on `flags`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2b2352f9-72b9-4f78-a12e-03cafd82ccda": {"__data__": {"id_": "2b2352f9-72b9-4f78-a12e-03cafd82ccda", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7865805b-71e2-4d98-85ea-d90e918c2416", "node_type": null, "metadata": {}, "hash": "dbd5721e6b6eddec1e7e8b27d48a14532b04c8de2d51737b80d9e6301f3ad8c5"}, "3": {"node_id": "7885748d-4824-417f-8e71-0b3b85e2bc96", "node_type": null, "metadata": {}, "hash": "cbaec04d0aeeea311ac7df4e3b5e91b12f53535c8225361ebc723ab69043abf3"}}, "hash": "de24136df7f56d71d076a0a96744a314c900c6e21c802a39b7799b3e4f74e3be", "text": "The units used for the\nbandwidth field of `info` depends on `flags`. If `flags` includes\n[VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES), bandwidth is in\nbytes/second (although this mode can risk failure due to overflow, depending\non both client and server word size); otherwise, the value is rounded up to\nMiB/s.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or (since\n0.9.5) the device target shorthand (the <target dev='...'/> sub-element, such\nas \"vda\"). Valid names can be found by calling [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\nIn cases when libvirt can't determine actual progress of the block job from\nthe underlying hypervisor due to corner cases such as the job wasn't yet fully\ninitialized, or finalized and thus the progress can't be queried, libvirt\nreports 'cur = 0, end = 1'.\n\nFor jobs requiring finalizing via qemuDomainBlockJobAbort() with\n[VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT) flag which reached synchronised\nphase, but were empty, or the progress can't be determined libvirt returns\n'cur = 1, end = 1'.\n\nUsers thus should not consider any data where 'end = 1' as absolute progress\nvalue.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7885748d-4824-417f-8e71-0b3b85e2bc96": {"__data__": {"id_": "7885748d-4824-417f-8e71-0b3b85e2bc96", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2b2352f9-72b9-4f78-a12e-03cafd82ccda", "node_type": null, "metadata": {}, "hash": "de24136df7f56d71d076a0a96744a314c900c6e21c802a39b7799b3e4f74e3be"}, "3": {"node_id": "b0b6d920-d008-49b3-b8a5-eced697cba1c", "node_type": null, "metadata": {}, "hash": "8e5f7ac0a449b8ce98f7fa4946efbc54bb5d1cbc97474eae92b3452c5bb09eca"}}, "hash": "cbaec04d0aeeea311ac7df4e3b5e91b12f53535c8225361ebc723ab69043abf3", "text": "Users thus should not consider any data where 'end = 1' as absolute progress\nvalue.\n\nApplications looking for a reliable and low-overhead way to determine whether\na block job already finished or reached synchronised phase should register a\nhandler for the [VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2) event instead of polling this\nAPI.\n\nNote that the progress reported for blockjobs corresponding to a pull-mode\nbackup don't report progress of the backup but rather usage of temporary space\nrequired for the backup.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\ninfo\n\n    pointer to a [virDomainBlockJobInfo](libvirt-libvirt-domain.html#virDomainBlockJobInfo) structure\nflags\n\n    bitwise-OR of [virDomainBlockJobInfoFlags](libvirt-libvirt-domain.html#virDomainBlockJobInfoFlags)\nReturns\n\n    -1 in case of failure, 0 when nothing found, 1 when info was found.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b0b6d920-d008-49b3-b8a5-eced697cba1c": {"__data__": {"id_": "b0b6d920-d008-49b3-b8a5-eced697cba1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7885748d-4824-417f-8e71-0b3b85e2bc96", "node_type": null, "metadata": {}, "hash": "cbaec04d0aeeea311ac7df4e3b5e91b12f53535c8225361ebc723ab69043abf3"}, "3": {"node_id": "f027d6b4-e46a-4fc4-a746-d37a9a307717", "node_type": null, "metadata": {}, "hash": "7bde9cd76eee767e00360ef1b91cf385ba6ca4ccd3c3b6b4339215da1351b9d2"}}, "hash": "8e5f7ac0a449b8ce98f7fa4946efbc54bb5d1cbc97474eae92b3452c5bb09eca", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetCPUStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetCPUStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t unsigned int nparams,\n    \t\t\t\t\t int start_cpu,\n    \t\t\t\t\t unsigned int ncpus,\n    \t\t\t\t\t unsigned int flags)\n\nGet statistics relating to CPU usage attributable to a single domain (in\ncontrast to the statistics returned by [virNodeGetCPUStats](libvirt-libvirt-\nhost.html#virNodeGetCPUStats)() for all processes on the host). `dom` must be\nrunning (an inactive domain has no attributable cpu usage). On input, `params`\nmust contain at least `nparams` * `ncpus` entries, allocated by the caller.\n\nIf `start_cpu` is -1, then `ncpus` must be 1, and the returned results reflect\nthe statistics attributable to the entire domain (such as user and system time\nfor the process as a whole). Otherwise, `start_cpu` represents which cpu to\nstart with, and `ncpus` represents how many consecutive processors to query,\nwith statistics attributable per processor (such as per-cpu usage). If `ncpus`\nis larger than the number of cpus available to query, then the trailing part\nof the array will be unpopulated.\n\nThe remote driver imposes a limit of 128 `ncpus` and 16 `nparams`; the number\nof parameters per cpu should not exceed 16, but if you have a host with more\nthan 128 CPUs, your program should split the request into multiple calls.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f027d6b4-e46a-4fc4-a746-d37a9a307717": {"__data__": {"id_": "f027d6b4-e46a-4fc4-a746-d37a9a307717", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b0b6d920-d008-49b3-b8a5-eced697cba1c", "node_type": null, "metadata": {}, "hash": "8e5f7ac0a449b8ce98f7fa4946efbc54bb5d1cbc97474eae92b3452c5bb09eca"}, "3": {"node_id": "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5", "node_type": null, "metadata": {}, "hash": "eb6067317a3993101c1e112080c31a56fb231b66f85daf5aeeaf001c3e23b445"}}, "hash": "7bde9cd76eee767e00360ef1b91cf385ba6ca4ccd3c3b6b4339215da1351b9d2", "text": "As special cases, if `params` is NULL and `nparams` is 0 and `ncpus` is 1, and\nthe return value will be how many statistics are available for the given\n`start_cpu`. This number may be different for `start_cpu` of -1 than for any\nnon-negative value, but will be the same for all non-negative `start_cpu`.\nLikewise, if `params` is NULL and `nparams` is 0 and `ncpus` is 0, the number\nof cpus available to query is returned. From the host perspective, this would\ntypically match the cpus member of [virNodeGetInfo](libvirt-libvirt-\nhost.html#virNodeGetInfo)(), but might be less due to host cpu hotplug.\n\nFor now, `flags` is unused, and the statistics all relate to the usage from\nthe host perspective. It is possible that a future version will support a flag\nthat queries the cpu usage from the guest's perspective, where the maximum cpu\nto query would be related to [virDomainGetVcpusFlags](libvirt-libvirt-\ndomain.html#virDomainGetVcpusFlags)() rather than [virNodeGetInfo](libvirt-\nlibvirt-host.html#virNodeGetInfo)(). An individual guest vcpu cannot be\nreliably mapped back to a specific host cpu unless a single-processor vcpu\npinning was used, but when `start_cpu` is -1, any difference in usage between\na host and guest perspective would serve as a measure of hypervisor overhead.\n\nTypical use sequence is below.\n\ngetting total stats: set start_cpu as -1, ncpus 1\n\n    \n    \n    virDomainGetCPUStats(dom, NULL, 0, -1, 1, 0); // nparams\n    params = calloc(nparams, sizeof(virTypedParameter))\n    virDomainGetCPUStats(dom, params, nparams, -1, 1, 0); // total stats.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5": {"__data__": {"id_": "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f027d6b4-e46a-4fc4-a746-d37a9a307717", "node_type": null, "metadata": {}, "hash": "7bde9cd76eee767e00360ef1b91cf385ba6ca4ccd3c3b6b4339215da1351b9d2"}, "3": {"node_id": "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c", "node_type": null, "metadata": {}, "hash": "e643c11bf6370d991fdd1ad5880d67ed6ff2fb4e9381301c6d9107f0dbd77dec"}}, "hash": "eb6067317a3993101c1e112080c31a56fb231b66f85daf5aeeaf001c3e23b445", "text": "getting per-cpu stats:\n\n    \n    \n    virDomainGetCPUStats(dom, NULL, 0, 0, 0, 0); // ncpus\n    virDomainGetCPUStats(dom, NULL, 0, 0, 1, 0); // nparams\n    params = calloc(ncpus * nparams, sizeof(virTypedParameter));\n    virDomainGetCPUStats(dom, params, nparams, 0, ncpus, 0); // per-cpu stats\n\ndomain\n\n    domain to query\nparams\n\n    array to populate on output\nnparams\n\n    number of parameters per cpu\nstart_cpu\n\n    which cpu to start with, or -1 for summary\nncpus\n\n    how many cpus to query\nflags\n\n    bitwise-OR of [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 on failure, or the number of statistics that were populated per cpu on success (this will be less than the total number of populated `params`, unless `ncpus` was 1; and may be less than `nparams`). The populated parameters start at each stride of `nparams`, which means the results may be discontiguous; any unpopulated parameters will be zeroed on success (this includes skipped elements if `nparams` is too large, and tail elements if `ncpus` is too large). The caller is responsible for freeing any returned string parameters.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetConnect`\u00c2\u00b6\n\n    \n    \n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirDomainGetConnect\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n\nProvides the connection pointer associated with a domain. The reference\ncounter on the connection is not increased by this call.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c": {"__data__": {"id_": "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5", "node_type": null, "metadata": {}, "hash": "eb6067317a3993101c1e112080c31a56fb231b66f85daf5aeeaf001c3e23b445"}, "3": {"node_id": "7d4dd152-ca51-4e2f-92f9-433bb245eb23", "node_type": null, "metadata": {}, "hash": "f59d714ef85a8a47da114931b7347184e383005759aec3fe814de5546fac4b52"}}, "hash": "e643c11bf6370d991fdd1ad5880d67ed6ff2fb4e9381301c6d9107f0dbd77dec", "text": "The reference\ncounter on the connection is not increased by this call.\n\ndom\n\n    pointer to a domain\nReturns\n\n    the [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) or NULL in case of failure.\n\n### `virDomainGetControlInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetControlInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virDomainControlInfoPtr](libvirt-libvirt-domain.html#virDomainControlInfoPtr) info,\n    \t\t\t\t\t unsigned int flags)\n\nExtract details about current state of control interface to a domain.\n\ndomain\n\n    a domain object\ninfo\n\n    pointer to a [virDomainControlInfo](libvirt-libvirt-domain.html#virDomainControlInfo) structure allocated by the user\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetDiskErrors`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetDiskErrors\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t [virDomainDiskErrorPtr](libvirt-libvirt-domain.html#virDomainDiskErrorPtr) errors,\n    \t\t\t\t\t unsigned int maxerrors,\n    \t\t\t\t\t unsigned int flags)\n\nThe function populates `errors` array with all disks that encountered an I/O\nerror. Disks with no error will not be returned in the `errors` array.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7d4dd152-ca51-4e2f-92f9-433bb245eb23": {"__data__": {"id_": "7d4dd152-ca51-4e2f-92f9-433bb245eb23", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c", "node_type": null, "metadata": {}, "hash": "e643c11bf6370d991fdd1ad5880d67ed6ff2fb4e9381301c6d9107f0dbd77dec"}, "3": {"node_id": "46a4cc72-a262-40fd-982c-05f328ae66dd", "node_type": null, "metadata": {}, "hash": "3d4cef70b98207cbc3356f3b786a1368a224b513c02cf2827f14e3c1d1bf3858"}}, "hash": "f59d714ef85a8a47da114931b7347184e383005759aec3fe814de5546fac4b52", "text": "Disks with no error will not be returned in the `errors` array. Each\ndisk is identified by its target (the dev attribute of target subelement in\ndomain XML), such as \"vda\", and accompanied with the error that was seen on\nit. The caller is also responsible for calling free() on each disk name\nreturned.\n\nIn a special case when `errors` is NULL and `maxerrors` is 0, the function\nreturns preferred size of `errors` that the caller should use to get all disk\nerrors.\n\nSince calling virDomainGetDiskErrors(dom, NULL, 0, 0) to get preferred size of\n`errors` array and getting the errors are two separate operations, new disks\nmay be hotplugged to the domain and new errors may be encountered between the\ntwo calls. Thus, this function may not return all disk errors because the\nsupplied array is not large enough. Such errors may, however, be detected by\nlistening to domain events.\n\ndom\n\n    a domain object\nerrors\n\n    array to populate on output\nmaxerrors\n\n    size of `errors` array\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    number of disks with errors filled in the `errors` array or -1 on error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetEmulatorPinInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetEmulatorPinInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned char * cpumap,\n    \t\t\t\t\t int maplen,\n    \t\t\t\t\t unsigned int flags)\n\nQuery the CPU affinity setting of all emulator threads of domain, store it in\ncpumap.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "46a4cc72-a262-40fd-982c-05f328ae66dd": {"__data__": {"id_": "46a4cc72-a262-40fd-982c-05f328ae66dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7d4dd152-ca51-4e2f-92f9-433bb245eb23", "node_type": null, "metadata": {}, "hash": "f59d714ef85a8a47da114931b7347184e383005759aec3fe814de5546fac4b52"}, "3": {"node_id": "a608cc95-c465-48dd-be03-eb94cdd1dbd5", "node_type": null, "metadata": {}, "hash": "6206f4cdaf460c56b66e2426cd99d4432e8265fda6faf2547ba9d99a5d5b4346"}}, "hash": "3d4cef70b98207cbc3356f3b786a1368a224b513c02cf2827f14e3c1d1bf3858", "text": "domain\n\n    pointer to domain object, or NULL for Domain0\ncpumap\n\n    pointer to a bit map of real CPUs for all emulator threads of this domain (in 8-bit bytes) (OUT) There is only one cpumap for all emulator threads. Must not be NULL.\nmaplen\n\n    the number of bytes in one cpumap, from 1 up to size of CPU map. Must be positive.\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) Must not be [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE) and [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG) concurrently.\nReturns\n\n    1 in case of success, 0 in case of no emulator threads are pined to pcpus, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetFSInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetFSInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t [virDomainFSInfoPtr](libvirt-libvirt-domain.html#virDomainFSInfoPtr) ** info,\n    \t\t\t\t\t unsigned int flags)\n\nGet a list of mapping information for each mounted file systems within the\nspecified guest and the disks.\n\ndom\n\n    a domain object\ninfo\n\n    a pointer to a variable to store an array of mount points information\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    the number of returned mount points, or -1 in case of error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a608cc95-c465-48dd-be03-eb94cdd1dbd5": {"__data__": {"id_": "a608cc95-c465-48dd-be03-eb94cdd1dbd5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "46a4cc72-a262-40fd-982c-05f328ae66dd", "node_type": null, "metadata": {}, "hash": "3d4cef70b98207cbc3356f3b786a1368a224b513c02cf2827f14e3c1d1bf3858"}, "3": {"node_id": "3e33e71f-b85e-44d3-9f7f-57bd04119494", "node_type": null, "metadata": {}, "hash": "26b027a84e6fdc8e0ed11e5fae2c9e679b0d438269f9fbffe050d2e77f480625"}}, "hash": "6206f4cdaf460c56b66e2426cd99d4432e8265fda6faf2547ba9d99a5d5b4346", "text": "On success, the array of the information is stored into `info`. The caller is responsible for calling [virDomainFSInfoFree](libvirt-libvirt-domain.html#virDomainFSInfoFree)() on each array element, then calling free() on `info`. On error, `info` is set to NULL.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [fs-freeze](../acl.html#perm_domain_fs-\nfreeze)| -  \n  \n### `virDomainGetGuestInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetGuestInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int types,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nQueries the guest agent for the various information about the guest system.\nThe reported data depends on the guest agent implementation. The information\nis returned as an array of typed parameters containing the individual\nparameters. The parameter name for each information field consists of a dot-\nseparated string containing the name of the requested group followed by a\ngroup-specific description of the statistic value.\n\nThe information groups are enabled using the `types` parameter which is a\nbinary-OR of enum [virDomainGuestInfoTypes](libvirt-libvirt-\ndomain.html#virDomainGuestInfoTypes). The following groups are available\n(although not necessarily implemented for each hypervisor):\n\n[VIR_DOMAIN_GUEST_INFO_USERS](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_USERS): returns information about users that\nare currently logged in within the guest domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3e33e71f-b85e-44d3-9f7f-57bd04119494": {"__data__": {"id_": "3e33e71f-b85e-44d3-9f7f-57bd04119494", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a608cc95-c465-48dd-be03-eb94cdd1dbd5", "node_type": null, "metadata": {}, "hash": "6206f4cdaf460c56b66e2426cd99d4432e8265fda6faf2547ba9d99a5d5b4346"}, "3": {"node_id": "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53", "node_type": null, "metadata": {}, "hash": "a6e141616e57d88ed20ee6e4bc1536410219baec59e13bbe980b294ba4d9e452"}}, "hash": "26b027a84e6fdc8e0ed11e5fae2c9e679b0d438269f9fbffe050d2e77f480625", "text": "The typed parameter keys are\nin this format:\n\n    \n    \n       \"user.count\" - the number of active users on this domain as an\n                      unsigned int\n       \"user.<num>.name\" - username of the user as a string\n       \"user.<num>.domain\" - domain of the user as a string (may only be\n                             present on certain guest types)\n       \"user.<num>.login-time\" - the login time of a user in milliseconds\n                                 since the epoch as unsigned long long\n\n[VIR_DOMAIN_GUEST_INFO_OS](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_OS): Return information about the operating\nsystem running within the guest. The typed parameter keys are in this format:\n\n    \n    \n       \"os.id\" - a string identifying the operating system\n       \"os.name\" - the name of the operating system, suitable for presentation\n                   to a user, as a string\n       \"os.pretty-name\" - a pretty name for the operating system, suitable for\n                          presentation to a user, as a string\n       \"os.version\" - the version of the operating system suitable for\n                      presentation to a user, as a string\n       \"os.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53": {"__data__": {"id_": "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3e33e71f-b85e-44d3-9f7f-57bd04119494", "node_type": null, "metadata": {}, "hash": "26b027a84e6fdc8e0ed11e5fae2c9e679b0d438269f9fbffe050d2e77f480625"}, "3": {"node_id": "7f0412a6-7eeb-48e0-8d34-2147df48f6dc", "node_type": null, "metadata": {}, "hash": "145a7c8cd842225df498926423d7619708076bc16efa4f6eaec5a1621f37ea42"}}, "hash": "a6e141616e57d88ed20ee6e4bc1536410219baec59e13bbe980b294ba4d9e452", "text": "as a string\n       \"os.version-id\" - the version id of the operating system suitable for\n                         processing by scripts, as a string\n       \"os.kernel-release\" - the release of the operating system kernel, as a\n                             string\n       \"os.kernel-version\" - the version of the operating system kernel, as a\n                             string\n       \"os.machine\" - the machine hardware name as a string\n       \"os.variant\" - a specific variant or edition of the operating system\n                      suitable for presentation to a user, as a string\n       \"os.variant-id\" - the id for a specific variant or edition of the\n                         operating system, as a string\n\n[VIR_DOMAIN_GUEST_INFO_TIMEZONE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_TIMEZONE): Returns information about the\ntimezone within the domain. The typed parameter keys are in this format:\n\n    \n    \n       \"timezone.name\" - the name of the timezone as a string\n       \"timezone.offset\" - the offset to UTC in seconds as an int\n\n[VIR_DOMAIN_GUEST_INFO_FILESYSTEM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_FILESYSTEM): Returns information about the\nfilesystems within the domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7f0412a6-7eeb-48e0-8d34-2147df48f6dc": {"__data__": {"id_": "7f0412a6-7eeb-48e0-8d34-2147df48f6dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53", "node_type": null, "metadata": {}, "hash": "a6e141616e57d88ed20ee6e4bc1536410219baec59e13bbe980b294ba4d9e452"}, "3": {"node_id": "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75", "node_type": null, "metadata": {}, "hash": "b2032a1db02e2163fd5a8e40b6867fdd0a95dfec4d30f8e1744b069bf2b6d1d8"}}, "hash": "145a7c8cd842225df498926423d7619708076bc16efa4f6eaec5a1621f37ea42", "text": "The typed parameter keys are in this format:\n\n    \n    \n       \"fs.count\" - the number of filesystems defined on this domain\n                    as an unsigned int\n       \"fs.<num>.mountpoint\" - the path to the mount point for the filesystem\n       \"fs.<num>.name\" - device name in the guest (e.g. \"sda1\")\n       \"fs.<num>.fstype\" - the type of filesystem\n       \"fs.<num>.total-bytes\" - the total size of the filesystem\n       \"fs.<num>.used-bytes\" - the number of bytes used in the filesystem\n       \"fs.<num>.disk.count\" - the number of disks targeted by this filesystem\n       \"fs.<num>.disk.<num>.alias\" - the device alias of the disk (e.g. sda)\n       \"fs.<num>.disk.<num>.serial\" - the serial number of the disk\n       \"fs.<num>.disk.<num>.device\" - the device node of the disk\n\n[VIR_DOMAIN_GUEST_INFO_DISKS](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_DISKS): Returns information about the disks\nwithin the domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75": {"__data__": {"id_": "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7f0412a6-7eeb-48e0-8d34-2147df48f6dc", "node_type": null, "metadata": {}, "hash": "145a7c8cd842225df498926423d7619708076bc16efa4f6eaec5a1621f37ea42"}, "3": {"node_id": "edea8ca3-456e-40b8-9167-d24124f2631e", "node_type": null, "metadata": {}, "hash": "05432195ebb1fc10a93f85c0517e9de10bfec1dee2697de2e5c1d75514d1e822"}}, "hash": "b2032a1db02e2163fd5a8e40b6867fdd0a95dfec4d30f8e1744b069bf2b6d1d8", "text": "The typed parameter keys are in this format:\n\n    \n    \n       \"disk.count\" - the number of disks defined on this domain\n                       as an unsigned int\n       \"disk.<num>.name\" - device node (Linux) or device UNC (Windows)\n       \"disk.<num>.partition\" - whether this is a partition or disk\n       \"disk.<num>.dependency.count\" - the number of device dependencies\n                       e.g. for LVs of the LVM this will\n                       hold the list of PVs, for LUKS encrypted volume this will\n                       contain the disk where the volume is placed. (Linux)\n       \"disk.<num>.dependency.<num>.name\" - a dependency\n       \"disk.<num>.serial\" - optional disk serial number (as string)\n       \"disk.<num>.alias\" - the device alias of the disk (e.g. sda)\n       \"disk.<num>.guest_alias\" - optional alias assigned to the disk, on Linux\n                       this is a name assigned by device mapper\n\n[VIR_DOMAIN_GUEST_INFO_HOSTNAME](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_HOSTNAME): Returns information about the\nhostname of the domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "edea8ca3-456e-40b8-9167-d24124f2631e": {"__data__": {"id_": "edea8ca3-456e-40b8-9167-d24124f2631e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75", "node_type": null, "metadata": {}, "hash": "b2032a1db02e2163fd5a8e40b6867fdd0a95dfec4d30f8e1744b069bf2b6d1d8"}, "3": {"node_id": "a482a5fc-63d2-4747-a196-f1038aca092b", "node_type": null, "metadata": {}, "hash": "e015f86d412455598ccb9bf087dd5cecdc49412dbb1187483113ec03b24abe31"}}, "hash": "05432195ebb1fc10a93f85c0517e9de10bfec1dee2697de2e5c1d75514d1e822", "text": "The typed parameter keys are in this format:\n\n    \n    \n       \"hostname\" - the hostname of the domain\n\n[VIR_DOMAIN_GUEST_INFO_INTERFACES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_GUEST_INFO_INTERFACES): Returns information about the\ninterfaces within the domain. The typed parameter keys are in this format:\n\n    \n    \n       \"if.count\" - the number of interfaces defined on this domain\n       \"if.<num>.name\" - name in the guest (e.g. ``eth0``) for interface <num>\n       \"if.<num>.hwaddr\" - hardware address in the guest for interface <num>\n       \"if.<num>.addr.count - the number of IP addresses of interface <num>\n       \"if.<num>.addr.<num1>.type\" - the IP address type of addr <num1> (e.g. ipv4)\n       \"if.<num>.addr.<num1>.addr\" - the IP address of addr <num1>\n       \"if.<num>.addr.<num1>.prefix\" - the prefix of IP address of addr <num1>\n\nUsing 0 for `types` returns all information groups supported by the given\nhypervisor.\n\nThis API requires the VM to run. The caller is responsible for calling\n[virTypedParamsFree](libvirt-libvirt-common.html#virTypedParamsFree) to free\nmemory returned in `params`.\n\ndomain\n\n    pointer to domain object\ntypes\n\n    types of information to return, binary-OR of [virDomainGuestInfoTypes](libvirt-libvirt-domain.html#virDomainGuestInfoTypes)\nparams\n\n    location to store the guest info parameters\nnparams\n\n    number of items in `params`\nflags\n\n    currently unused, set to 0\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a482a5fc-63d2-4747-a196-f1038aca092b": {"__data__": {"id_": "a482a5fc-63d2-4747-a196-f1038aca092b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "edea8ca3-456e-40b8-9167-d24124f2631e", "node_type": null, "metadata": {}, "hash": "05432195ebb1fc10a93f85c0517e9de10bfec1dee2697de2e5c1d75514d1e822"}, "3": {"node_id": "24e907aa-0358-4f45-b5bb-49c43cf8c6b8", "node_type": null, "metadata": {}, "hash": "5e3428d6b164852be781117335e8951fba5c82a4cac0e1d42bdc6d6c06b0417d"}}, "hash": "e015f86d412455598ccb9bf087dd5cecdc49412dbb1187483113ec03b24abe31", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainGetGuestVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetGuestVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t unsigned int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nQueries the guest agent for state and information regarding vCPUs from guest's\nperspective. The reported data depends on the guest agent implementation.\n\nReported fields stored in `params`: 'vcpus': string containing bitmap\nrepresenting vCPU ids as reported by the guest 'online': string containing\nbitmap representing online vCPUs as reported by the guest agent. 'offlinable':\nstring containing bitmap representing ids of vCPUs that can be offlined\n\nThis API requires the VM to run. The caller is responsible for calling\n[virTypedParamsFree](libvirt-libvirt-common.html#virTypedParamsFree) to free\nmemory returned in `params`.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer that will be filled with an array of typed parameters\nnparams\n\n    pointer filled with number of elements in `params`\nflags\n\n    currently unused, callers shall pass 0\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "24e907aa-0358-4f45-b5bb-49c43cf8c6b8": {"__data__": {"id_": "24e907aa-0358-4f45-b5bb-49c43cf8c6b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a482a5fc-63d2-4747-a196-f1038aca092b", "node_type": null, "metadata": {}, "hash": "e015f86d412455598ccb9bf087dd5cecdc49412dbb1187483113ec03b24abe31"}, "3": {"node_id": "9a57b1fc-8b95-4e50-a1b9-8d1c10815161", "node_type": null, "metadata": {}, "hash": "708e596979d0f6a644cdab1c10fda8584f7dad6ed16f6eb649686e8898fb8cad"}}, "hash": "5e3428d6b164852be781117335e8951fba5c82a4cac0e1d42bdc6d6c06b0417d", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainGetHostname`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainGetHostname\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nGet the hostname for that domain. If no hostname is found, then an error is\nraised with [VIR_ERR_NO_HOSTNAME](libvirt-virterror.html#VIR_ERR_NO_HOSTNAME)\ncode.\n\nDependent on hypervisor and `flags` used, this may require a guest agent to be\navailable.\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainGetHostnameFlags](libvirt-libvirt-domain.html#virDomainGetHostnameFlags)\nReturns\n\n    the hostname which must be freed by the caller, or NULL if there was an error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9a57b1fc-8b95-4e50-a1b9-8d1c10815161": {"__data__": {"id_": "9a57b1fc-8b95-4e50-a1b9-8d1c10815161", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "24e907aa-0358-4f45-b5bb-49c43cf8c6b8", "node_type": null, "metadata": {}, "hash": "5e3428d6b164852be781117335e8951fba5c82a4cac0e1d42bdc6d6c06b0417d"}, "3": {"node_id": "bdecf87b-33d3-49cb-a600-360d03e9b8d2", "node_type": null, "metadata": {}, "hash": "3d9ab7987c8cc179c2022b11359085c36861e456711c6655dd0cc25afd952311"}}, "hash": "708e596979d0f6a644cdab1c10fda8584f7dad6ed16f6eb649686e8898fb8cad", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainGetID`\u00c2\u00b6\n\n    \n    \n    unsigned int\tvirDomainGetID\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nGet the hypervisor ID number for the domain\n\ndomain\n\n    a domain object\nReturns\n\n    the domain ID number or (unsigned int) -1 in case of error\n\n### `virDomainGetIOThreadInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetIOThreadInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t [virDomainIOThreadInfoPtr](libvirt-libvirt-domain.html#virDomainIOThreadInfoPtr) ** info,\n    \t\t\t\t\t unsigned int flags)\n\nFetch IOThreads of an active domain including the cpumap information to\ndetermine on which CPU the IOThread has affinity to run.\n\ndom\n\n    a domain object\ninfo\n\n    pointer to an array of [virDomainIOThreadInfo](libvirt-libvirt-domain.html#virDomainIOThreadInfo) structures (OUT)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) Must not be [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE) and [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG) concurrently.\nReturns\n\n    the number of IOThreads or -1 in case of error. On success, the array of information is stored into `info`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bdecf87b-33d3-49cb-a600-360d03e9b8d2": {"__data__": {"id_": "bdecf87b-33d3-49cb-a600-360d03e9b8d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9a57b1fc-8b95-4e50-a1b9-8d1c10815161", "node_type": null, "metadata": {}, "hash": "708e596979d0f6a644cdab1c10fda8584f7dad6ed16f6eb649686e8898fb8cad"}, "3": {"node_id": "17fd0707-1c16-463b-8bc5-f4709ae55110", "node_type": null, "metadata": {}, "hash": "749b2c372914458135308a7765bd56101b43c696db1112dad4247fbe7613038a"}}, "hash": "3d9ab7987c8cc179c2022b11359085c36861e456711c6655dd0cc25afd952311", "text": "On success, the array of information is stored into `info`. The caller is responsible for calling [virDomainIOThreadInfoFree](libvirt-libvirt-domain.html#virDomainIOThreadInfoFree)() on each array element, then calling free() on `info`. On error, `info` is set to NULL.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virDomainInfoPtr](libvirt-libvirt-domain.html#virDomainInfoPtr) info)\n\nExtract information about a domain. Note that if the connection used to get\nthe domain is limited only a partial set of the information can be extracted.\n\ndomain\n\n    a domain object\ninfo\n\n    pointer to a [virDomainInfo](libvirt-libvirt-domain.html#virDomainInfo) structure allocated by the user\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetInterfaceParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetInterfaceParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * device,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all interface parameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "17fd0707-1c16-463b-8bc5-f4709ae55110": {"__data__": {"id_": "17fd0707-1c16-463b-8bc5-f4709ae55110", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bdecf87b-33d3-49cb-a600-360d03e9b8d2", "node_type": null, "metadata": {}, "hash": "3d9ab7987c8cc179c2022b11359085c36861e456711c6655dd0cc25afd952311"}, "3": {"node_id": "8f2454c6-856b-4c9b-b808-6219a0542efc", "node_type": null, "metadata": {}, "hash": "3c454ff6ad78500067c47cbd373f48541dea9fd1b779cbd2f7103319e1c78d12"}}, "hash": "749b2c372914458135308a7765bd56101b43c696db1112dad4247fbe7613038a", "text": "On input, `nparams` gives the size of the\n`params` array; on output, `nparams` gives how many slots were filled with\nparameter information, which might be less but will not exceed the input\nvalue.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor. The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for an equivalent usage example.\n\nThis function may require privileged access to the hypervisor. This function\nexpects the caller to allocate the `params`.\n\ndomain\n\n    pointer to domain object\ndevice\n\n    the interface name or mac address\nparams\n\n    pointer to interface parameter objects (return value, allocated by the caller)\nnparams\n\n    pointer to number of interface parameter; input and output\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetJobInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetJobInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virDomainJobInfoPtr](libvirt-libvirt-domain.html#virDomainJobInfoPtr) info)\n\nExtract information about progress of a background job on a domain. Will\nreturn an error if the domain is not active.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8f2454c6-856b-4c9b-b808-6219a0542efc": {"__data__": {"id_": "8f2454c6-856b-4c9b-b808-6219a0542efc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "17fd0707-1c16-463b-8bc5-f4709ae55110", "node_type": null, "metadata": {}, "hash": "749b2c372914458135308a7765bd56101b43c696db1112dad4247fbe7613038a"}, "3": {"node_id": "84d11f64-94dc-48e5-af36-a4577d050866", "node_type": null, "metadata": {}, "hash": "8f7cbfea943fc9ef815dc79b132935f51daa46128ea94c4aceb03b809ea89986"}}, "hash": "3c454ff6ad78500067c47cbd373f48541dea9fd1b779cbd2f7103319e1c78d12", "text": "Will\nreturn an error if the domain is not active.\n\nThis function returns a limited amount of information in comparison to\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats)().\n\ndomain\n\n    a domain object\ninfo\n\n    pointer to a [virDomainJobInfo](libvirt-libvirt-domain.html#virDomainJobInfo) structure allocated by the user\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetJobStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetJobStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int * type,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nExtract information about progress of a background job on a domain. Will\nreturn an error if the domain is not active. The function returns a superset\nof progress information provided by [virDomainGetJobInfo](libvirt-libvirt-\ndomain.html#virDomainGetJobInfo). Possible fields returned in `params` are\ndefined by VIR_DOMAIN_JOB_* macros and new fields will likely be introduced in\nthe future so callers may receive fields that they do not understand in case\nthey talk to a newer server.\n\nWhen `flags` contains [VIR_DOMAIN_JOB_STATS_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_JOB_STATS_COMPLETED), the function will return\nstatistics about a recently completed job.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "84d11f64-94dc-48e5-af36-a4577d050866": {"__data__": {"id_": "84d11f64-94dc-48e5-af36-a4577d050866", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8f2454c6-856b-4c9b-b808-6219a0542efc", "node_type": null, "metadata": {}, "hash": "3c454ff6ad78500067c47cbd373f48541dea9fd1b779cbd2f7103319e1c78d12"}, "3": {"node_id": "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de", "node_type": null, "metadata": {}, "hash": "324ad93a71949ba06fa010f75b1c6c1ffc1bdf9cae672691eb6f6c036cfc49cc"}}, "hash": "8f7cbfea943fc9ef815dc79b132935f51daa46128ea94c4aceb03b809ea89986", "text": "Specifically, this flag may be used\nto query statistics of a completed incoming pre-copy migration (statistics for\npost-copy migration are only available on the source host). Statistics of a\ncompleted job are automatically destroyed once read (unless the\nVIR_DOMAIN_JOB_STATS_COMPLETED_KEEP is used as well) or when libvirtd is\nrestarted. Note that time information returned for completed migrations may be\ncompletely irrelevant unless both source and destination hosts have\nsynchronized time (i.e., NTP daemon is running on both of them). The\nstatistics of a completed job can also be obtained by listening to a\n[VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) event (on the source host in\ncase of a migration job).\n\ndomain\n\n    a domain object\ntype\n\n    where to store the job type (one of [virDomainJobType](libvirt-libvirt-domain.html#virDomainJobType))\nparams\n\n    where to store job statistics\nnparams\n\n    number of items in `params`\nflags\n\n    bitwise-OR of [virDomainGetJobStatsFlags](libvirt-libvirt-domain.html#virDomainGetJobStatsFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de": {"__data__": {"id_": "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "84d11f64-94dc-48e5-af36-a4577d050866", "node_type": null, "metadata": {}, "hash": "8f7cbfea943fc9ef815dc79b132935f51daa46128ea94c4aceb03b809ea89986"}, "3": {"node_id": "81f09c74-4561-4332-b0ff-9db38cc28347", "node_type": null, "metadata": {}, "hash": "80b898a6e180a6f7e4443bd7e7a82478bd6bc9924c33503c7bd23cd53eecde72"}}, "hash": "324ad93a71949ba06fa010f75b1c6c1ffc1bdf9cae672691eb6f6c036cfc49cc", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetLaunchSecurityInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetLaunchSecurityInfo\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet the launch security info. In case of the SEV guest, this will return the\nlaunch measurement.\n\ndomain\n\n    a domain object\nparams\n\n    where to store security info\nnparams\n\n    number of items in `params`\nflags\n\n    currently used, set to 0.\nReturns\n\n    -1 in case of failure, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetMaxMemory`\u00c2\u00b6\n\n    \n    \n    unsigned long\tvirDomainGetMaxMemory\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nRetrieve the maximum amount of physical memory allocated to a domain. If\ndomain is NULL, then this get the amount of memory reserved to Domain0 i.e.\nthe domain where the application runs.\n\ndomain\n\n    a domain object or NULL\nReturns\n\n    the memory size in kibibytes (blocks of 1024 bytes), or 0 in case of error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "81f09c74-4561-4332-b0ff-9db38cc28347": {"__data__": {"id_": "81f09c74-4561-4332-b0ff-9db38cc28347", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de", "node_type": null, "metadata": {}, "hash": "324ad93a71949ba06fa010f75b1c6c1ffc1bdf9cae672691eb6f6c036cfc49cc"}, "3": {"node_id": "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0", "node_type": null, "metadata": {}, "hash": "2e15565cb25de3d5a385a21c5a23a8ef3fc3cac03d51ae7d5210a1890dbb08aa"}}, "hash": "80b898a6e180a6f7e4443bd7e7a82478bd6bc9924c33503c7bd23cd53eecde72", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetMaxVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetMaxVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nProvides the maximum number of virtual CPUs supported for the guest VM. If the\nguest is inactive, this is basically the same as\n[virConnectGetMaxVcpus](libvirt-libvirt-host.html#virConnectGetMaxVcpus)(). If\nthe guest is running this will reflect the maximum number of virtual CPUs the\nguest was booted with. For more details, see [virDomainGetVcpusFlags](libvirt-\nlibvirt-domain.html#virDomainGetVcpusFlags)().\n\ndomain\n\n    pointer to domain object\nReturns\n\n    the maximum of virtual CPU or -1 in case of error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetMemoryParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetMemoryParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all memory parameters. On input, `nparams` gives the size of the `params`\narray; on output, `nparams` gives how many slots were filled with parameter\ninformation, which might be less but will not exceed the input value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0": {"__data__": {"id_": "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "81f09c74-4561-4332-b0ff-9db38cc28347", "node_type": null, "metadata": {}, "hash": "80b898a6e180a6f7e4443bd7e7a82478bd6bc9924c33503c7bd23cd53eecde72"}, "3": {"node_id": "daf5e4ca-eea3-4dcc-945e-144e75e1719d", "node_type": null, "metadata": {}, "hash": "96f56f8614692cdbb9b9150995925d118640c085f942da42b3d89c9ffe313b94"}}, "hash": "2e15565cb25de3d5a385a21c5a23a8ef3fc3cac03d51ae7d5210a1890dbb08aa", "text": "As a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor. The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\n\nHere is a sample code snippet:\n\n    \n    \n    if (virDomainGetMemoryParameters(dom, NULL, &nparams, 0) == 0 &&\n        nparams != 0) {\n        if ((params = malloc(sizeof(*params) * nparams)) == NULL)\n            goto error;\n        memset(params, 0, sizeof(*params) * nparams);\n        if (virDomainGetMemoryParameters(dom, params, &nparams, 0))\n            goto error;\n    }\n\nThis function may require privileged access to the hypervisor. This function\nexpects the caller to allocate the `params`.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to memory parameter object (return value, allocated by the caller)\nnparams\n\n    pointer to number of memory parameters; input and output\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "daf5e4ca-eea3-4dcc-945e-144e75e1719d": {"__data__": {"id_": "daf5e4ca-eea3-4dcc-945e-144e75e1719d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0", "node_type": null, "metadata": {}, "hash": "2e15565cb25de3d5a385a21c5a23a8ef3fc3cac03d51ae7d5210a1890dbb08aa"}, "3": {"node_id": "7ad4a1ee-b3a0-4513-b317-7020c6fd75da", "node_type": null, "metadata": {}, "hash": "f3cef0c3f04dc777693b69c10b92b09ddf6b8bc20943717fdbe22d9390a31f61"}}, "hash": "96f56f8614692cdbb9b9150995925d118640c085f942da42b3d89c9ffe313b94", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetMessages`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetMessages\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t char *** msgs,\n    \t\t\t\t\t unsigned int flags)\n\nFetch a list of all messages recorded against the VM and store them into\n`msgs` array which is allocated upon successful return and is NULL terminated.\nThe caller is responsible for freeing `msgs` when no longer needed.\n\nIf `flags` is zero then all messages are reported. The\n[virDomainMessageType](libvirt-libvirt-domain.html#virDomainMessageType)\nconstants can be used to restrict results to certain types of message.\n\nNote it is hypervisor dependent whether messages are available for shutoff\nguests, or running guests, or both. Thus a client should be prepared to re-\nfetch messages when a guest transitions between running and shutoff states.\n\ndomain\n\n    a domain object\nmsgs\n\n    pointer to a variable to store messages\nflags\n\n    zero or more [virDomainMessageType](libvirt-libvirt-domain.html#virDomainMessageType) flags\nReturns\n\n    number of messages stored in `msgs`, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7ad4a1ee-b3a0-4513-b317-7020c6fd75da": {"__data__": {"id_": "7ad4a1ee-b3a0-4513-b317-7020c6fd75da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "daf5e4ca-eea3-4dcc-945e-144e75e1719d", "node_type": null, "metadata": {}, "hash": "96f56f8614692cdbb9b9150995925d118640c085f942da42b3d89c9ffe313b94"}, "3": {"node_id": "54560b36-c390-42c4-bf35-861f4c2b5599", "node_type": null, "metadata": {}, "hash": "d8fa7cf0a4f992383745d20640136ccdca69f39b3ba5d81a9505e38b115f0c1d"}}, "hash": "f3cef0c3f04dc777693b69c10b92b09ddf6b8bc20943717fdbe22d9390a31f61", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetMetadata`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainGetMetadata\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int type,\n    \t\t\t\t\t const char * uri,\n    \t\t\t\t\t unsigned int flags)\n\nRetrieves the appropriate domain element given by `type`. If\n[VIR_DOMAIN_METADATA_ELEMENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_METADATA_ELEMENT) is requested parameter `uri` must be\nset to the name of the namespace the requested elements belong to, otherwise\nmust be NULL.\n\nIf an element of the domain XML is not present, the resulting error will be\n[VIR_ERR_NO_DOMAIN_METADATA](libvirt-\nvirterror.html#VIR_ERR_NO_DOMAIN_METADATA). This method forms a shortcut for\nseeing information from [virDomainSetMetadata](libvirt-libvirt-\ndomain.html#virDomainSetMetadata)() without having to go through\n[virDomainGetXMLDesc](libvirt-libvirt-domain.html#virDomainGetXMLDesc)().\n\n`flags` controls whether the live domain or persistent configuration will be\nqueried.\n\ndomain\n\n    a domain object\ntype\n\n    type of metadata, from [virDomainMetadataType](libvirt-libvirt-domain.html#virDomainMetadataType)\nuri\n\n    XML namespace identifier\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    the metadata string on success (caller must free), or NULL in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "54560b36-c390-42c4-bf35-861f4c2b5599": {"__data__": {"id_": "54560b36-c390-42c4-bf35-861f4c2b5599", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7ad4a1ee-b3a0-4513-b317-7020c6fd75da", "node_type": null, "metadata": {}, "hash": "f3cef0c3f04dc777693b69c10b92b09ddf6b8bc20943717fdbe22d9390a31f61"}, "3": {"node_id": "16b1d492-bb21-42d8-bf6c-68d079c32b89", "node_type": null, "metadata": {}, "hash": "faacf778f67d6cf4edaec256aa3a52ed3f0ef806a60adca214927764531d0b3e"}}, "hash": "d8fa7cf0a4f992383745d20640136ccdca69f39b3ba5d81a9505e38b115f0c1d", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetName`\u00c2\u00b6\n\n    \n    \n    const char *\tvirDomainGetName\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nGet the public name for that domain\n\ndomain\n\n    a domain object\nReturns\n\n    a pointer to the name or NULL, the string need not be deallocated its lifetime will be the same as the domain object.\n\n### `virDomainGetNumaParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetNumaParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all numa parameters. On input, `nparams` gives the size of the `params`\narray; on output, `nparams` gives how many slots were filled with parameter\ninformation, which might be less but will not exceed the input value.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor. The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\n\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for an equivalent usage example.\n\nThis function may require privileged access to the hypervisor. This function\nexpects the caller to allocate the `params`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "16b1d492-bb21-42d8-bf6c-68d079c32b89": {"__data__": {"id_": "16b1d492-bb21-42d8-bf6c-68d079c32b89", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "54560b36-c390-42c4-bf35-861f4c2b5599", "node_type": null, "metadata": {}, "hash": "d8fa7cf0a4f992383745d20640136ccdca69f39b3ba5d81a9505e38b115f0c1d"}, "3": {"node_id": "f9e3ce0f-13c1-4e68-8c63-602006adce55", "node_type": null, "metadata": {}, "hash": "7c52f15ae130c027ef10611c952b99731a7b5d7e122026e50f5f82b7e3a968de"}}, "hash": "faacf778f67d6cf4edaec256aa3a52ed3f0ef806a60adca214927764531d0b3e", "text": "This function\nexpects the caller to allocate the `params`.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to numa parameter object (return value, allocated by the caller)\nnparams\n\n    pointer to number of numa parameters\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetOSType`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainGetOSType\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nGet the type of domain operation system.\n\ndomain\n\n    a domain object\nReturns\n\n    the new string or NULL in case of error, the string must be freed by the caller.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetPerfEvents`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetPerfEvents\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all Linux perf events setting.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f9e3ce0f-13c1-4e68-8c63-602006adce55": {"__data__": {"id_": "f9e3ce0f-13c1-4e68-8c63-602006adce55", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "16b1d492-bb21-42d8-bf6c-68d079c32b89", "node_type": null, "metadata": {}, "hash": "faacf778f67d6cf4edaec256aa3a52ed3f0ef806a60adca214927764531d0b3e"}, "3": {"node_id": "a3d1df40-6f0f-4028-856d-7e57a08b5672", "node_type": null, "metadata": {}, "hash": "8c4eacd054ee8b9a23a09449200f8c79f43598bc407afee2803c870381325ecb"}}, "hash": "7c52f15ae130c027ef10611c952b99731a7b5d7e122026e50f5f82b7e3a968de", "text": "Possible fields returned in `params` are\ndefined by VIR_PERF_EVENT_* macros and new fields will likely be introduced in\nthe future.\n\nLinux perf events are performance analyzing tool in Linux.\n\ndomain\n\n    a domain object\nparams\n\n    where to store perf events setting\nnparams\n\n    number of items in `params`\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of failure, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetSchedulerParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetSchedulerParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams)\n\nGet all scheduler parameters. On input, `nparams` gives the size of the\n`params` array; on output, `nparams` gives how many slots were filled with\nparameter information, which might be less but will not exceed the input\nvalue. `nparams` cannot be 0.\n\nIt is hypervisor specific whether this returns the live or persistent state;\nfor more control, use [virDomainGetSchedulerParametersFlags](libvirt-libvirt-\ndomain.html#virDomainGetSchedulerParametersFlags)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a3d1df40-6f0f-4028-856d-7e57a08b5672": {"__data__": {"id_": "a3d1df40-6f0f-4028-856d-7e57a08b5672", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f9e3ce0f-13c1-4e68-8c63-602006adce55", "node_type": null, "metadata": {}, "hash": "7c52f15ae130c027ef10611c952b99731a7b5d7e122026e50f5f82b7e3a968de"}, "3": {"node_id": "218d058a-1b68-4c3d-98fb-96746e238c29", "node_type": null, "metadata": {}, "hash": "e6d1db26f856a9ef9563070afda9029eeefb6c9cbe9617ddf137d65a37fb1200"}}, "hash": "8c4eacd054ee8b9a23a09449200f8c79f43598bc407afee2803c870381325ecb", "text": "domain\n\n    pointer to domain object\nparams\n\n    pointer to scheduler parameter objects (return value)\nnparams\n\n    pointer to number of scheduler parameter objects (this value should generally be as large as the returned value nparams of [virDomainGetSchedulerType](libvirt-libvirt-domain.html#virDomainGetSchedulerType)()); input and output\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetSchedulerParametersFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetSchedulerParametersFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t\t int * nparams,\n    \t\t\t\t\t\t unsigned int flags)\n\nGet all scheduler parameters. On input, `nparams` gives the size of the\n`params` array; on output, `nparams` gives how many slots were filled with\nparameter information, which might be less but will not exceed the input\nvalue. `nparams` cannot be 0.\n\nThe value of `flags` can be exactly [VIR_DOMAIN_AFFECT_CURRENT](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CURRENT),\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE),\nor [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "218d058a-1b68-4c3d-98fb-96746e238c29": {"__data__": {"id_": "218d058a-1b68-4c3d-98fb-96746e238c29", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a3d1df40-6f0f-4028-856d-7e57a08b5672", "node_type": null, "metadata": {}, "hash": "8c4eacd054ee8b9a23a09449200f8c79f43598bc407afee2803c870381325ecb"}, "3": {"node_id": "c57047e4-7fb3-4405-b7cb-2c7b4cecd722", "node_type": null, "metadata": {}, "hash": "ab864c0dda286224a1686d8a10d8317fc9ed81d70a0181423776d680c180e336"}}, "hash": "e6d1db26f856a9ef9563070afda9029eeefb6c9cbe9617ddf137d65a37fb1200", "text": "Here is a sample code snippet:\n\n    \n    \n    char *ret = virDomainGetSchedulerType(dom, &nparams);\n    if (ret && nparams != 0) {\n        if ((params = malloc(sizeof(*params) * nparams)) == NULL)\n            goto error;\n        memset(params, 0, sizeof(*params) * nparams);\n        if (virDomainGetSchedulerParametersFlags(dom, params, &nparams, 0))\n            goto error;\n    }\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to scheduler parameter object (return value)\nnparams\n\n    pointer to number of scheduler parameter (this value should be same than the returned value nparams of [virDomainGetSchedulerType](libvirt-libvirt-domain.html#virDomainGetSchedulerType)()); input and output\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetSchedulerType`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainGetSchedulerType\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int * nparams)\n\nGet the scheduler type and the number of scheduler parameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c57047e4-7fb3-4405-b7cb-2c7b4cecd722": {"__data__": {"id_": "c57047e4-7fb3-4405-b7cb-2c7b4cecd722", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "218d058a-1b68-4c3d-98fb-96746e238c29", "node_type": null, "metadata": {}, "hash": "e6d1db26f856a9ef9563070afda9029eeefb6c9cbe9617ddf137d65a37fb1200"}, "3": {"node_id": "67f5825e-d5a9-46cc-9734-cd7497c3baf1", "node_type": null, "metadata": {}, "hash": "8f8400313ad566192f6377d8a527db903fea3933e25d8d8ca351b4cc5750dd9d"}}, "hash": "ab864c0dda286224a1686d8a10d8317fc9ed81d70a0181423776d680c180e336", "text": "domain\n\n    pointer to domain object\nnparams\n\n    pointer to number of scheduler parameters, can be NULL (return value)\nReturns\n\n    NULL in case of error. The caller must free the returned string.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetSecurityLabel`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetSecurityLabel\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virSecurityLabelPtr](libvirt-libvirt-host.html#virSecurityLabelPtr) seclabel)\n\nExtract security label of an active domain. The 'label' field in the\n`seclabel` argument will be initialized to the empty string if the domain is\nnot running under a security model.\n\ndomain\n\n    a domain object\nseclabel\n\n    pointer to a [virSecurityLabel](libvirt-libvirt-host.html#virSecurityLabel) structure\nReturns\n\n    0 in case of success, -1 in case of failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetSecurityLabelList`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetSecurityLabelList\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virSecurityLabelPtr](libvirt-libvirt-host.html#virSecurityLabelPtr) * seclabels)\n\nExtract the security labels of an active domain. The 'label' field in the\n`seclabels` argument will be initialized to the empty string if the domain is\nnot running under a security model.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "67f5825e-d5a9-46cc-9734-cd7497c3baf1": {"__data__": {"id_": "67f5825e-d5a9-46cc-9734-cd7497c3baf1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c57047e4-7fb3-4405-b7cb-2c7b4cecd722", "node_type": null, "metadata": {}, "hash": "ab864c0dda286224a1686d8a10d8317fc9ed81d70a0181423776d680c180e336"}, "3": {"node_id": "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196", "node_type": null, "metadata": {}, "hash": "cb1278d9f79596e61748a91b0ea658831f2e7e05f1856e0a377cbd1dbe99ca7c"}}, "hash": "8f8400313ad566192f6377d8a527db903fea3933e25d8d8ca351b4cc5750dd9d", "text": "domain\n\n    a domain object\nseclabels\n\n    will be auto-allocated and filled with domains' security labels. Caller must free memory on return.\nReturns\n\n    number of elements in `seclabels` on success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetState`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetState\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int * state,\n    \t\t\t\t\t int * reason,\n    \t\t\t\t\t unsigned int flags)\n\nExtract domain state. Each state can be accompanied with a reason (if known)\nwhich led to the state.\n\ndomain\n\n    a domain object\nstate\n\n    returned state of the domain (one of [virDomainState](libvirt-libvirt-domain.html#virDomainState))\nreason\n\n    returned reason which led to `state` (one of virDomain*Reason corresponding to the current state); it is allowed to be NULL\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196": {"__data__": {"id_": "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "67f5825e-d5a9-46cc-9734-cd7497c3baf1", "node_type": null, "metadata": {}, "hash": "8f8400313ad566192f6377d8a527db903fea3933e25d8d8ca351b4cc5750dd9d"}, "3": {"node_id": "19d95440-989e-45c2-b87f-02c0f664fee7", "node_type": null, "metadata": {}, "hash": "fd2016a624eebaae9f331868e2941395b5020168f03812c5b5c04645d1bd7ff0"}}, "hash": "cb1278d9f79596e61748a91b0ea658831f2e7e05f1856e0a377cbd1dbe99ca7c", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetTime`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetTime\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t long long * seconds,\n    \t\t\t\t\t unsigned int * nseconds,\n    \t\t\t\t\t unsigned int flags)\n\nExtract information about guest time and store it into `seconds` and\n`nseconds`. The `seconds` represents the number of seconds since the UNIX\nEpoch of 1970-01-01 00:00:00 in UTC.\n\nPlease note that some hypervisors may require guest agent to be configured and\nrunning in order to run this API.\n\ndom\n\n    a domain object\nseconds\n\n    domain's time in seconds\nnseconds\n\n    the nanosecond part of `seconds`\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 on success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "19d95440-989e-45c2-b87f-02c0f664fee7": {"__data__": {"id_": "19d95440-989e-45c2-b87f-02c0f664fee7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196", "node_type": null, "metadata": {}, "hash": "cb1278d9f79596e61748a91b0ea658831f2e7e05f1856e0a377cbd1dbe99ca7c"}, "3": {"node_id": "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9", "node_type": null, "metadata": {}, "hash": "caefa0540530db6a435d0c6ca27ac9234f6369ea059fccc6822809054c9fa51d"}}, "hash": "fd2016a624eebaae9f331868e2941395b5020168f03812c5b5c04645d1bd7ff0", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainGetUUID`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetUUID\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned char * uuid)\n\nGet the UUID for a domain\n\ndomain\n\n    a domain object\nuuid\n\n    pointer to a [VIR_UUID_BUFLEN](libvirt-libvirt-host.html#VIR_UUID_BUFLEN) bytes array\nReturns\n\n    -1 in case of error, 0 in case of success\n\n### `virDomainGetUUIDString`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetUUIDString\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t char * buf)\n\nGet the UUID for a domain as string. For more information about UUID see\nRFC4122.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9": {"__data__": {"id_": "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "19d95440-989e-45c2-b87f-02c0f664fee7", "node_type": null, "metadata": {}, "hash": "fd2016a624eebaae9f331868e2941395b5020168f03812c5b5c04645d1bd7ff0"}, "3": {"node_id": "d58f7ddd-b2b1-4341-9331-986618345a8b", "node_type": null, "metadata": {}, "hash": "e6e728c0384277bb5e8f1feb178995853f90091261750a7811d124fe58fb6f92"}}, "hash": "caefa0540530db6a435d0c6ca27ac9234f6369ea059fccc6822809054c9fa51d", "text": "For more information about UUID see\nRFC4122.\n\ndomain\n\n    a domain object\nbuf\n\n    pointer to a [VIR_UUID_STRING_BUFLEN](libvirt-libvirt-host.html#VIR_UUID_STRING_BUFLEN) bytes array\nReturns\n\n    -1 in case of error, 0 in case of success\n\n### `virDomainGetVcpuPinInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetVcpuPinInfo\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int ncpumaps,\n    \t\t\t\t\t unsigned char * cpumaps,\n    \t\t\t\t\t int maplen,\n    \t\t\t\t\t unsigned int flags)\n\nQuery the CPU affinity setting of all virtual CPUs of domain, store it in\ncpumaps.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nncpumaps\n\n    the number of cpumap (listed first to match [virDomainGetVcpus](libvirt-libvirt-domain.html#virDomainGetVcpus))\ncpumaps\n\n    pointer to a bit map of real CPUs for all vcpus of this domain (in 8-bit bytes) (OUT) It's assumed there is <ncpumaps> cpumap in cpumaps array. The memory allocated to cpumaps must be (ncpumaps * maplen) bytes (ie: calloc(ncpumaps, maplen)). One cpumap inside cpumaps has the format described in [virDomainPinVcpu](libvirt-libvirt-domain.html#virDomainPinVcpu)() API. Must not be NULL.\nmaplen\n\n    the number of bytes in one cpumap, from 1 up to size of CPU map. Must be positive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d58f7ddd-b2b1-4341-9331-986618345a8b": {"__data__": {"id_": "d58f7ddd-b2b1-4341-9331-986618345a8b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9", "node_type": null, "metadata": {}, "hash": "caefa0540530db6a435d0c6ca27ac9234f6369ea059fccc6822809054c9fa51d"}, "3": {"node_id": "7211d210-1003-4227-87b2-d2ec1f0e7798", "node_type": null, "metadata": {}, "hash": "c87270f0f8c754d31b0863d98ee8ea257581ab309b3e26d4bb988edd020bb1ea"}}, "hash": "e6e728c0384277bb5e8f1feb178995853f90091261750a7811d124fe58fb6f92", "text": "Must be positive.\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) Must not be [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE) and [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG) concurrently.\nReturns\n\n    the number of virtual CPUs in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virVcpuInfoPtr](libvirt-libvirt-domain.html#virVcpuInfoPtr) info,\n    \t\t\t\t\t int maxinfo,\n    \t\t\t\t\t unsigned char * cpumaps,\n    \t\t\t\t\t int maplen)\n\nExtract information about virtual CPUs of domain, store it in info array and\nalso in cpumaps if this pointer isn't NULL. This call may fail on an inactive\ndomain.\n\nSee also [virDomainGetVcpuPinInfo](libvirt-libvirt-\ndomain.html#virDomainGetVcpuPinInfo) for querying just cpumaps, including on\nan inactive domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7211d210-1003-4227-87b2-d2ec1f0e7798": {"__data__": {"id_": "7211d210-1003-4227-87b2-d2ec1f0e7798", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d58f7ddd-b2b1-4341-9331-986618345a8b", "node_type": null, "metadata": {}, "hash": "e6e728c0384277bb5e8f1feb178995853f90091261750a7811d124fe58fb6f92"}, "3": {"node_id": "0b446208-8b50-4e8b-af3b-58788a7956c9", "node_type": null, "metadata": {}, "hash": "4d127a9977a789c8c95affebd8c4979c9ba8a73be65872cd63825078f727f52a"}}, "hash": "c87270f0f8c754d31b0863d98ee8ea257581ab309b3e26d4bb988edd020bb1ea", "text": "domain\n\n    pointer to domain object, or NULL for Domain0\ninfo\n\n    pointer to an array of [virVcpuInfo](libvirt-libvirt-domain.html#virVcpuInfo) structures (OUT)\nmaxinfo\n\n    number of structures in info array\ncpumaps\n\n    pointer to a bit map of real CPUs for all vcpus of this domain (in 8-bit bytes) (OUT) If cpumaps is NULL, then no cpumap information is returned by the API. It's assumed there is <maxinfo> cpumap in cpumaps array. The memory allocated to cpumaps must be (maxinfo * maplen) bytes (ie: calloc(maxinfo, maplen)). One cpumap inside cpumaps has the format described in [virDomainPinVcpu](libvirt-libvirt-domain.html#virDomainPinVcpu)() API.\nmaplen\n\n    number of bytes in one cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). Must be zero when cpumaps is NULL and positive when it is non-NULL.\nReturns\n\n    the number of info filled in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainGetVcpusFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainGetVcpusFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nQuery the number of virtual CPUs used by the domain. Note that this call may\nfail if the underlying virtualization hypervisor does not support it. This\nfunction may require privileged access to the hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0b446208-8b50-4e8b-af3b-58788a7956c9": {"__data__": {"id_": "0b446208-8b50-4e8b-af3b-58788a7956c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7211d210-1003-4227-87b2-d2ec1f0e7798", "node_type": null, "metadata": {}, "hash": "c87270f0f8c754d31b0863d98ee8ea257581ab309b3e26d4bb988edd020bb1ea"}, "3": {"node_id": "8e63e2e3-4b8d-4476-a415-d9027fb7747f", "node_type": null, "metadata": {}, "hash": "e1d96366c3ee94fd35bf56495f1bd66a610bd2772454fb677af2c2be77130015"}}, "hash": "4d127a9977a789c8c95affebd8c4979c9ba8a73be65872cd63825078f727f52a", "text": "This\nfunction may require privileged access to the hypervisor.\n\nIf `flags` includes [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE), this will query a running domain (which\nwill fail if domain is not active); if it includes\n[VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG), this will query the XML description of\nthe domain. It is an error to set both flags. If neither flag is set (that is,\n[VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then the configuration queried\ndepends on whether the domain is currently running.\n\nIf `flags` includes [VIR_DOMAIN_VCPU_MAXIMUM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_VCPU_MAXIMUM), then the maximum virtual CPU limit is\nqueried. Otherwise, this call queries the current virtual CPU count.\n\nIf `flags` includes [VIR_DOMAIN_VCPU_GUEST](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_VCPU_GUEST), then the state of the processors is\nqueried in the guest instead of the hypervisor. This flag is only usable on\nlive domains. Guest agent may be needed for this flag to be available.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nflags\n\n    bitwise-OR of [virDomainVcpuFlags](libvirt-libvirt-domain.html#virDomainVcpuFlags)\nReturns\n\n    the number of vCPUs in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8e63e2e3-4b8d-4476-a415-d9027fb7747f": {"__data__": {"id_": "8e63e2e3-4b8d-4476-a415-d9027fb7747f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0b446208-8b50-4e8b-af3b-58788a7956c9", "node_type": null, "metadata": {}, "hash": "4d127a9977a789c8c95affebd8c4979c9ba8a73be65872cd63825078f727f52a"}, "3": {"node_id": "868ad7f1-e837-4dda-a74b-692b0cde81a4", "node_type": null, "metadata": {}, "hash": "69bfe2e0c9e8fb6b15ada943a61baf0d1d47756458bcdefa0360ae66ce6d8818"}}, "hash": "e1d96366c3ee94fd35bf56495f1bd66a610bd2772454fb677af2c2be77130015", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)|\nVIR_DOMAIN_VCPU_GUEST  \n  \n### `virDomainGetXMLDesc`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainGetXMLDesc\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nProvide an XML description of the domain. The description may be reused later\nto relaunch the domain with [virDomainCreateXML](libvirt-libvirt-\ndomain.html#virDomainCreateXML)().\n\nNo security-sensitive data will be included unless `flags` contains\n[VIR_DOMAIN_XML_SECURE](libvirt-libvirt-domain.html#VIR_DOMAIN_XML_SECURE);\nthis flag is rejected on read-only connections. If `flags` includes\n[VIR_DOMAIN_XML_INACTIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_XML_INACTIVE), then the XML represents the\nconfiguration that will be used on the next boot of a persistent domain;\notherwise, the configuration represents the currently running domain. If\n`flags` contains [VIR_DOMAIN_XML_UPDATE_CPU](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_XML_UPDATE_CPU), then the portion of the domain XML\ndescribing CPU capabilities is modified to match actual capabilities of the\nhost.\n\nIf `flags` contains [VIR_DOMAIN_XML_MIGRATABLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_XML_MIGRATABLE), the XML is altered to assist in\nmigrations, since the source and destination may be running different libvirt\nversions.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "868ad7f1-e837-4dda-a74b-692b0cde81a4": {"__data__": {"id_": "868ad7f1-e837-4dda-a74b-692b0cde81a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8e63e2e3-4b8d-4476-a415-d9027fb7747f", "node_type": null, "metadata": {}, "hash": "e1d96366c3ee94fd35bf56495f1bd66a610bd2772454fb677af2c2be77130015"}, "3": {"node_id": "353eb641-1503-48e5-9172-fe9629aec9c8", "node_type": null, "metadata": {}, "hash": "1b574c0db9506330c91afdada1269cea3eadb368dfb8eb03e88b457d2b9477a4"}}, "hash": "69bfe2e0c9e8fb6b15ada943a61baf0d1d47756458bcdefa0360ae66ce6d8818", "text": "This may include trimming redundant or default information that\nmight confuse an older recipient, or exposing internal details that aid a\nnewer recipient; this flag is rejected on read-only connections, and the\nresulting XML might not validate against the schema, so it is mainly for\ninternal use.\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainXMLFlags](libvirt-libvirt-domain.html#virDomainXMLFlags)\nReturns\n\n    a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n[domain](../acl.html#object_domain)| [read-\nsecure](../acl.html#perm_domain_read-secure)| VIR_DOMAIN_XML_SECURE  \n[domain](../acl.html#object_domain)| [read-\nsecure](../acl.html#perm_domain_read-secure)| VIR_DOMAIN_XML_MIGRATABLE  \n  \n### `virDomainHasManagedSaveImage`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainHasManagedSaveImage\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int flags)\n\nCheck if a domain has a managed save image as created by\n[virDomainManagedSave](libvirt-libvirt-domain.html#virDomainManagedSave)().\nNote that any running domain should not have such an image, as it should have\nbeen removed on restart.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "353eb641-1503-48e5-9172-fe9629aec9c8": {"__data__": {"id_": "353eb641-1503-48e5-9172-fe9629aec9c8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "868ad7f1-e837-4dda-a74b-692b0cde81a4", "node_type": null, "metadata": {}, "hash": "69bfe2e0c9e8fb6b15ada943a61baf0d1d47756458bcdefa0360ae66ce6d8818"}, "3": {"node_id": "81f3b61c-656c-47ad-b6fe-33154626a6b5", "node_type": null, "metadata": {}, "hash": "d318a3a80fdb68b3ada3fada98dcf5c742c645f4a3a891e77c4870a866e1058e"}}, "hash": "1b574c0db9506330c91afdada1269cea3eadb368dfb8eb03e88b457d2b9477a4", "text": "dom\n\n    pointer to the domain\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 if no image is present, 1 if an image is present, and -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainIOThreadInfoFree`\u00c2\u00b6\n\n    \n    \n    void\tvirDomainIOThreadInfoFree\t([virDomainIOThreadInfoPtr](libvirt-libvirt-domain.html#virDomainIOThreadInfoPtr) info)\n\nFrees the memory used by `info`.\n\ninfo\n\n    pointer to a [virDomainIOThreadInfo](libvirt-libvirt-domain.html#virDomainIOThreadInfo) object\n\n### `virDomainInjectNMI`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainInjectNMI\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nSend NMI to the guest\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "81f3b61c-656c-47ad-b6fe-33154626a6b5": {"__data__": {"id_": "81f3b61c-656c-47ad-b6fe-33154626a6b5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "353eb641-1503-48e5-9172-fe9629aec9c8", "node_type": null, "metadata": {}, "hash": "1b574c0db9506330c91afdada1269cea3eadb368dfb8eb03e88b457d2b9477a4"}, "3": {"node_id": "17efb5fb-a9e0-4119-9d43-24e3663d088d", "node_type": null, "metadata": {}, "hash": "88fa1bdbc63ba4db5df96a17771daa087a830b71dd62740406b61aabff1edb5b"}}, "hash": "d318a3a80fdb68b3ada3fada98dcf5c742c645f4a3a891e77c4870a866e1058e", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [inject-\nnmi](../acl.html#perm_domain_inject-nmi)| -  \n  \n### `virDomainInterfaceAddresses`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainInterfaceAddresses\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t [virDomainInterfacePtr](libvirt-libvirt-domain.html#virDomainInterfacePtr) ** ifaces,\n    \t\t\t\t\t unsigned int source,\n    \t\t\t\t\t unsigned int flags)\n\nReturn a pointer to the allocated array of pointers to interfaces present in\ngiven domain along with their IP and MAC addresses. Note that single interface\ncan have multiple or even 0 IP addresses.\n\nThis API dynamically allocates the [virDomainInterfacePtr](libvirt-libvirt-\ndomain.html#virDomainInterfacePtr) struct based on how many interfaces domain\n`dom` has, usually there's 1:1 correlation. The count of the interfaces is\nreturned as the return value.\n\nIf `source` is [VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE), the DHCP lease file\nassociated with any virtual networks will be examined to obtain the interface\naddresses. This only returns data for interfaces which are connected to\nvirtual networks managed by libvirt.\n\nIf `source` is [VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT), a configured guest\nagent is needed for successful return from this API. Moreover, if guest agent\nis used then the interface name is the one seen by guest OS. To match such\ninterface with the one from `dom` XML use MAC address or IP range.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "17efb5fb-a9e0-4119-9d43-24e3663d088d": {"__data__": {"id_": "17efb5fb-a9e0-4119-9d43-24e3663d088d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "81f3b61c-656c-47ad-b6fe-33154626a6b5", "node_type": null, "metadata": {}, "hash": "d318a3a80fdb68b3ada3fada98dcf5c742c645f4a3a891e77c4870a866e1058e"}, "3": {"node_id": "7753b39e-99cb-4de8-ae3d-f56f575a5c7f", "node_type": null, "metadata": {}, "hash": "8e6cced56c17896d902aef2b9f83f78b27eeea1ed174c55dcd18dca740aa5dc7"}}, "hash": "88fa1bdbc63ba4db5df96a17771daa087a830b71dd62740406b61aabff1edb5b", "text": "If `source` is [VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP), the host ARP table will\nbe check to obtain the interface addresses. As the arp cache refreshes in\ntime, the returned ip address may be unreachable. Depending on the route table\nconfig of the guest, the returned mac address may be duplicated.\n\nNote that for some `source` values some pieces of returned `ifaces` might be\nunset (e.g. [VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP) does not set IP address\nprefix as ARP table does not have any notion of that).\n\n`ifaces->name` and `ifaces->hwaddr` are never NULL.\n\nThe caller *must* free `ifaces` when no longer needed. Usual use case looks\nlike this:\n\n    \n    \n    virDomainInterfacePtr *ifaces = NULL;\n    int ifaces_count = 0;\n    size_t i, j;\n    virDomainPtr dom = . obtain a domain here .\n    \n    if ((ifaces_count = virDomainInterfaceAddresses(dom, &ifaces,\n             VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE)) < 0)\n        goto cleanup;\n\n. do something with returned values, for example:\n\n    \n    \n    for (i = 0; i < ifaces_count; i++) {\n        printf(\"name: %s\", ifaces[i]->name);\n        if (ifaces[i]->hwaddr)\n            printf(\" hwaddr: %s\", ifaces[i]->hwaddr);", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7753b39e-99cb-4de8-ae3d-f56f575a5c7f": {"__data__": {"id_": "7753b39e-99cb-4de8-ae3d-f56f575a5c7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "17efb5fb-a9e0-4119-9d43-24e3663d088d", "node_type": null, "metadata": {}, "hash": "88fa1bdbc63ba4db5df96a17771daa087a830b71dd62740406b61aabff1edb5b"}, "3": {"node_id": "e0a4e287-e6d1-4257-958f-d6337536e3dd", "node_type": null, "metadata": {}, "hash": "f677518b63ccff6805629df6ae6386fe736dd4d6224dae4b090f7efc2cb18804"}}, "hash": "8e6cced56c17896d902aef2b9f83f78b27eeea1ed174c55dcd18dca740aa5dc7", "text": "ifaces[i]->hwaddr);\n    \n        for (j = 0; j < ifaces[i]->naddrs; j++) {\n            virDomainIPAddressPtr ip_addr = ifaces[i]->addrs + j;\n            printf(\"[addr: %s prefix: %d type: %d]\",\n                   ip_addr->addr, ip_addr->prefix, ip_addr->type);\n        }\n        printf(\"\\n\");\n    }\n    \n    cleanup:\n        if (ifaces && ifaces_count > 0)\n            for (i = 0; i < ifaces_count; i++)\n                virDomainInterfaceFree(ifaces[i]);\n        free(ifaces);\n\ndom\n\n    domain object\nifaces\n\n    pointer to an array of pointers pointing to interface objects\nsource\n\n    one of the [virDomainInterfaceAddressesSource](libvirt-libvirt-domain.html#virDomainInterfaceAddressesSource) constants\nflags\n\n    currently unused, pass zero\nReturns\n\n    the number of interfaces on success, -1 in case of error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)|  \n  \n### `virDomainInterfaceFree`\u00c2\u00b6\n\n    \n    \n    void\tvirDomainInterfaceFree\t\t([virDomainInterfacePtr](libvirt-libvirt-domain.html#virDomainInterfacePtr) iface)\n\nFree the interface object.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e0a4e287-e6d1-4257-958f-d6337536e3dd": {"__data__": {"id_": "e0a4e287-e6d1-4257-958f-d6337536e3dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7753b39e-99cb-4de8-ae3d-f56f575a5c7f", "node_type": null, "metadata": {}, "hash": "8e6cced56c17896d902aef2b9f83f78b27eeea1ed174c55dcd18dca740aa5dc7"}, "3": {"node_id": "3850ab66-8bc5-4b1e-b46e-e84386a203c9", "node_type": null, "metadata": {}, "hash": "8ea9e8aa0fb2523c88bb046dcbef56aeaed0ba20cdaa5d2a7beb269e82a6c4e4"}}, "hash": "f677518b63ccff6805629df6ae6386fe736dd4d6224dae4b090f7efc2cb18804", "text": "The data structure is freed and should not be used\nthereafter. If `iface` is NULL, then this method has no effect.\n\niface\n\n    an interface object\n\n### `virDomainInterfaceStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainInterfaceStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * device,\n    \t\t\t\t\t [virDomainInterfaceStatsPtr](libvirt-libvirt-domain.html#virDomainInterfaceStatsPtr) stats,\n    \t\t\t\t\t size_t size)\n\nThis function returns network interface stats for interfaces attached to the\ndomain.\n\nThe `device` parameter is the network interface either by name or MAC address.\n\nDomains may have more than one network interface. To get stats for each you\nshould make multiple calls to this function.\n\nIndividual fields within the stats structure may be returned as -1, which\nindicates that the hypervisor does not support that particular statistic.\n\nThe returned stats are from domain's point of view.\n\nPlease note, for an unmanaged ethernet type, returned stats might have RX/TX\nswapped.\n\ndom\n\n    pointer to the domain object\ndevice\n\n    the interface name or MAC address\nstats\n\n    network interface stats (returned)\nsize\n\n    size of stats structure\nReturns\n\n    0 in case of success or -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3850ab66-8bc5-4b1e-b46e-e84386a203c9": {"__data__": {"id_": "3850ab66-8bc5-4b1e-b46e-e84386a203c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e0a4e287-e6d1-4257-958f-d6337536e3dd", "node_type": null, "metadata": {}, "hash": "f677518b63ccff6805629df6ae6386fe736dd4d6224dae4b090f7efc2cb18804"}, "3": {"node_id": "11b0bfa9-6732-4b08-9ee5-869e76274a83", "node_type": null, "metadata": {}, "hash": "48c36d16baf21c13caa9cd6711b49a4ec8531b2601f56929c4117f0161cb4ef9"}}, "hash": "8ea9e8aa0fb2523c88bb046dcbef56aeaed0ba20cdaa5d2a7beb269e82a6c4e4", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainIsActive`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainIsActive\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n\nDetermine if the domain is currently running\n\ndom\n\n    pointer to the domain object\nReturns\n\n    1 if running, 0 if inactive, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainIsPersistent`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainIsPersistent\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n\nDetermine if the domain has a persistent configuration which means it will\nstill exist after shutting down\n\ndom\n\n    pointer to the domain object\nReturns\n\n    1 if persistent, 0 if transient, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainIsUpdated`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainIsUpdated\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom)\n\nDetermine if the domain has been updated.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "11b0bfa9-6732-4b08-9ee5-869e76274a83": {"__data__": {"id_": "11b0bfa9-6732-4b08-9ee5-869e76274a83", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3850ab66-8bc5-4b1e-b46e-e84386a203c9", "node_type": null, "metadata": {}, "hash": "8ea9e8aa0fb2523c88bb046dcbef56aeaed0ba20cdaa5d2a7beb269e82a6c4e4"}, "3": {"node_id": "43a0c982-8138-4314-bea8-0ebfebf242ea", "node_type": null, "metadata": {}, "hash": "f1feff1b74018a53429f171680aab4193f0787ef5f3ddab469e0545df8d85d46"}}, "hash": "48c36d16baf21c13caa9cd6711b49a4ec8531b2601f56929c4117f0161cb4ef9", "text": "dom\n\n    pointer to the domain object\nReturns\n\n    1 if updated, 0 if not, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainListGetStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainListGetStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) * doms,\n    \t\t\t\t\t unsigned int stats,\n    \t\t\t\t\t [virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) ** retStats,\n    \t\t\t\t\t unsigned int flags)\n\nQuery statistics for domains provided by `doms`. Note that all domains in\n`doms` must share the same connection.\n\nReport statistics of various parameters for a running VM according to `stats`\nfield. The statistics are returned as an array of structures for each queried\ndomain. The structure contains an array of typed parameters containing the\nindividual statistics. The typed parameter name for each statistic field\nconsists of a dot-separated string containing name of the requested group\nfollowed by a group specific description of the statistic value.\n\nThe statistic groups are enabled using the `stats` parameter which is a\nbinary-OR of enum [virDomainStatsTypes](libvirt-libvirt-\ndomain.html#virDomainStatsTypes). The stats groups are documented in\n[virConnectGetAllDomainStats](libvirt-libvirt-\ndomain.html#virConnectGetAllDomainStats).\n\nUsing 0 for `stats` returns all stats groups supported by the given\nhypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "43a0c982-8138-4314-bea8-0ebfebf242ea": {"__data__": {"id_": "43a0c982-8138-4314-bea8-0ebfebf242ea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "11b0bfa9-6732-4b08-9ee5-869e76274a83", "node_type": null, "metadata": {}, "hash": "48c36d16baf21c13caa9cd6711b49a4ec8531b2601f56929c4117f0161cb4ef9"}, "3": {"node_id": "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2", "node_type": null, "metadata": {}, "hash": "de1023320c41b70723dbeec025b22eaadad2d92e59369f6ae0fb10138760d4b9"}}, "hash": "f1feff1b74018a53429f171680aab4193f0787ef5f3ddab469e0545df8d85d46", "text": "Using 0 for `stats` returns all stats groups supported by the given\nhypervisor.\n\nSpecifying [VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS) as `flags` makes\nthe function return error in case some of the stat types in `stats` were not\nrecognized by the daemon. However, even with this flag, a hypervisor may omit\nindividual fields within a known group if the information is not available; as\nan extreme example, a supported group may produce zero fields for offline\ndomains if the statistics are meaningful only for a running domain.\n\nPassing [VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT](libvirt-libvirt-\ndomain.html#VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT) in `flags` means when\nlibvirt is unable to fetch stats for any of the domains (for whatever reason)\nonly a subset of statistics is returned for the domain. That subset being\nstatistics that don't involve querying the underlying hypervisor.\n\nNote that any of the domain list filtering flags in `flags` may be rejected by\nthis function.\n\ndoms\n\n    NULL terminated array of domains\nstats\n\n    stats to return, binary-OR of [virDomainStatsTypes](libvirt-libvirt-domain.html#virDomainStatsTypes)\nretStats\n\n    Pointer that will be filled with the array of returned stats\nflags\n\n    extra flags; binary-OR of [virConnectGetAllDomainStatsFlags](libvirt-libvirt-domain.html#virConnectGetAllDomainStatsFlags)\nReturns\n\n    the count of returned statistics structures on success, -1 on error. The requested data are returned in the `retStats` parameter. The returned array should be freed by the caller. See [virDomainStatsRecordListFree](libvirt-libvirt-domain.html#virDomainStatsRecordListFree). Note that the count of returned stats may be less than the domain count provided via `doms`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2": {"__data__": {"id_": "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "43a0c982-8138-4314-bea8-0ebfebf242ea", "node_type": null, "metadata": {}, "hash": "f1feff1b74018a53429f171680aab4193f0787ef5f3ddab469e0545df8d85d46"}, "3": {"node_id": "16b9d8ee-253a-4f29-aa9a-1629aad57eb2", "node_type": null, "metadata": {}, "hash": "2040d66fa17a1c71060ed60212a611374255ef2ebd3e475b0ddf3bedbe6c05a8"}}, "hash": "de1023320c41b70723dbeec025b22eaadad2d92e59369f6ae0fb10138760d4b9", "text": "Note that the count of returned stats may be less than the domain count provided via `doms`.\n\n### `virDomainLookupByID`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByID\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int id)\n\nTry to find a domain based on the hypervisor ID number Note that this won't\nwork for inactive domains which have an ID of -1, in that case a lookup based\non the Name or UUID need to be done instead.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.\n\nconn\n\n    pointer to the hypervisor connection\nid\n\n    the domain ID number\nReturns\n\n    a new domain object or NULL in case of failure. If the domain cannot be found, then [VIR_ERR_NO_DOMAIN](libvirt-virterror.html#VIR_ERR_NO_DOMAIN) error is raised.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[getattr](../acl.html#perm_domain_getattr)| -  \n  \n### `virDomainLookupByName`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByName\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * name)\n\nTry to lookup a domain on the given hypervisor based on its name.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "16b9d8ee-253a-4f29-aa9a-1629aad57eb2": {"__data__": {"id_": "16b9d8ee-253a-4f29-aa9a-1629aad57eb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2", "node_type": null, "metadata": {}, "hash": "de1023320c41b70723dbeec025b22eaadad2d92e59369f6ae0fb10138760d4b9"}, "3": {"node_id": "171cf179-468a-4632-90a3-90922536712b", "node_type": null, "metadata": {}, "hash": "996382d8b96e8400a956500e2e3104669a3f9e588b4874fc866aa7a645f91b8e"}}, "hash": "2040d66fa17a1c71060ed60212a611374255ef2ebd3e475b0ddf3bedbe6c05a8", "text": "conn\n\n    pointer to the hypervisor connection\nname\n\n    name for the domain\nReturns\n\n    a new domain object or NULL in case of failure. If the domain cannot be found, then [VIR_ERR_NO_DOMAIN](libvirt-virterror.html#VIR_ERR_NO_DOMAIN) error is raised.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[getattr](../acl.html#perm_domain_getattr)| -  \n  \n### `virDomainLookupByUUID`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByUUID\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const unsigned char * uuid)\n\nTry to lookup a domain on the given hypervisor based on its UUID.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.\n\nconn\n\n    pointer to the hypervisor connection\nuuid\n\n    the raw UUID for the domain\nReturns\n\n    a new domain object or NULL in case of failure. If the domain cannot be found, then [VIR_ERR_NO_DOMAIN](libvirt-virterror.html#VIR_ERR_NO_DOMAIN) error is raised.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "171cf179-468a-4632-90a3-90922536712b": {"__data__": {"id_": "171cf179-468a-4632-90a3-90922536712b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "16b9d8ee-253a-4f29-aa9a-1629aad57eb2", "node_type": null, "metadata": {}, "hash": "2040d66fa17a1c71060ed60212a611374255ef2ebd3e475b0ddf3bedbe6c05a8"}, "3": {"node_id": "0aeb5376-9498-4d11-8e3c-dc3f85882cd7", "node_type": null, "metadata": {}, "hash": "c320dc953e34fffc653774b2111f140799dec6ee5c1092c46724618ee5c0d233"}}, "hash": "996382d8b96e8400a956500e2e3104669a3f9e588b4874fc866aa7a645f91b8e", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[getattr](../acl.html#perm_domain_getattr)| -  \n  \n### `virDomainLookupByUUIDString`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainLookupByUUIDString\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t const char * uuidstr)\n\nTry to lookup a domain on the given hypervisor based on its UUID.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the domain object is no longer needed.\n\nconn\n\n    pointer to the hypervisor connection\nuuidstr\n\n    the string UUID for the domain\nReturns\n\n    a new domain object or NULL in case of failure. If the domain cannot be found, then [VIR_ERR_NO_DOMAIN](libvirt-virterror.html#VIR_ERR_NO_DOMAIN) error is raised.\n\n### `virDomainManagedSave`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainManagedSave\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will suspend a domain and save its memory contents to a file on\ndisk. After the call, if successful, the domain is not listed as running\nanymore. The difference from [virDomainSave](libvirt-libvirt-\ndomain.html#virDomainSave)() is that libvirt is keeping track of the saved\nstate itself, and will reuse it once the domain is being restarted\n(automatically or via an explicit libvirt call). As a result any running\ndomain is sure to not have a managed saved image.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0aeb5376-9498-4d11-8e3c-dc3f85882cd7": {"__data__": {"id_": "0aeb5376-9498-4d11-8e3c-dc3f85882cd7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "171cf179-468a-4632-90a3-90922536712b", "node_type": null, "metadata": {}, "hash": "996382d8b96e8400a956500e2e3104669a3f9e588b4874fc866aa7a645f91b8e"}, "3": {"node_id": "253706d2-33f1-4359-8e84-dc46b5cc2f59", "node_type": null, "metadata": {}, "hash": "c83b022cdb15347e7f8b545ea22cf5e54d202806ac8bc3f923c8f9c8b6743c6c"}}, "hash": "c320dc953e34fffc653774b2111f140799dec6ee5c1092c46724618ee5c0d233", "text": "As a result any running\ndomain is sure to not have a managed saved image. This also implies that\nmanaged save only works on persistent domains, since the domain must still\nexist in order to use [virDomainCreate](libvirt-libvirt-\ndomain.html#virDomainCreate)() to restart it.\n\nIf `flags` includes [VIR_DOMAIN_SAVE_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_BYPASS_CACHE), then libvirt will attempt to bypass\nthe file system cache while creating the file, or fail if it cannot do so for\nthe given system; this can allow less pressure on file system cache, but also\nrisks slowing saves to NFS.\n\nNormally, the managed saved state will remember whether the domain was running\nor paused, and start will resume to the same state. Specifying\n[VIR_DOMAIN_SAVE_RUNNING](libvirt-libvirt-domain.html#VIR_DOMAIN_SAVE_RUNNING)\nor [VIR_DOMAIN_SAVE_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PAUSED) in `flags` will override the default saved\ninto the file. These two flags are mutually exclusive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "253706d2-33f1-4359-8e84-dc46b5cc2f59": {"__data__": {"id_": "253706d2-33f1-4359-8e84-dc46b5cc2f59", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0aeb5376-9498-4d11-8e3c-dc3f85882cd7", "node_type": null, "metadata": {}, "hash": "c320dc953e34fffc653774b2111f140799dec6ee5c1092c46724618ee5c0d233"}, "3": {"node_id": "b41d94a6-83bf-4041-b558-9d487f4e66ba", "node_type": null, "metadata": {}, "hash": "ae9ec1818bef8f431ef6c3505f13200c3a1ee2ab6305fe9564e4b625057cf9bd"}}, "hash": "c83b022cdb15347e7f8b545ea22cf5e54d202806ac8bc3f923c8f9c8b6743c6c", "text": "These two flags are mutually exclusive.\n\ndom\n\n    pointer to the domain\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success or -1 in case of failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainManagedSaveDefineXML`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainManagedSaveDefineXML\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned int flags)\n\nThis updates the definition of a domain stored in a saved state file.\n\n`dxml` can be used to alter host-specific portions of the domain XML that will\nbe used on the next start of the domain. For example, it is possible to alter\nthe backing filename that is associated with a disk device.\n\nNormally, the saved state file will remember whether the domain was running or\npaused, and restore defaults to the same state. Specifying\n[VIR_DOMAIN_SAVE_RUNNING](libvirt-libvirt-domain.html#VIR_DOMAIN_SAVE_RUNNING)\nor [VIR_DOMAIN_SAVE_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PAUSED) in `flags` will override the default saved\ninto the file; omitting both leaves the file's default unchanged. These two\nflags are mutually exclusive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b41d94a6-83bf-4041-b558-9d487f4e66ba": {"__data__": {"id_": "b41d94a6-83bf-4041-b558-9d487f4e66ba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "253706d2-33f1-4359-8e84-dc46b5cc2f59", "node_type": null, "metadata": {}, "hash": "c83b022cdb15347e7f8b545ea22cf5e54d202806ac8bc3f923c8f9c8b6743c6c"}, "3": {"node_id": "16828afa-adca-450f-93ca-8728c83fa833", "node_type": null, "metadata": {}, "hash": "ccdc3453955a519ffc0f26c629c147aa794ba36077ccf4eb61bff7ea3cc65d32"}}, "hash": "ae9ec1818bef8f431ef6c3505f13200c3a1ee2ab6305fe9564e4b625057cf9bd", "text": "These two\nflags are mutually exclusive.\n\ndomain\n\n    a domain object\ndxml\n\n    XML config for adjusting guest xml used on restore\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainManagedSaveGetXMLDesc`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainManagedSaveGetXMLDesc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will extract the XML description of the managed save state file of\na domain.\n\nNo security-sensitive data will be included unless `flags` contains\n[VIR_DOMAIN_SAVE_IMAGE_XML_SECURE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_IMAGE_XML_SECURE); this flag is rejected on read-\nonly connections.\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of supported [virDomainSaveImageXMLFlags](libvirt-libvirt-domain.html#virDomainSaveImageXMLFlags)\nReturns\n\n    a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. The caller must free() the returned value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "16828afa-adca-450f-93ca-8728c83fa833": {"__data__": {"id_": "16828afa-adca-450f-93ca-8728c83fa833", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b41d94a6-83bf-4041-b558-9d487f4e66ba", "node_type": null, "metadata": {}, "hash": "ae9ec1818bef8f431ef6c3505f13200c3a1ee2ab6305fe9564e4b625057cf9bd"}, "3": {"node_id": "1520c8c5-b1c6-4d4c-8324-69c7c1834e85", "node_type": null, "metadata": {}, "hash": "beecd999807307dfe5a075573bac6bf2c423c309399eb1d14c8e0b2c67de2e3c"}}, "hash": "ccdc3453955a519ffc0f26c629c147aa794ba36077ccf4eb61bff7ea3cc65d32", "text": "The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n[domain](../acl.html#object_domain)| [read-\nsecure](../acl.html#perm_domain_read-secure)| VIR_DOMAIN_SAVE_IMAGE_XML_SECURE  \n  \n### `virDomainManagedSaveRemove`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainManagedSaveRemove\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int flags)\n\nRemove any managed save image for this domain.\n\ndom\n\n    pointer to the domain\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, and -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainMemoryPeek`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMemoryPeek\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned long long start,\n    \t\t\t\t\t size_t size,\n    \t\t\t\t\t void * buffer,\n    \t\t\t\t\t unsigned int flags)\n\nThis function allows you to read the contents of a domain's memory.\n\nThe memory which is read is controlled by the 'start', 'size' and 'flags'\nparameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1520c8c5-b1c6-4d4c-8324-69c7c1834e85": {"__data__": {"id_": "1520c8c5-b1c6-4d4c-8324-69c7c1834e85", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "16828afa-adca-450f-93ca-8728c83fa833", "node_type": null, "metadata": {}, "hash": "ccdc3453955a519ffc0f26c629c147aa794ba36077ccf4eb61bff7ea3cc65d32"}, "3": {"node_id": "3b7792b9-53ea-4106-bf44-e7a33ee7b642", "node_type": null, "metadata": {}, "hash": "077d395707f8d7be9f776aefb529a6ceed3aaa9270a6267bc5d94b80da427507"}}, "hash": "beecd999807307dfe5a075573bac6bf2c423c309399eb1d14c8e0b2c67de2e3c", "text": "If 'flags' is [VIR_MEMORY_VIRTUAL](libvirt-libvirt-\ndomain.html#VIR_MEMORY_VIRTUAL) then the 'start' and 'size' parameters are\ninterpreted as virtual memory addresses for whichever task happens to be\nrunning on the domain at the moment. Although this sounds haphazard it is in\nfact what you want in order to read Linux kernel state, because it ensures\nthat pointers in the kernel image can be interpreted coherently.\n\n'buffer' is the return buffer and must be at least 'size' bytes. 'size' may be\n0 to test if the call would succeed.\n\nNB. The remote driver imposes a 64K byte limit on 'size'. For your program to\nbe able to work reliably over a remote connection you should split large\nrequests to <= 65536 bytes. However, with 0.9.13 this RPC limit has been\nraised to 1M byte. Starting with version 1.0.6 the RPC limit has been raised\nagain. Now large requests up to 16M byte are supported.\n\ndom\n\n    pointer to the domain object\nstart\n\n    start of memory to peek\nsize\n\n    size of memory to peek\nbuffer\n\n    return buffer (must be at least size bytes)\nflags\n\n    bitwise-OR of [virDomainMemoryFlags](libvirt-libvirt-domain.html#virDomainMemoryFlags)\nReturns\n\n    0 in case of success or -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3b7792b9-53ea-4106-bf44-e7a33ee7b642": {"__data__": {"id_": "3b7792b9-53ea-4106-bf44-e7a33ee7b642", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1520c8c5-b1c6-4d4c-8324-69c7c1834e85", "node_type": null, "metadata": {}, "hash": "beecd999807307dfe5a075573bac6bf2c423c309399eb1d14c8e0b2c67de2e3c"}, "3": {"node_id": "78e7cdf5-faf4-46a2-baf3-d820e40b8574", "node_type": null, "metadata": {}, "hash": "ec9e56cb821a03eaf746a130f2996e29d1a2d1defa46b4af43530f2dde40b87a"}}, "hash": "077d395707f8d7be9f776aefb529a6ceed3aaa9270a6267bc5d94b80da427507", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [mem-read](../acl.html#perm_domain_mem-\nread)| -  \n  \n### `virDomainMemoryStats`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMemoryStats\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t [virDomainMemoryStatPtr](libvirt-libvirt-domain.html#virDomainMemoryStatPtr) stats,\n    \t\t\t\t\t unsigned int nr_stats,\n    \t\t\t\t\t unsigned int flags)\n\nThis function provides memory statistics for the domain.\n\nUp to 'nr_stats' elements of 'stats' will be populated with memory statistics\nfrom the domain. Only statistics supported by the domain, the driver, and this\nversion of libvirt will be returned.\n\nMemory Statistics:\n\n[VIR_DOMAIN_MEMORY_STAT_SWAP_IN](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_SWAP_IN): The total amount of data read\nfrom swap space (in kb). [VIR_DOMAIN_MEMORY_STAT_SWAP_OUT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_SWAP_OUT): The total amount of memory\nwritten out to swap space (in kb).\n[VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT): The number of page faults\nthat required disk IO to service.\n[VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT): The number of page faults\nserviced without disk IO.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78e7cdf5-faf4-46a2-baf3-d820e40b8574": {"__data__": {"id_": "78e7cdf5-faf4-46a2-baf3-d820e40b8574", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "3b7792b9-53ea-4106-bf44-e7a33ee7b642", "node_type": null, "metadata": {}, "hash": "077d395707f8d7be9f776aefb529a6ceed3aaa9270a6267bc5d94b80da427507"}, "3": {"node_id": "a1ad0615-5348-4fbd-985b-be4a2339c9ef", "node_type": null, "metadata": {}, "hash": "68b7b9bcc0911e2d9e1d61f4c57bf4aa868db1c966fa42d9581263dad61c76d0"}}, "hash": "ec9e56cb821a03eaf746a130f2996e29d1a2d1defa46b4af43530f2dde40b87a", "text": "[VIR_DOMAIN_MEMORY_STAT_UNUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_UNUSED): The amount of memory which is not\nbeing used for any purpose (in kb).\n[VIR_DOMAIN_MEMORY_STAT_AVAILABLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_AVAILABLE): The total amount of memory\navailable to the domain's OS (in kb). [VIR_DOMAIN_MEMORY_STAT_USABLE](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_MEMORY_STAT_USABLE): How much the balloon can\nbe inflated without pushing the guest system to swap, corresponds to\n'Available' in /proc/meminfo [VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON): Current balloon\nvalue (in kb). [VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE) Timestamp of the last\nstatistic [VIR_DOMAIN_MEMORY_STAT_DISK_CACHES](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_DISK_CACHES) Memory that can be reclaimed\nwithout additional I/O, typically disk caches (in kb).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a1ad0615-5348-4fbd-985b-be4a2339c9ef": {"__data__": {"id_": "a1ad0615-5348-4fbd-985b-be4a2339c9ef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "78e7cdf5-faf4-46a2-baf3-d820e40b8574", "node_type": null, "metadata": {}, "hash": "ec9e56cb821a03eaf746a130f2996e29d1a2d1defa46b4af43530f2dde40b87a"}, "3": {"node_id": "d4b5225b-646d-4cd1-981f-ecf69e6edb07", "node_type": null, "metadata": {}, "hash": "5a307991be7082c24c2fb4569deb46905f4084659d9a9335bdf20d97ff9977f0"}}, "hash": "68b7b9bcc0911e2d9e1d61f4c57bf4aa868db1c966fa42d9581263dad61c76d0", "text": "[VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC) The number of successful\nhuge page allocations from inside the domain\n[VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL) The number of failed huge\npage allocations from inside the domain\n\ndom\n\n    pointer to the domain object\nstats\n\n    nr_stats-sized array of stat structures (returned)\nnr_stats\n\n    number of memory statistics requested\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    The number of stats provided or -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainMigrate`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,\n    \t\t\t\t\t unsigned long flags,\n    \t\t\t\t\t const char * dname,\n    \t\t\t\t\t const char * uri,\n    \t\t\t\t\t unsigned long bandwidth)\n\nMigrate the domain object from its current host to the destination host given\nby dconn (a connection to the destination host).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d4b5225b-646d-4cd1-981f-ecf69e6edb07": {"__data__": {"id_": "d4b5225b-646d-4cd1-981f-ecf69e6edb07", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a1ad0615-5348-4fbd-985b-be4a2339c9ef", "node_type": null, "metadata": {}, "hash": "68b7b9bcc0911e2d9e1d61f4c57bf4aa868db1c966fa42d9581263dad61c76d0"}, "3": {"node_id": "edfebfb2-a7ce-4e21-8306-926c1048d2f7", "node_type": null, "metadata": {}, "hash": "dc90cd3ceae6305b2eb905788da035faf95f490f0cbd5ce9a3ce388cfad39681"}}, "hash": "5a307991be7082c24c2fb4569deb46905f4084659d9a9335bdf20d97ff9977f0", "text": "This function is similar to [virDomainMigrate3](libvirt-libvirt-\ndomain.html#virDomainMigrate3), but it only supports a fixed set of\nparameters: `dname` corresponds to [VIR_MIGRATE_PARAM_DEST_NAME](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PARAM_DEST_NAME), `uri` is\n[VIR_MIGRATE_PARAM_URI](libvirt-libvirt-domain.html#VIR_MIGRATE_PARAM_URI),\nand `bandwidth` is [VIR_MIGRATE_PARAM_BANDWIDTH](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_BANDWIDTH).\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the returned domain object is no longer needed.\n\ndomain\n\n    a domain object\ndconn\n\n    destination host (a connection object)\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\ndname\n\n    (optional) rename domain to this at destination\nuri\n\n    (optional) dest hostname/URI as seen from the source host\nbandwidth\n\n    (optional) specify migration bandwidth limit in MiB/s\nReturns\n\n    the new domain object if the migration was successful, or NULL in case of error. Note that the new domain object exists in the scope of the destination connection (dconn).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "edfebfb2-a7ce-4e21-8306-926c1048d2f7": {"__data__": {"id_": "edfebfb2-a7ce-4e21-8306-926c1048d2f7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d4b5225b-646d-4cd1-981f-ecf69e6edb07", "node_type": null, "metadata": {}, "hash": "5a307991be7082c24c2fb4569deb46905f4084659d9a9335bdf20d97ff9977f0"}, "3": {"node_id": "668af9a0-a955-4425-90e4-39afef40e0de", "node_type": null, "metadata": {}, "hash": "7641c458f5590f81bbdf1c2800b951cde9ab1bf2a0e6080d8b2b7ebc6c7f8e00"}}, "hash": "dc90cd3ceae6305b2eb905788da035faf95f490f0cbd5ce9a3ce388cfad39681", "text": "Note that the new domain object exists in the scope of the destination connection (dconn).\n\n### `virDomainMigrate2`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate2\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned long flags,\n    \t\t\t\t\t const char * dname,\n    \t\t\t\t\t const char * uri,\n    \t\t\t\t\t unsigned long bandwidth)\n\nMigrate the domain object from its current host to the destination host given\nby dconn (a connection to the destination host).\n\nThis function is similar to [virDomainMigrate3](libvirt-libvirt-\ndomain.html#virDomainMigrate3), but it only supports a fixed set of\nparameters: `dxml` corresponds to [VIR_MIGRATE_PARAM_DEST_XML](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PARAM_DEST_XML), `dname` is\n[VIR_MIGRATE_PARAM_DEST_NAME](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_DEST_NAME), `uri` is\n[VIR_MIGRATE_PARAM_URI](libvirt-libvirt-domain.html#VIR_MIGRATE_PARAM_URI),\nand `bandwidth` is [VIR_MIGRATE_PARAM_BANDWIDTH](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_BANDWIDTH).\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the returned domain object is no longer needed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "668af9a0-a955-4425-90e4-39afef40e0de": {"__data__": {"id_": "668af9a0-a955-4425-90e4-39afef40e0de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "edfebfb2-a7ce-4e21-8306-926c1048d2f7", "node_type": null, "metadata": {}, "hash": "dc90cd3ceae6305b2eb905788da035faf95f490f0cbd5ce9a3ce388cfad39681"}, "3": {"node_id": "2e8a7104-4d11-48d9-a394-311bf329b5cd", "node_type": null, "metadata": {}, "hash": "89d73669f877f4e832da8000dcc1295f438247c5ac8f4187eae72400c2d0e39a"}}, "hash": "7641c458f5590f81bbdf1c2800b951cde9ab1bf2a0e6080d8b2b7ebc6c7f8e00", "text": "domain\n\n    a domain object\ndconn\n\n    destination host (a connection object)\ndxml\n\n    (optional) XML config for launching guest on target\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\ndname\n\n    (optional) rename domain to this at destination\nuri\n\n    (optional) dest hostname/URI as seen from the source host\nbandwidth\n\n    (optional) specify migration bandwidth limit in MiB/s\nReturns\n\n    the new domain object if the migration was successful, or NULL in case of error. Note that the new domain object exists in the scope of the destination connection (dconn).\n\n### `virDomainMigrate3`\u00c2\u00b6\n\n    \n    \n    [virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr)\tvirDomainMigrate3\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) dconn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t unsigned int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nMigrate the domain object from its current host to the destination host given\nby dconn (a connection to the destination host).\n\nSee VIR_MIGRATE_PARAM_* and [virDomainMigrateFlags](libvirt-libvirt-\ndomain.html#virDomainMigrateFlags) for detailed description of accepted\nmigration parameters and flags.\n\nSee [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\ndocumentation for description of individual flags.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2e8a7104-4d11-48d9-a394-311bf329b5cd": {"__data__": {"id_": "2e8a7104-4d11-48d9-a394-311bf329b5cd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "668af9a0-a955-4425-90e4-39afef40e0de", "node_type": null, "metadata": {}, "hash": "7641c458f5590f81bbdf1c2800b951cde9ab1bf2a0e6080d8b2b7ebc6c7f8e00"}, "3": {"node_id": "70b28e79-7a7e-4887-bd39-205ca0d7ae4d", "node_type": null, "metadata": {}, "hash": "7c259c5fe8cc9d76c7d5242237ae60d9a9e41012ec9e843299293874d823f046"}}, "hash": "89d73669f877f4e832da8000dcc1295f438247c5ac8f4187eae72400c2d0e39a", "text": "[VIR_MIGRATE_TUNNELLED](libvirt-libvirt-domain.html#VIR_MIGRATE_TUNNELLED) and\n[VIR_MIGRATE_PEER2PEER](libvirt-libvirt-domain.html#VIR_MIGRATE_PEER2PEER) are\nnot supported by this API, use [virDomainMigrateToURI3](libvirt-libvirt-\ndomain.html#virDomainMigrateToURI3) instead.\n\nThere are many limitations on migration imposed by the underlying technology -\nfor example it may not be possible to migrate between different processors\neven with the same architecture, or between different types of hypervisor.\n\n[virDomainFree](libvirt-libvirt-domain.html#virDomainFree) should be used to\nfree the resources after the returned domain object is no longer needed.\n\ndomain\n\n    a domain object\ndconn\n\n    destination host (a connection object)\nparams\n\n    (optional) migration parameters\nnparams\n\n    (optional) number of migration parameters in `params`\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\nReturns\n\n    the new domain object if the migration was successful, or NULL in case of error. Note that the new domain object exists in the scope of the destination connection (dconn).\n\n### `virDomainMigrateGetCompressionCache`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateGetCompressionCache\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t\t unsigned long long * cacheSize,\n    \t\t\t\t\t\t unsigned int flags)\n\nGets current size of the cache (in bytes) used for compressing repeatedly\ntransferred memory pages during live migration.\n\ndomain\n\n    a domain object\ncacheSize\n\n    return value of current size of the cache (in bytes)\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "70b28e79-7a7e-4887-bd39-205ca0d7ae4d": {"__data__": {"id_": "70b28e79-7a7e-4887-bd39-205ca0d7ae4d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2e8a7104-4d11-48d9-a394-311bf329b5cd", "node_type": null, "metadata": {}, "hash": "89d73669f877f4e832da8000dcc1295f438247c5ac8f4187eae72400c2d0e39a"}, "3": {"node_id": "e686bf20-07d9-4192-80ed-bf91e01c5d2d", "node_type": null, "metadata": {}, "hash": "a4e5780c728e4bde4bade2afd5573e8c6fa9c932a79c4727fb0080e9d05c9377"}}, "hash": "7c259c5fe8cc9d76c7d5242237ae60d9a9e41012ec9e843299293874d823f046", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateGetMaxDowntime`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateGetMaxDowntime\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long long * downtime,\n    \t\t\t\t\t unsigned int flags)\n\nGets current maximum tolerable time for which the domain may be paused at the\nend of live migration.\n\ndomain\n\n    a domain object\ndowntime\n\n    return value of the maximum tolerable downtime for live migration, in milliseconds\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateGetMaxSpeed`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateGetMaxSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long * bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nGet the current maximum bandwidth (in MiB/s) that will be used if the domain\nis migrated. Not all hypervisors will support a bandwidth limit. When\n[VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY) is set in `flags`, this API\ngets the current maximum bandwidth for the post-copy phase of the migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e686bf20-07d9-4192-80ed-bf91e01c5d2d": {"__data__": {"id_": "e686bf20-07d9-4192-80ed-bf91e01c5d2d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "70b28e79-7a7e-4887-bd39-205ca0d7ae4d", "node_type": null, "metadata": {}, "hash": "7c259c5fe8cc9d76c7d5242237ae60d9a9e41012ec9e843299293874d823f046"}, "3": {"node_id": "c80bcbef-751c-41ec-a783-6ec202548f42", "node_type": null, "metadata": {}, "hash": "8d12ea49c7198bb9101558f99936663a5bc5cea2015a80d48e2dfbe4d1ce869f"}}, "hash": "a4e5780c728e4bde4bade2afd5573e8c6fa9c932a79c4727fb0080e9d05c9377", "text": "domain\n\n    a domain object\nbandwidth\n\n    return value of current migration bandwidth limit in MiB/s\nflags\n\n    bitwise-OR of [virDomainMigrateMaxSpeedFlags](libvirt-libvirt-domain.html#virDomainMigrateMaxSpeedFlags)\nReturns\n\n    0 in case of success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateSetCompressionCache`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateSetCompressionCache\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t\t unsigned long long cacheSize,\n    \t\t\t\t\t\t unsigned int flags)\n\nSets size of the cache (in bytes) used for compressing repeatedly transferred\nmemory pages during live migration. It's supposed to be called while the\ndomain is being live-migrated as a reaction to migration progress and\nincreasing number of compression cache misses obtained from\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats).\n\ndomain\n\n    a domain object\ncacheSize\n\n    size of the cache (in bytes) used for compression\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c80bcbef-751c-41ec-a783-6ec202548f42": {"__data__": {"id_": "c80bcbef-751c-41ec-a783-6ec202548f42", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e686bf20-07d9-4192-80ed-bf91e01c5d2d", "node_type": null, "metadata": {}, "hash": "a4e5780c728e4bde4bade2afd5573e8c6fa9c932a79c4727fb0080e9d05c9377"}, "3": {"node_id": "f764403d-3695-45c4-80e1-07901c3428dd", "node_type": null, "metadata": {}, "hash": "e949a920f4372265c1edb07e51ce6e5db518b01e22c8bab49e5223d3aa122b83"}}, "hash": "8d12ea49c7198bb9101558f99936663a5bc5cea2015a80d48e2dfbe4d1ce869f", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateSetMaxDowntime`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateSetMaxDowntime\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long long downtime,\n    \t\t\t\t\t unsigned int flags)\n\nSets maximum tolerable time for which the domain is allowed to be paused at\nthe end of live migration. It's supposed to be called while the domain is\nbeing live-migrated as a reaction to migration progress.\n\ndomain\n\n    a domain object\ndowntime\n\n    maximum tolerable downtime for live migration, in milliseconds\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateSetMaxSpeed`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateSetMaxSpeed\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long bandwidth,\n    \t\t\t\t\t unsigned int flags)\n\nThe maximum bandwidth (in MiB/s) that will be used to do migration can be\nspecified with the bandwidth parameter. Not all hypervisors will support a\nbandwidth cap.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f764403d-3695-45c4-80e1-07901c3428dd": {"__data__": {"id_": "f764403d-3695-45c4-80e1-07901c3428dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c80bcbef-751c-41ec-a783-6ec202548f42", "node_type": null, "metadata": {}, "hash": "8d12ea49c7198bb9101558f99936663a5bc5cea2015a80d48e2dfbe4d1ce869f"}, "3": {"node_id": "ae9987d6-ad34-45d4-bf96-5ec5718aee12", "node_type": null, "metadata": {}, "hash": "b73e5aea06b6399a66689f967759c7bf4c084dda4f27be472bdf29646348e31b"}}, "hash": "e949a920f4372265c1edb07e51ce6e5db518b01e22c8bab49e5223d3aa122b83", "text": "Not all hypervisors will support a\nbandwidth cap. When [VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY) is set in `flags`, this API\nsets the maximum bandwidth for the post-copy phase of the migration.\n\ndomain\n\n    a domain object\nbandwidth\n\n    migration bandwidth limit in MiB/s\nflags\n\n    bitwise-OR of [virDomainMigrateMaxSpeedFlags](libvirt-libvirt-domain.html#virDomainMigrateMaxSpeedFlags)\nReturns\n\n    0 in case of success, -1 otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateStartPostCopy`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateStartPostCopy\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nStarts post-copy migration. This function has to be called while migration\n(initiated with [VIR_MIGRATE_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_POSTCOPY) flag) is in progress.\n\nTraditional pre-copy migration iteratively walks through guest memory pages\nand migrates those that changed since the previous iteration. The iterative\nphase stops when the number of dirty pages is low enough so that the virtual\nCPUs can be paused, all dirty pages transferred to the destination, where the\nvirtual CPUs are unpaused, and all this can happen within a predefined\ndowntime period. It's clear that this process may never converge if downtime\nis too short and/or the guest keeps changing a lot of memory pages.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ae9987d6-ad34-45d4-bf96-5ec5718aee12": {"__data__": {"id_": "ae9987d6-ad34-45d4-bf96-5ec5718aee12", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f764403d-3695-45c4-80e1-07901c3428dd", "node_type": null, "metadata": {}, "hash": "e949a920f4372265c1edb07e51ce6e5db518b01e22c8bab49e5223d3aa122b83"}, "3": {"node_id": "add29601-5205-4f92-bc3a-88b5f0cd84df", "node_type": null, "metadata": {}, "hash": "e4b5880f783f2766132aac98e4ef87a4559599aa9ad20d58b671c8e4d8f93bd1"}}, "hash": "b73e5aea06b6399a66689f967759c7bf4c084dda4f27be472bdf29646348e31b", "text": "When migration is switched to post-copy mode, the virtual CPUs are paused\nimmediately, only a minimum set of pages is transferred, and the CPUs are\nunpaused on destination. The source keeps sending all remaining memory pages\nto the destination while the guest is already running there. Whenever the\nguest tries to read a memory page which has not been migrated yet, the\nhypervisor has to tell the source to transfer that page in a priority channel.\nTo minimize such page faults, it is a good idea to run at least one iteration\nof pre-copy migration before switching to post-copy.\n\nPost-copy migration is guaranteed to converge since each page is transferred\nat most once no matter how fast it changes. On the other hand once the guest\nis running on the destination host, the migration can no longer be rolled back\nbecause none of the hosts has complete state. If this happens, libvirt will\nleave the domain paused on the source host with\n[VIR_DOMAIN_PAUSED_POSTCOPY_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_PAUSED_POSTCOPY_FAILED) reason. The domain on the\ndestination host will remain running with\n[VIR_DOMAIN_RUNNING_POSTCOPY_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_RUNNING_POSTCOPY_FAILED) reason. It's up to the upper\nlayer to decide what to do in such case. Because of this, libvirt will refuse\nto cancel post-copy migration via [virDomainAbortJobFlags](libvirt-libvirt-\ndomain.html#virDomainAbortJobFlags) unless it is called with\n[VIR_DOMAIN_ABORT_JOB_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_ABORT_JOB_POSTCOPY), in which case the post-copy\nmigration will be paused.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "add29601-5205-4f92-bc3a-88b5f0cd84df": {"__data__": {"id_": "add29601-5205-4f92-bc3a-88b5f0cd84df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ae9987d6-ad34-45d4-bf96-5ec5718aee12", "node_type": null, "metadata": {}, "hash": "b73e5aea06b6399a66689f967759c7bf4c084dda4f27be472bdf29646348e31b"}, "3": {"node_id": "40372cb9-3aaa-438b-b124-c62006010334", "node_type": null, "metadata": {}, "hash": "b96c21d15fc64150f5acf05ea573555712ade8a5db59fd95547e074ca10bb4fb"}}, "hash": "e4b5880f783f2766132aac98e4ef87a4559599aa9ad20d58b671c8e4d8f93bd1", "text": "Failed post-copy migration can be recovered once the cause for the failure\n(e.g., a network issue) is resolved by repeating the migration with an\nadditional [VIR_MIGRATE_POSTCOPY_RESUME](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_POSTCOPY_RESUME) flag. This will recreate the\nconnection and resume migration from the point where it failed. This step can\nbe repeated in case the migration breaks again.\n\nThe following domain life cycle events are emitted during post-copy migration:\n[VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY) (on the source) -- migration\nentered post-copy mode. [VIR_DOMAIN_EVENT_RESUMED_POSTCOPY](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_RESUMED_POSTCOPY) (on the destination) -- the\nguest is running on the destination host while some of its memory pages still\nremain on the source host; neither the source nor the destination host contain\na complete guest state from this point until migration finishes.\n[VIR_DOMAIN_EVENT_RESUMED_MIGRATED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_RESUMED_MIGRATED) (on the destination),\n[VIR_DOMAIN_EVENT_STOPPED_MIGRATED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_STOPPED_MIGRATED) (on the source) -- migration\nfinished successfully and the destination host holds a complete guest state.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "40372cb9-3aaa-438b-b124-c62006010334": {"__data__": {"id_": "40372cb9-3aaa-438b-b124-c62006010334", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "add29601-5205-4f92-bc3a-88b5f0cd84df", "node_type": null, "metadata": {}, "hash": "e4b5880f783f2766132aac98e4ef87a4559599aa9ad20d58b671c8e4d8f93bd1"}, "3": {"node_id": "4a2725ef-2862-48aa-8d25-01f625130c6e", "node_type": null, "metadata": {}, "hash": "a5e298305f30acdc6bab2b44e17b234b3a223d83fd721ecdeb0c37ea5df936f8"}}, "hash": "b96c21d15fc64150f5acf05ea573555712ade8a5db59fd95547e074ca10bb4fb", "text": "[VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED) (on the source),\n[VIR_DOMAIN_EVENT_RESUMED_POSTCOPY_FAILED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_RESUMED_POSTCOPY_FAILED) (on the destination) --\nemitted when migration fails in post-copy mode and it's unclear whether any of\nthe hosts has a complete guest state. Virtual CPUs on the destination are\nstill running.\n\nThe progress of a post-copy migration can be monitored normally using\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats) on\nthe source host. Fetching statistics of a completed post-copy migration can\nalso be done on the source host (by calling [virDomainGetJobStats](libvirt-\nlibvirt-domain.html#virDomainGetJobStats) or listening to\n[VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) event, but (in contrast to pre-\ncopy migration) the statistics are not available on the destination host.\nThus, [VIR_DOMAIN_EVENT_ID_JOB_COMPLETED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_JOB_COMPLETED) event is the only way of\ngetting statistics of a completed post-copy migration of a transient domain\n(because the domain is removed after migration and there's no domain to run\n[virDomainGetJobStats](libvirt-libvirt-domain.html#virDomainGetJobStats) on).\n\ndomain\n\n    a domain object\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4a2725ef-2862-48aa-8d25-01f625130c6e": {"__data__": {"id_": "4a2725ef-2862-48aa-8d25-01f625130c6e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "40372cb9-3aaa-438b-b124-c62006010334", "node_type": null, "metadata": {}, "hash": "b96c21d15fc64150f5acf05ea573555712ade8a5db59fd95547e074ca10bb4fb"}, "3": {"node_id": "d4265bb8-f55f-4f50-8ce9-3cf3543567f7", "node_type": null, "metadata": {}, "hash": "b77ea0149cc9132ca50314eb2eae54b61592a048b73415084f5b758a097155fe"}}, "hash": "a5e298305f30acdc6bab2b44e17b234b3a223d83fd721ecdeb0c37ea5df936f8", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[migrate](../acl.html#perm_domain_migrate)| -  \n  \n### `virDomainMigrateToURI`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateToURI\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * duri,\n    \t\t\t\t\t unsigned long flags,\n    \t\t\t\t\t const char * dname,\n    \t\t\t\t\t unsigned long bandwidth)\n\nMigrate the domain object from its current host to the destination host given\nby duri.\n\nThis function is similar to [virDomainMigrateToURI3](libvirt-libvirt-\ndomain.html#virDomainMigrateToURI3), but it only supports a fixed set of\nparameters: `dname` corresponds to [VIR_MIGRATE_PARAM_DEST_NAME](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PARAM_DEST_NAME), and `bandwidth` corresponds\nto [VIR_MIGRATE_PARAM_BANDWIDTH](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_BANDWIDTH).\n\nThe operation of this API hinges on the [VIR_MIGRATE_PEER2PEER](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PEER2PEER) flag.\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag IS set, the `duri` parameter must be a\nvalid libvirt connection URI, by which the source libvirt driver can connect\nto the destination libvirt.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d4265bb8-f55f-4f50-8ce9-3cf3543567f7": {"__data__": {"id_": "d4265bb8-f55f-4f50-8ce9-3cf3543567f7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4a2725ef-2862-48aa-8d25-01f625130c6e", "node_type": null, "metadata": {}, "hash": "a5e298305f30acdc6bab2b44e17b234b3a223d83fd721ecdeb0c37ea5df936f8"}, "3": {"node_id": "319b0b44-e912-4e10-aa93-2e167cf86e24", "node_type": null, "metadata": {}, "hash": "94101dc7617f8c263881e0708a3377e81eeda5c7f0323ee66e21fb24cfb5937d"}}, "hash": "b77ea0149cc9132ca50314eb2eae54b61592a048b73415084f5b758a097155fe", "text": "In other words, `duri` corresponds to `dconnuri`\nof [virDomainMigrateToURI3](libvirt-libvirt-\ndomain.html#virDomainMigrateToURI3).\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag is NOT set, the `duri` parameter takes\na hypervisor specific URI used to initiate the migration. In this case `duri`\ncorresponds to [VIR_MIGRATE_PARAM_URI](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_URI) of [virDomainMigrateToURI3](libvirt-\nlibvirt-domain.html#virDomainMigrateToURI3).\n\ndomain\n\n    a domain object\nduri\n\n    mandatory URI for the destination host\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\ndname\n\n    (optional) rename domain to this at destination\nbandwidth\n\n    (optional) specify migration bandwidth limit in MiB/s\nReturns\n\n    0 if the migration succeeded, -1 upon error.\n\n### `virDomainMigrateToURI2`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateToURI2\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * dconnuri,\n    \t\t\t\t\t const char * miguri,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned long flags,\n    \t\t\t\t\t const char * dname,\n    \t\t\t\t\t unsigned long bandwidth)\n\nMigrate the domain object from its current host to the destination host given\nby `dconnuri`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "319b0b44-e912-4e10-aa93-2e167cf86e24": {"__data__": {"id_": "319b0b44-e912-4e10-aa93-2e167cf86e24", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d4265bb8-f55f-4f50-8ce9-3cf3543567f7", "node_type": null, "metadata": {}, "hash": "b77ea0149cc9132ca50314eb2eae54b61592a048b73415084f5b758a097155fe"}, "3": {"node_id": "32ddb322-41f6-4e3d-96fe-853f2850ef8b", "node_type": null, "metadata": {}, "hash": "d591681225fbce855169c0c9e482fed0915394a7718d013fda515bea2fabd5dc"}}, "hash": "94101dc7617f8c263881e0708a3377e81eeda5c7f0323ee66e21fb24cfb5937d", "text": "This function is similar to [virDomainMigrateToURI3](libvirt-libvirt-\ndomain.html#virDomainMigrateToURI3), but it only supports a fixed set of\nparameters: `miguri` corresponds to [VIR_MIGRATE_PARAM_URI](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_URI), `dxml` is\n[VIR_MIGRATE_PARAM_DEST_XML](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_DEST_XML), `dname` is\n[VIR_MIGRATE_PARAM_DEST_NAME](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_DEST_NAME), and `bandwidth` corresponds to\n[VIR_MIGRATE_PARAM_BANDWIDTH](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_BANDWIDTH).\n\nThe operation of this API hinges on the [VIR_MIGRATE_PEER2PEER](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PEER2PEER) flag.\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag IS set, the `dconnuri` parameter must\nbe a valid libvirt connection URI, by which the source libvirt driver can\nconnect to the destination libvirt. In other words, `dconnuri` has the same\nsemantics as in [virDomainMigrateToURI3](libvirt-libvirt-\ndomain.html#virDomainMigrateToURI3).\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag is NOT set, the `dconnuri` must be\nNULL and the `miguri` parameter takes a hypervisor specific URI used to\ninitiate the migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "32ddb322-41f6-4e3d-96fe-853f2850ef8b": {"__data__": {"id_": "32ddb322-41f6-4e3d-96fe-853f2850ef8b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "319b0b44-e912-4e10-aa93-2e167cf86e24", "node_type": null, "metadata": {}, "hash": "94101dc7617f8c263881e0708a3377e81eeda5c7f0323ee66e21fb24cfb5937d"}, "3": {"node_id": "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04", "node_type": null, "metadata": {}, "hash": "2ed01b413d3798d99caac662f0383ba8f7528332bce09ed539df158601c59cbe"}}, "hash": "d591681225fbce855169c0c9e482fed0915394a7718d013fda515bea2fabd5dc", "text": "In this case `miguri` corresponds to\n[VIR_MIGRATE_PARAM_URI](libvirt-libvirt-domain.html#VIR_MIGRATE_PARAM_URI) of\n[virDomainMigrateToURI3](libvirt-libvirt-domain.html#virDomainMigrateToURI3).\n\ndomain\n\n    a domain object\ndconnuri\n\n    (optional) URI for target libvirtd if `flags` includes [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-domain.html#VIR_MIGRATE_PEER2PEER)\nmiguri\n\n    (optional) URI for invoking the migration, not if `flags` includs [VIR_MIGRATE_TUNNELLED](libvirt-libvirt-domain.html#VIR_MIGRATE_TUNNELLED)\ndxml\n\n    (optional) XML config for launching guest on target\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\ndname\n\n    (optional) rename domain to this at destination\nbandwidth\n\n    (optional) specify migration bandwidth limit in MiB/s\nReturns\n\n    0 if the migration succeeded, -1 upon error.\n\n### `virDomainMigrateToURI3`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainMigrateToURI3\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * dconnuri,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t unsigned int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nMigrate the domain object from its current host to the destination host given\nby URI.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04": {"__data__": {"id_": "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "32ddb322-41f6-4e3d-96fe-853f2850ef8b", "node_type": null, "metadata": {}, "hash": "d591681225fbce855169c0c9e482fed0915394a7718d013fda515bea2fabd5dc"}, "3": {"node_id": "aaf30cb2-7643-420b-9064-ab6ca003776d", "node_type": null, "metadata": {}, "hash": "fead48c8e85d4a1a331f2a0ebb5f5efb1d47c7d17f71e81e973a509d0da991fc"}}, "hash": "2ed01b413d3798d99caac662f0383ba8f7528332bce09ed539df158601c59cbe", "text": "See VIR_MIGRATE_PARAM_* and [virDomainMigrateFlags](libvirt-libvirt-\ndomain.html#virDomainMigrateFlags) for detailed description of accepted\nmigration parameters and flags.\n\nThe operation of this API hinges on the [VIR_MIGRATE_PEER2PEER](libvirt-\nlibvirt-domain.html#VIR_MIGRATE_PEER2PEER) flag.\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag is set, the `dconnuri` parameter must\nbe a valid libvirt connection URI, by which the source libvirt daemon can\nconnect to the destination libvirt.\n\nIf the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag is NOT set, then `dconnuri` must be\nNULL and [VIR_MIGRATE_PARAM_URI](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PARAM_URI) migration parameter must be filled in with\nhypervisor specific URI used to initiate the migration. The uri_transports\nelement of the hypervisor capabilities XML includes supported URI schemes.\nThis is called \"direct\" migration. Not all hypervisors support this mode of\nmigration, so if the [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-\ndomain.html#VIR_MIGRATE_PEER2PEER) flag is not set, then it may be necessary\nto use the alternative [virDomainMigrate3](libvirt-libvirt-\ndomain.html#virDomainMigrate3) API providing an explicit\n[virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) for the destination\nhost.\n\nThere are many limitations on migration imposed by the underlying technology -\nfor example it may not be possible to migrate between different processors\neven with the same architecture, or between different types of hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aaf30cb2-7643-420b-9064-ab6ca003776d": {"__data__": {"id_": "aaf30cb2-7643-420b-9064-ab6ca003776d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04", "node_type": null, "metadata": {}, "hash": "2ed01b413d3798d99caac662f0383ba8f7528332bce09ed539df158601c59cbe"}, "3": {"node_id": "c1a4fddd-52cc-44c0-b2c4-020defcaf56c", "node_type": null, "metadata": {}, "hash": "2028de7f7d3b8c075e67311897d0f710225d9c398e2b87bc8409de80d0113663"}}, "hash": "fead48c8e85d4a1a331f2a0ebb5f5efb1d47c7d17f71e81e973a509d0da991fc", "text": "domain\n\n    a domain object\ndconnuri\n\n    (optional) URI for target libvirtd if `flags` includes [VIR_MIGRATE_PEER2PEER](libvirt-libvirt-domain.html#VIR_MIGRATE_PEER2PEER)\nparams\n\n    (optional) migration parameters\nnparams\n\n    (optional) number of migration parameters in `params`\nflags\n\n    bitwise-OR of [virDomainMigrateFlags](libvirt-libvirt-domain.html#virDomainMigrateFlags)\nReturns\n\n    0 if the migration succeeded, -1 upon error.\n\n### `virDomainOpenChannel`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainOpenChannel\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * name,\n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) st,\n    \t\t\t\t\t unsigned int flags)\n\nThis opens the host interface associated with a channel device on a guest, if\nthe host interface is supported. If `name` is given, it can match either the\ndevice alias (e.g. \"channel0\"), or the virtio target name (e.g.\n\"org.qemu.guest_agent.0\"). If `name` is omitted, then the first channel is\nopened. The channel is associated with the passed in `st` stream, which should\nhave been opened in non-blocking mode for bi-directional I/O.\n\nBy default, when `flags` is 0, the open will fail if libvirt detects that the\nchannel is already in use by another client; passing\n[VIR_DOMAIN_CHANNEL_FORCE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_CHANNEL_FORCE) will cause libvirt to forcefully remove\nthe other client prior to opening this channel.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c1a4fddd-52cc-44c0-b2c4-020defcaf56c": {"__data__": {"id_": "c1a4fddd-52cc-44c0-b2c4-020defcaf56c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "aaf30cb2-7643-420b-9064-ab6ca003776d", "node_type": null, "metadata": {}, "hash": "fead48c8e85d4a1a331f2a0ebb5f5efb1d47c7d17f71e81e973a509d0da991fc"}, "3": {"node_id": "dbf0a499-9bc9-417a-b5fd-a6718fdac943", "node_type": null, "metadata": {}, "hash": "c30b31022936e5cdc1b9c604f39934aa6831edb47d8965a6eca33a20142436cc"}}, "hash": "2028de7f7d3b8c075e67311897d0f710225d9c398e2b87bc8409de80d0113663", "text": "dom\n\n    a domain object\nname\n\n    the channel name, or NULL\nst\n\n    a stream to associate with the channel\nflags\n\n    bitwise-OR of [virDomainChannelFlags](libvirt-libvirt-domain.html#virDomainChannelFlags)\nReturns\n\n    0 if the channel was opened, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [open-\ndevice](../acl.html#perm_domain_open-device)| -  \n  \n### `virDomainOpenConsole`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainOpenConsole\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * dev_name,\n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) st,\n    \t\t\t\t\t unsigned int flags)\n\nThis opens the backend associated with a console, serial or parallel port\ndevice on a guest, if the backend is supported. If the `dev_name` is omitted,\nthen the first console or serial device is opened. The console is associated\nwith the passed in `st` stream, which should have been opened in non-blocking\nmode for bi-directional I/O.\n\nBy default, when `flags` is 0, the open will fail if libvirt detects that the\nconsole is already in use by another client; passing\n[VIR_DOMAIN_CONSOLE_FORCE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_CONSOLE_FORCE) will cause libvirt to forcefully remove\nthe other client prior to opening this console.\n\nIf flag [VIR_DOMAIN_CONSOLE_SAFE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_CONSOLE_SAFE) the console is opened only in the case\nwhere the hypervisor driver supports safe (mutually exclusive) console\nhandling.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dbf0a499-9bc9-417a-b5fd-a6718fdac943": {"__data__": {"id_": "dbf0a499-9bc9-417a-b5fd-a6718fdac943", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c1a4fddd-52cc-44c0-b2c4-020defcaf56c", "node_type": null, "metadata": {}, "hash": "2028de7f7d3b8c075e67311897d0f710225d9c398e2b87bc8409de80d0113663"}, "3": {"node_id": "65f72616-235c-4e38-8de1-3ba896e7c2e1", "node_type": null, "metadata": {}, "hash": "808980d2add51f2ef63af206f24b177d2c9ff0afcd951298c26de7c961df3b5b"}}, "hash": "c30b31022936e5cdc1b9c604f39934aa6831edb47d8965a6eca33a20142436cc", "text": "Older servers did not support either flag, and also did not forbid\nsimultaneous clients on a console, with potentially confusing results. When\npassing `flags` of 0 in order to support a wider range of server versions, it\nis up to the client to ensure mutual exclusion.\n\ndom\n\n    a domain object\ndev_name\n\n    the console, serial or parallel port device alias, or NULL\nst\n\n    a stream to associate with the console\nflags\n\n    bitwise-OR of [virDomainConsoleFlags](libvirt-libvirt-domain.html#virDomainConsoleFlags)\nReturns\n\n    0 if the console was opened, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [open-\ndevice](../acl.html#perm_domain_open-device)| -  \n  \n### `virDomainOpenGraphics`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainOpenGraphics\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int idx,\n    \t\t\t\t\t int fd,\n    \t\t\t\t\t unsigned int flags)\n\nThis will attempt to connect the file descriptor `fd`, to the graphics backend\nof `dom`. If `dom` has multiple graphics backends configured, then `idx` will\ndetermine which one is opened, starting from `idx` 0.\n\nTo disable any authentication, pass the\n[VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH) constant for `flags`.\n\nThe caller should use an anonymous socketpair to open `fd` before invocation.\n\nThis method can only be used when connected to a local libvirt hypervisor,\nover a UNIX domain socket.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "65f72616-235c-4e38-8de1-3ba896e7c2e1": {"__data__": {"id_": "65f72616-235c-4e38-8de1-3ba896e7c2e1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "dbf0a499-9bc9-417a-b5fd-a6718fdac943", "node_type": null, "metadata": {}, "hash": "c30b31022936e5cdc1b9c604f39934aa6831edb47d8965a6eca33a20142436cc"}, "3": {"node_id": "155f65b7-75fc-4446-944e-e498f4d77238", "node_type": null, "metadata": {}, "hash": "10ca5cb5a83e44731fe15f83490dd0a44c112988f3fe3fe4887f5f4dacaaf5ad"}}, "hash": "808980d2add51f2ef63af206f24b177d2c9ff0afcd951298c26de7c961df3b5b", "text": "Attempts to use this method over a TCP connection\nwill always fail\n\ndom\n\n    pointer to domain object\nidx\n\n    index of graphics config to open\nfd\n\n    file descriptor to attach graphics to\nflags\n\n    bitwise-OR of [virDomainOpenGraphicsFlags](libvirt-libvirt-domain.html#virDomainOpenGraphicsFlags)\nReturns\n\n    0 on success, -1 on failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [open-\ngraphics](../acl.html#perm_domain_open-graphics)| -  \n  \n### `virDomainOpenGraphicsFD`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainOpenGraphicsFD\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int idx,\n    \t\t\t\t\t unsigned int flags)\n\nThis will create a socket pair connected to the graphics backend of `dom`. One\nend of the socket will be returned on success, and the other end is handed to\nthe hypervisor. If `dom` has multiple graphics backends configured, then `idx`\nwill determine which one is opened, starting from `idx` 0.\n\nTo disable any authentication, pass the\n[VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH) constant for `flags`.\n\nThis method can only be used when connected to a local libvirt hypervisor,\nover a UNIX domain socket. Attempts to use this method over a TCP connection\nwill always fail.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "155f65b7-75fc-4446-944e-e498f4d77238": {"__data__": {"id_": "155f65b7-75fc-4446-944e-e498f4d77238", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "65f72616-235c-4e38-8de1-3ba896e7c2e1", "node_type": null, "metadata": {}, "hash": "808980d2add51f2ef63af206f24b177d2c9ff0afcd951298c26de7c961df3b5b"}, "3": {"node_id": "29233394-3e75-48a0-aa7a-4665fe2c925a", "node_type": null, "metadata": {}, "hash": "8f8302b42e8f2d8cbbd3936a964a1aa285b9b830595922b826c6a65f4a2a802a"}}, "hash": "10ca5cb5a83e44731fe15f83490dd0a44c112988f3fe3fe4887f5f4dacaaf5ad", "text": "Attempts to use this method over a TCP connection\nwill always fail.\n\ndom\n\n    pointer to domain object\nidx\n\n    index of graphics config to open\nflags\n\n    bitwise-OR of [virDomainOpenGraphicsFlags](libvirt-libvirt-domain.html#virDomainOpenGraphicsFlags)\nReturns\n\n    an fd on success, -1 on failure\n\n### `virDomainPMSuspendForDuration`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPMSuspendForDuration\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int target,\n    \t\t\t\t\t unsigned long long duration,\n    \t\t\t\t\t unsigned int flags)\n\nAttempt to have the guest enter the given `target` power management suspension\nlevel. If `duration` is non-zero, also schedule the guest to resume normal\noperation after that many seconds, if nothing else has resumed it earlier.\nSome hypervisors require that `duration` be 0, for an indefinite suspension.\n\nDependent on hypervisor used, this may require a guest agent to be available,\ne.g. QEMU.\n\nBeware that at least for QEMU, the domain's process will be terminated when\n[VIR_NODE_SUSPEND_TARGET_DISK](libvirt-libvirt-\nhost.html#VIR_NODE_SUSPEND_TARGET_DISK) is used and a new process will be\nlaunched when libvirt is asked to wake up the domain. As a result of this, any\nruntime changes, such as device hotplug or memory settings, are lost unless\nsuch changes were made with [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) flag.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "29233394-3e75-48a0-aa7a-4665fe2c925a": {"__data__": {"id_": "29233394-3e75-48a0-aa7a-4665fe2c925a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "155f65b7-75fc-4446-944e-e498f4d77238", "node_type": null, "metadata": {}, "hash": "10ca5cb5a83e44731fe15f83490dd0a44c112988f3fe3fe4887f5f4dacaaf5ad"}, "3": {"node_id": "d47b9eed-b380-45a7-b64e-1d66172da6ee", "node_type": null, "metadata": {}, "hash": "f766a9ed4701c9279bb2fe786c1e7349c924add8e12f2b88382840ba7107a2cc"}}, "hash": "8f8302b42e8f2d8cbbd3936a964a1aa285b9b830595922b826c6a65f4a2a802a", "text": "dom\n\n    a domain object\ntarget\n\n    a value from [virNodeSuspendTarget](libvirt-libvirt-host.html#virNodeSuspendTarget)\nduration\n\n    duration in seconds to suspend, or 0 for indefinite\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 on success, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [pm-control](../acl.html#perm_domain_pm-\ncontrol)| -  \n  \n### `virDomainPMWakeup`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPMWakeup\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t unsigned int flags)\n\nInject a wakeup into the guest that previously used\n[virDomainPMSuspendForDuration](libvirt-libvirt-\ndomain.html#virDomainPMSuspendForDuration), rather than waiting for the\npreviously requested duration (if any) to elapse.\n\ndom\n\n    a domain object\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 on success, -1 on failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d47b9eed-b380-45a7-b64e-1d66172da6ee": {"__data__": {"id_": "d47b9eed-b380-45a7-b64e-1d66172da6ee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "29233394-3e75-48a0-aa7a-4665fe2c925a", "node_type": null, "metadata": {}, "hash": "8f8302b42e8f2d8cbbd3936a964a1aa285b9b830595922b826c6a65f4a2a802a"}, "3": {"node_id": "44f0b2a3-3e5a-465d-893c-31743c152105", "node_type": null, "metadata": {}, "hash": "27f21205fea1503ab57a7701f498d961500e998b73a6843ea7635108d08c39ad"}}, "hash": "f766a9ed4701c9279bb2fe786c1e7349c924add8e12f2b88382840ba7107a2cc", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [pm-control](../acl.html#perm_domain_pm-\ncontrol)| -  \n  \n### `virDomainPinEmulator`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPinEmulator\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned char * cpumap,\n    \t\t\t\t\t int maplen,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the real CPUs which can be allocated to all emulator\nthreads. This function may require privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and may fail if domain is not\nalive. If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains. If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed. Not all hypervisors\ncan support all flag combinations.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "44f0b2a3-3e5a-465d-893c-31743c152105": {"__data__": {"id_": "44f0b2a3-3e5a-465d-893c-31743c152105", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d47b9eed-b380-45a7-b64e-1d66172da6ee", "node_type": null, "metadata": {}, "hash": "f766a9ed4701c9279bb2fe786c1e7349c924add8e12f2b88382840ba7107a2cc"}, "3": {"node_id": "a562e13c-99ac-422b-a42f-8117d2f87abe", "node_type": null, "metadata": {}, "hash": "0de9a1c59978c57ebebcd51726d88a04fcd90df1fa06c0a3294e6b1b28d8b5d2"}}, "hash": "27f21205fea1503ab57a7701f498d961500e998b73a6843ea7635108d08c39ad", "text": "Not all hypervisors\ncan support all flag combinations.\n\nSee also [virDomainGetEmulatorPinInfo](libvirt-libvirt-\ndomain.html#virDomainGetEmulatorPinInfo) for querying this information.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\ncpumap\n\n    pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.\nmaplen\n\n    number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen < size, missing bytes are set to zero. If maplen > size, failure code is returned.\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a562e13c-99ac-422b-a42f-8117d2f87abe": {"__data__": {"id_": "a562e13c-99ac-422b-a42f-8117d2f87abe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "44f0b2a3-3e5a-465d-893c-31743c152105", "node_type": null, "metadata": {}, "hash": "27f21205fea1503ab57a7701f498d961500e998b73a6843ea7635108d08c39ad"}, "3": {"node_id": "53918cb0-5e80-49e0-a6d1-4731f3266065", "node_type": null, "metadata": {}, "hash": "2dffdd072e4f405c11040786c65aa8954f27d8b8bd47601bf736b63d9138d2e1"}}, "hash": "0de9a1c59978c57ebebcd51726d88a04fcd90df1fa06c0a3294e6b1b28d8b5d2", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainPinIOThread`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPinIOThread\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int iothread_id,\n    \t\t\t\t\t unsigned char * cpumap,\n    \t\t\t\t\t int maplen,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the real CPUs which can be allocated to an IOThread. This\nfunction may require privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and may fail if domain is not\nalive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "53918cb0-5e80-49e0-a6d1-4731f3266065": {"__data__": {"id_": "53918cb0-5e80-49e0-a6d1-4731f3266065", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a562e13c-99ac-422b-a42f-8117d2f87abe", "node_type": null, "metadata": {}, "hash": "0de9a1c59978c57ebebcd51726d88a04fcd90df1fa06c0a3294e6b1b28d8b5d2"}, "3": {"node_id": "ec6c7e32-2c51-45c8-aba5-9aae1549fec0", "node_type": null, "metadata": {}, "hash": "6717ec6f71c0d3294d8dbca52ad9fa1b7fa2b12d97b5ae707304a3938531fd22"}}, "hash": "2dffdd072e4f405c11040786c65aa8954f27d8b8bd47601bf736b63d9138d2e1", "text": "If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains. If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed. Not all hypervisors\ncan support all flag combinations.\n\nSee also [virDomainGetIOThreadInfo](libvirt-libvirt-\ndomain.html#virDomainGetIOThreadInfo) for querying this information.\n\ndomain\n\n    a domain object\niothread_id\n\n    the IOThread ID to set the CPU affinity\ncpumap\n\n    pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.\nmaplen\n\n    number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen < size, missing bytes are set to zero. If maplen > size, failure code is returned.\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ec6c7e32-2c51-45c8-aba5-9aae1549fec0": {"__data__": {"id_": "ec6c7e32-2c51-45c8-aba5-9aae1549fec0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "53918cb0-5e80-49e0-a6d1-4731f3266065", "node_type": null, "metadata": {}, "hash": "2dffdd072e4f405c11040786c65aa8954f27d8b8bd47601bf736b63d9138d2e1"}, "3": {"node_id": "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f", "node_type": null, "metadata": {}, "hash": "b576899fa28733f82160ffa128003b99273bfa4d76becfdf175c922aefcedd5c"}}, "hash": "6717ec6f71c0d3294d8dbca52ad9fa1b7fa2b12d97b5ae707304a3938531fd22", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainPinVcpu`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPinVcpu\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int vcpu,\n    \t\t\t\t\t unsigned char * cpumap,\n    \t\t\t\t\t int maplen)\n\nDynamically change the real CPUs which can be allocated to a virtual CPU. This\nfunction may require privileged access to the hypervisor.\n\nThis command only changes the runtime configuration of the domain, so can only\nbe called on an active domain.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nvcpu\n\n    virtual CPU number\ncpumap\n\n    pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.\nmaplen\n\n    number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen < size, missing bytes are set to zero. If maplen > size, failure code is returned.\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f": {"__data__": {"id_": "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ec6c7e32-2c51-45c8-aba5-9aae1549fec0", "node_type": null, "metadata": {}, "hash": "6717ec6f71c0d3294d8dbca52ad9fa1b7fa2b12d97b5ae707304a3938531fd22"}, "3": {"node_id": "bab7f7d9-793d-4a00-9d0b-bf704356803d", "node_type": null, "metadata": {}, "hash": "8bea3826a389a74579d411fef415eed4d753f3744c924452bf96f405342e4b69"}}, "hash": "b576899fa28733f82160ffa128003b99273bfa4d76becfdf175c922aefcedd5c", "text": "Returns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainPinVcpuFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainPinVcpuFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int vcpu,\n    \t\t\t\t\t unsigned char * cpumap,\n    \t\t\t\t\t int maplen,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the real CPUs which can be allocated to a virtual CPU. This\nfunction may require privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and may fail if domain is not\nalive. If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bab7f7d9-793d-4a00-9d0b-bf704356803d": {"__data__": {"id_": "bab7f7d9-793d-4a00-9d0b-bf704356803d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f", "node_type": null, "metadata": {}, "hash": "b576899fa28733f82160ffa128003b99273bfa4d76becfdf175c922aefcedd5c"}, "3": {"node_id": "9bd19d37-ef78-45fb-90ea-eba59d81a937", "node_type": null, "metadata": {}, "hash": "036cd5de312353b6a8433fc17df105efa0b7241c9ebfa1a9fda0390142266423"}}, "hash": "8bea3826a389a74579d411fef415eed4d753f3744c924452bf96f405342e4b69", "text": "If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed. Not all hypervisors\ncan support all flag combinations.\n\nSee also [virDomainGetVcpuPinInfo](libvirt-libvirt-\ndomain.html#virDomainGetVcpuPinInfo) for querying this information.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nvcpu\n\n    virtual CPU number\ncpumap\n\n    pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.\nmaplen\n\n    number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen < size, missing bytes are set to zero. If maplen > size, failure code is returned.\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9bd19d37-ef78-45fb-90ea-eba59d81a937": {"__data__": {"id_": "9bd19d37-ef78-45fb-90ea-eba59d81a937", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "bab7f7d9-793d-4a00-9d0b-bf704356803d", "node_type": null, "metadata": {}, "hash": "8bea3826a389a74579d411fef415eed4d753f3744c924452bf96f405342e4b69"}, "3": {"node_id": "dd152bf5-c218-4cbb-ba45-1b1e764f0c55", "node_type": null, "metadata": {}, "hash": "aa0b4c96d844e59762d1d63209d981ce8bf72bf95ac95ddd002931dadb3657e1"}}, "hash": "036cd5de312353b6a8433fc17df105efa0b7241c9ebfa1a9fda0390142266423", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainReboot`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainReboot\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nReboot a domain, the domain object is still usable thereafter, but the domain\nOS is being stopped for a restart. Note that the guest OS may ignore the\nrequest. Additionally, the hypervisor may check and support the domain\n'on_reboot' XML setting resulting in a domain that shuts down instead of\nrebooting.\n\nIf `flags` is set to zero, then the hypervisor will choose the method of\nshutdown it considers best. To have greater control pass one or more of the\n[virDomainRebootFlagValues](libvirt-libvirt-\ndomain.html#virDomainRebootFlagValues). The order in which the hypervisor\ntries each shutdown method is undefined, and a hypervisor is not required to\nsupport all methods.\n\nTo use guest agent ([VIR_DOMAIN_REBOOT_GUEST_AGENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_REBOOT_GUEST_AGENT)) the domain XML must have <channel>\nconfigured.\n\nDue to implementation limitations in some drivers (the qemu driver, for\ninstance) it is not advised to migrate or save a guest that is rebooting as a\nresult of this API. Migrating such a guest can lead to a plain shutdown on the\ndestination.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dd152bf5-c218-4cbb-ba45-1b1e764f0c55": {"__data__": {"id_": "dd152bf5-c218-4cbb-ba45-1b1e764f0c55", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "9bd19d37-ef78-45fb-90ea-eba59d81a937", "node_type": null, "metadata": {}, "hash": "036cd5de312353b6a8433fc17df105efa0b7241c9ebfa1a9fda0390142266423"}, "3": {"node_id": "8fb231e2-4f90-4b14-8468-3d07ac773290", "node_type": null, "metadata": {}, "hash": "47334eec201ef95a46f1fea9282474962652084d2c2e7ec95358c5d5df489a1f"}}, "hash": "aa0b4c96d844e59762d1d63209d981ce8bf72bf95ac95ddd002931dadb3657e1", "text": "Migrating such a guest can lead to a plain shutdown on the\ndestination.\n\ndomain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainRebootFlagValues](libvirt-libvirt-domain.html#virDomainRebootFlagValues)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [init-\ncontrol](../acl.html#perm_domain_init-control)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)|\nVIR_DOMAIN_REBOOT_GUEST_AGENT  \n  \n### `virDomainRef`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainRef\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nIncrement the reference count on the domain. For each additional call to this\nmethod, there shall be a corresponding call to [virDomainFree](libvirt-\nlibvirt-domain.html#virDomainFree) to release the reference count, once the\ncaller no longer needs the reference to this object.\n\nThis method is typically useful for applications where multiple threads are\nusing a connection, and it is required that the connection remain open until\nall threads have finished using it. ie, each new thread using a domain would\nincrement the reference count.\n\ndomain\n\n    the domain to hold a reference on\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n### `virDomainRename`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainRename\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * new_name,\n    \t\t\t\t\t unsigned int flags)\n\nRename a domain. New domain name is specified in the second argument.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8fb231e2-4f90-4b14-8468-3d07ac773290": {"__data__": {"id_": "8fb231e2-4f90-4b14-8468-3d07ac773290", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "dd152bf5-c218-4cbb-ba45-1b1e764f0c55", "node_type": null, "metadata": {}, "hash": "aa0b4c96d844e59762d1d63209d981ce8bf72bf95ac95ddd002931dadb3657e1"}, "3": {"node_id": "a3b2df74-c935-4ea8-be5f-ab288d756178", "node_type": null, "metadata": {}, "hash": "92c02c802442a1c074d484bc55d94cae19d827dfa5feed1e214a171960b9fc5c"}}, "hash": "47334eec201ef95a46f1fea9282474962652084d2c2e7ec95358c5d5df489a1f", "text": "New domain name is specified in the second argument.\nDepending on each driver implementation it may be required that domain is in a\nspecific state.\n\nThere might be some attributes and/or elements in domain XML that if no value\nprovided at XML defining time, libvirt will derive their value from the domain\nname. These are not updated by this API. Users are strongly advised to change\nthese after the rename was successful.\n\ndom\n\n    pointer to the domain object\nnew_name\n\n    new domain name\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 if successfully renamed, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)| -  \n  \n### `virDomainReset`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainReset\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nReset a domain immediately without any guest OS shutdown. Reset emulates the\npower reset button on a machine, where all hardware sees the RST line set and\nreinitializes internal state.\n\nNote that there is a risk of data loss caused by reset without any guest OS\nshutdown.\n\ndomain\n\n    a domain object\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a3b2df74-c935-4ea8-be5f-ab288d756178": {"__data__": {"id_": "a3b2df74-c935-4ea8-be5f-ab288d756178", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8fb231e2-4f90-4b14-8468-3d07ac773290", "node_type": null, "metadata": {}, "hash": "47334eec201ef95a46f1fea9282474962652084d2c2e7ec95358c5d5df489a1f"}, "3": {"node_id": "01d93d25-7867-46e4-b201-3ee6f1516a87", "node_type": null, "metadata": {}, "hash": "74d2cc0f5dd9c413489e223c75fd29a27e2b08249771aaa9d3e579c55107d8d3"}}, "hash": "92c02c802442a1c074d484bc55d94cae19d827dfa5feed1e214a171960b9fc5c", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [reset](../acl.html#perm_domain_reset)| -  \n  \n### `virDomainRestore`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainRestore\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * from)\n\nThis method will restore a domain saved to disk by [virDomainSave](libvirt-\nlibvirt-domain.html#virDomainSave)().\n\nSee [virDomainRestoreFlags](libvirt-libvirt-\ndomain.html#virDomainRestoreFlags)() for more control.\n\nconn\n\n    pointer to the hypervisor connection\nfrom\n\n    path to the input file\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainRestoreFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainRestoreFlags\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * from,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will restore a domain saved to disk by [virDomainSave](libvirt-\nlibvirt-domain.html#virDomainSave)().\n\nIf the hypervisor supports it, `dxml` can be used to alter host-specific\nportions of the domain XML that will be used when restoring an image.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "01d93d25-7867-46e4-b201-3ee6f1516a87": {"__data__": {"id_": "01d93d25-7867-46e4-b201-3ee6f1516a87", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a3b2df74-c935-4ea8-be5f-ab288d756178", "node_type": null, "metadata": {}, "hash": "92c02c802442a1c074d484bc55d94cae19d827dfa5feed1e214a171960b9fc5c"}, "3": {"node_id": "4d19174a-40a9-46ed-a89b-355616066ddb", "node_type": null, "metadata": {}, "hash": "f4c9c9f42913e399b14dce60a3031aff7ba6faae0c260a1069ce1ce6eb650352"}}, "hash": "74d2cc0f5dd9c413489e223c75fd29a27e2b08249771aaa9d3e579c55107d8d3", "text": "For\nexample, it is possible to alter the backing filename that is associated with\na disk device, in order to prepare for file renaming done as part of backing\nup the disk device while the domain is stopped.\n\nIf `flags` includes [VIR_DOMAIN_SAVE_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_BYPASS_CACHE), then libvirt will attempt to bypass\nthe file system cache while restoring the file, or fail if it cannot do so for\nthe given system; this can allow less pressure on file system cache, but also\nrisks slowing restores from NFS.\n\nNormally, the saved state file will remember whether the domain was running or\npaused, and restore defaults to the same state. Specifying\n[VIR_DOMAIN_SAVE_RUNNING](libvirt-libvirt-domain.html#VIR_DOMAIN_SAVE_RUNNING)\nor [VIR_DOMAIN_SAVE_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PAUSED) in `flags` will override the default read\nfrom the file. These two flags are mutually exclusive.\n\nIf `flags` includes [VIR_DOMAIN_SAVE_RESET_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_RESET_NVRAM), then libvirt will discard any\nexisting NVRAM file and re-initialize NVRAM from the pristine template.\n\nconn\n\n    pointer to the hypervisor connection\nfrom\n\n    path to the input file\ndxml\n\n    (optional) XML config for adjusting guest xml used on restore\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4d19174a-40a9-46ed-a89b-355616066ddb": {"__data__": {"id_": "4d19174a-40a9-46ed-a89b-355616066ddb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "01d93d25-7867-46e4-b201-3ee6f1516a87", "node_type": null, "metadata": {}, "hash": "74d2cc0f5dd9c413489e223c75fd29a27e2b08249771aaa9d3e579c55107d8d3"}, "3": {"node_id": "20d27745-ab79-4f2d-816e-3104ea19f2e4", "node_type": null, "metadata": {}, "hash": "ace2e13605e0982fbf30e571ee367710e9ffc441fbc35b14ddcaba9b3e2e87d7"}}, "hash": "f4c9c9f42913e399b14dce60a3031aff7ba6faae0c260a1069ce1ce6eb650352", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainRestoreParams`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainRestoreParams\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nThis method extends [virDomainRestoreFlags](libvirt-libvirt-\ndomain.html#virDomainRestoreFlags) by adding parameters. For now,\n[VIR_DOMAIN_SAVE_PARAM_FILE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PARAM_FILE) is required but this requirement may\nbe lifted in the future.\n\nconn\n\n    pointer to the hypervisor connection\nparams\n\n    restore parameters\nnparams\n\n    number of restore parameters\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "20d27745-ab79-4f2d-816e-3104ea19f2e4": {"__data__": {"id_": "20d27745-ab79-4f2d-816e-3104ea19f2e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4d19174a-40a9-46ed-a89b-355616066ddb", "node_type": null, "metadata": {}, "hash": "f4c9c9f42913e399b14dce60a3031aff7ba6faae0c260a1069ce1ce6eb650352"}, "3": {"node_id": "408b0757-c397-4a23-b836-8413cbb8a120", "node_type": null, "metadata": {}, "hash": "04a56107208aafa6de6b225d8b6d825927b5c96666a6386ce5154eaa1b6b7584"}}, "hash": "ace2e13605e0982fbf30e571ee367710e9ffc441fbc35b14ddcaba9b3e2e87d7", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [start](../acl.html#perm_domain_start)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainResume`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainResume\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nResume a suspended domain, the process is restarted from the state where it\nwas frozen by calling [virDomainSuspend](libvirt-libvirt-\ndomain.html#virDomainSuspend)(). This function may require privileged access\nMoreover, resume may not be supported if domain is in some special state like\n[VIR_DOMAIN_PMSUSPENDED](libvirt-libvirt-domain.html#VIR_DOMAIN_PMSUSPENDED).\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[suspend](../acl.html#perm_domain_suspend)| -  \n  \n### `virDomainSave`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSave\t\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * to)\n\nThis method will suspend a domain and save its memory contents to a file on\ndisk. After the call, if successful, the domain is not listed as running\nanymore (this ends the life of a transient domain). Use\n[virDomainRestore](libvirt-libvirt-domain.html#virDomainRestore)() to restore\na domain after saving.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "408b0757-c397-4a23-b836-8413cbb8a120": {"__data__": {"id_": "408b0757-c397-4a23-b836-8413cbb8a120", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "20d27745-ab79-4f2d-816e-3104ea19f2e4", "node_type": null, "metadata": {}, "hash": "ace2e13605e0982fbf30e571ee367710e9ffc441fbc35b14ddcaba9b3e2e87d7"}, "3": {"node_id": "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b", "node_type": null, "metadata": {}, "hash": "d2185fc6fc7d3598a29a513f0c94226c705c082e45d83d3c013438eaf3c64249"}}, "hash": "04a56107208aafa6de6b225d8b6d825927b5c96666a6386ce5154eaa1b6b7584", "text": "See [virDomainSaveFlags](libvirt-libvirt-domain.html#virDomainSaveFlags)() and\n[virDomainSaveParams](libvirt-libvirt-domain.html#virDomainSaveParams)() for\nmore control. Also, a save file can be inspected or modified slightly with\n[virDomainSaveImageGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainSaveImageGetXMLDesc)() and\n[virDomainSaveImageDefineXML](libvirt-libvirt-\ndomain.html#virDomainSaveImageDefineXML)().\n\ndomain\n\n    a domain object\nto\n\n    path for the output file\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainSaveFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSaveFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * to,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will suspend a domain and save its memory contents to a file on\ndisk. After the call, if successful, the domain is not listed as running\nanymore (this ends the life of a transient domain). Use\n[virDomainRestore](libvirt-libvirt-domain.html#virDomainRestore)() to restore\na domain after saving.\n\nIf the hypervisor supports it, `dxml` can be used to alter host-specific\nportions of the domain XML that will be used when restoring an image. For\nexample, it is possible to alter the backing filename that is associated with\na disk device, in order to prepare for file renaming done as part of backing\nup the disk device while the domain is stopped.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b": {"__data__": {"id_": "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "408b0757-c397-4a23-b836-8413cbb8a120", "node_type": null, "metadata": {}, "hash": "04a56107208aafa6de6b225d8b6d825927b5c96666a6386ce5154eaa1b6b7584"}, "3": {"node_id": "ab939ec0-2e0e-4e41-aea3-9c960e73e267", "node_type": null, "metadata": {}, "hash": "b898d9b5409ef37981523aa4e381183ba14e87ff6dff1ae3d1dbd36ffca39aed"}}, "hash": "d2185fc6fc7d3598a29a513f0c94226c705c082e45d83d3c013438eaf3c64249", "text": "If `flags` includes [VIR_DOMAIN_SAVE_BYPASS_CACHE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_BYPASS_CACHE), then libvirt will attempt to bypass\nthe file system cache while creating the file, or fail if it cannot do so for\nthe given system; this can allow less pressure on file system cache, but also\nrisks slowing saves to NFS.\n\nNormally, the saved state file will remember whether the domain was running or\npaused, and restore defaults to the same state. Specifying\n[VIR_DOMAIN_SAVE_RUNNING](libvirt-libvirt-domain.html#VIR_DOMAIN_SAVE_RUNNING)\nor [VIR_DOMAIN_SAVE_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PAUSED) in `flags` will override what state gets\nsaved into the file. These two flags are mutually exclusive.\n\nA save file can be inspected or modified slightly with\n[virDomainSaveImageGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainSaveImageGetXMLDesc)() and\n[virDomainSaveImageDefineXML](libvirt-libvirt-\ndomain.html#virDomainSaveImageDefineXML)().\n\nSome hypervisors may prevent this operation if there is a current block job\nrunning; in that case, use [virDomainBlockJobAbort](libvirt-libvirt-\ndomain.html#virDomainBlockJobAbort)() to stop the block job first.\n\ndomain\n\n    a domain object\nto\n\n    path for the output file\ndxml\n\n    (optional) XML config for adjusting guest xml used on restore\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ab939ec0-2e0e-4e41-aea3-9c960e73e267": {"__data__": {"id_": "ab939ec0-2e0e-4e41-aea3-9c960e73e267", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b", "node_type": null, "metadata": {}, "hash": "d2185fc6fc7d3598a29a513f0c94226c705c082e45d83d3c013438eaf3c64249"}, "3": {"node_id": "40918a8f-eebb-4afb-835f-2d091811b08a", "node_type": null, "metadata": {}, "hash": "ffa142c046f4dcde304395e8f2ce44baa72ebb96672b03cb7a93aba10d292a80"}}, "hash": "b898d9b5409ef37981523aa4e381183ba14e87ff6dff1ae3d1dbd36ffca39aed", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainSaveImageDefineXML`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSaveImageDefineXML\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * file,\n    \t\t\t\t\t const char * dxml,\n    \t\t\t\t\t unsigned int flags)\n\nThis updates the definition of a domain stored in a saved state file. `file`\nmust be a file created previously by [virDomainSave](libvirt-libvirt-\ndomain.html#virDomainSave)() or [virDomainSaveFlags](libvirt-libvirt-\ndomain.html#virDomainSaveFlags)().\n\n`dxml` can be used to alter host-specific portions of the domain XML that will\nbe used when restoring an image. For example, it is possible to alter the\nbacking filename that is associated with a disk device, to match renaming done\nas part of backing up the disk device while the domain is stopped.\n\nNormally, the saved state file will remember whether the domain was running or\npaused, and restore defaults to the same state. Specifying\n[VIR_DOMAIN_SAVE_RUNNING](libvirt-libvirt-domain.html#VIR_DOMAIN_SAVE_RUNNING)\nor [VIR_DOMAIN_SAVE_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PAUSED) in `flags` will override the default saved\ninto the file; omitting both leaves the file's default unchanged. These two\nflags are mutually exclusive.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "40918a8f-eebb-4afb-835f-2d091811b08a": {"__data__": {"id_": "40918a8f-eebb-4afb-835f-2d091811b08a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "ab939ec0-2e0e-4e41-aea3-9c960e73e267", "node_type": null, "metadata": {}, "hash": "b898d9b5409ef37981523aa4e381183ba14e87ff6dff1ae3d1dbd36ffca39aed"}, "3": {"node_id": "f488a81e-d260-44b3-93de-213eabd52706", "node_type": null, "metadata": {}, "hash": "2b0295d8b51a20f6414d90bbb41fef8ba36601eb95888485055eff9d8e198ad6"}}, "hash": "ffa142c046f4dcde304395e8f2ce44baa72ebb96672b03cb7a93aba10d292a80", "text": "These two\nflags are mutually exclusive.\n\nconn\n\n    pointer to the hypervisor connection\nfile\n\n    path to saved state file\ndxml\n\n    XML config for adjusting guest xml used on restore\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainSaveImageGetXMLDesc`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainSaveImageGetXMLDesc\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * file,\n    \t\t\t\t\t unsigned int flags)\n\nThis method will extract the XML describing the domain at the time a saved\nstate file was created. `file` must be a file created previously by\n[virDomainSave](libvirt-libvirt-domain.html#virDomainSave)() or\n[virDomainSaveFlags](libvirt-libvirt-domain.html#virDomainSaveFlags)().\n\nNo security-sensitive data will be included unless `flags` contains\n[VIR_DOMAIN_SAVE_IMAGE_XML_SECURE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_IMAGE_XML_SECURE).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f488a81e-d260-44b3-93de-213eabd52706": {"__data__": {"id_": "f488a81e-d260-44b3-93de-213eabd52706", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "40918a8f-eebb-4afb-835f-2d091811b08a", "node_type": null, "metadata": {}, "hash": "ffa142c046f4dcde304395e8f2ce44baa72ebb96672b03cb7a93aba10d292a80"}, "3": {"node_id": "d7135721-670b-450e-a297-c358a9b74c97", "node_type": null, "metadata": {}, "hash": "2551a38ccf6683f5f952f6fb55e51e522ee52af08c2b6622ce5b9c7edcb054a7"}}, "hash": "2b0295d8b51a20f6414d90bbb41fef8ba36601eb95888485055eff9d8e198ad6", "text": "conn\n\n    pointer to the hypervisor connection\nfile\n\n    path to saved state file\nflags\n\n    bitwise-OR of supported [virDomainSaveImageXMLFlags](libvirt-libvirt-domain.html#virDomainSaveImageXMLFlags)\nReturns\n\n    a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSaveParams`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSaveParams\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nThis method extends [virDomainSaveFlags](libvirt-libvirt-\ndomain.html#virDomainSaveFlags) by adding parameters. If\n[VIR_DOMAIN_SAVE_PARAM_FILE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SAVE_PARAM_FILE) is not provided then a managed save is\nperformed (see [virDomainManagedSave](libvirt-libvirt-\ndomain.html#virDomainManagedSave)).\n\ndomain\n\n    a domain object\nparams\n\n    save parameters\nnparams\n\n    number of save parameters\nflags\n\n    bitwise-OR of [virDomainSaveRestoreFlags](libvirt-libvirt-domain.html#virDomainSaveRestoreFlags)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d7135721-670b-450e-a297-c358a9b74c97": {"__data__": {"id_": "d7135721-670b-450e-a297-c358a9b74c97", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f488a81e-d260-44b3-93de-213eabd52706", "node_type": null, "metadata": {}, "hash": "2b0295d8b51a20f6414d90bbb41fef8ba36601eb95888485055eff9d8e198ad6"}, "3": {"node_id": "0d38986f-d6d7-4d44-9128-375ff38e54db", "node_type": null, "metadata": {}, "hash": "67e38126a137b95afe1e06356281698beae1e8a900a4e4dc96eb898a4aa44021"}}, "hash": "2551a38ccf6683f5f952f6fb55e51e522ee52af08c2b6622ce5b9c7edcb054a7", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[hibernate](../acl.html#perm_domain_hibernate)| -  \n  \n### `virDomainScreenshot`\u00c2\u00b6\n\n    \n    \n    char *\tvirDomainScreenshot\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) stream,\n    \t\t\t\t\t unsigned int screen,\n    \t\t\t\t\t unsigned int flags)\n\nTake a screenshot of current domain console as a stream. The image format is\nhypervisor specific. Moreover, some hypervisors supports multiple displays per\ndomain. These can be distinguished by `screen` argument.\n\nThis call sets up a stream; subsequent use of stream API is necessary to\ntransfer actual data, determine how much data is successfully transferred, and\ndetect any errors.\n\nThe screen ID is the sequential number of screen. In case of multiple graphics\ncards, heads are enumerated before devices, e.g. having two graphics cards,\nboth with four heads, screen ID 5 addresses the second head on the second\ncard.\n\ndomain\n\n    a domain object\nstream\n\n    stream to use as output\nscreen\n\n    monitor ID to take screenshot from\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    a string representing the mime-type of the image format, or NULL upon error. The caller must free() the returned value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0d38986f-d6d7-4d44-9128-375ff38e54db": {"__data__": {"id_": "0d38986f-d6d7-4d44-9128-375ff38e54db", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d7135721-670b-450e-a297-c358a9b74c97", "node_type": null, "metadata": {}, "hash": "2551a38ccf6683f5f952f6fb55e51e522ee52af08c2b6622ce5b9c7edcb054a7"}, "3": {"node_id": "8cac867e-9547-4cc3-b860-be7802b0ab51", "node_type": null, "metadata": {}, "hash": "767f94df79cdc468c311dc352cd16cb4ba10e81802068a75d5a914a8a128ec8c"}}, "hash": "67e38126a137b95afe1e06356281698beae1e8a900a4e4dc96eb898a4aa44021", "text": "The caller must free() the returned value.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[screenshot](../acl.html#perm_domain_screenshot)| -  \n  \n### `virDomainSendKey`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSendKey\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int codeset,\n    \t\t\t\t\t unsigned int holdtime,\n    \t\t\t\t\t unsigned int * keycodes,\n    \t\t\t\t\t int nkeycodes,\n    \t\t\t\t\t unsigned int flags)\n\nSend key(s) to the guest.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\ncodeset\n\n    the code set of keycodes, from [virKeycodeSet](libvirt-libvirt-domain.html#virKeycodeSet)\nholdtime\n\n    the duration (in milliseconds) that the keys will be held\nkeycodes\n\n    array of keycodes\nnkeycodes\n\n    number of keycodes, up to [VIR_DOMAIN_SEND_KEY_MAX_KEYS](libvirt-libvirt-domain.html#VIR_DOMAIN_SEND_KEY_MAX_KEYS)\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8cac867e-9547-4cc3-b860-be7802b0ab51": {"__data__": {"id_": "8cac867e-9547-4cc3-b860-be7802b0ab51", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "0d38986f-d6d7-4d44-9128-375ff38e54db", "node_type": null, "metadata": {}, "hash": "67e38126a137b95afe1e06356281698beae1e8a900a4e4dc96eb898a4aa44021"}, "3": {"node_id": "00521dd2-3c1f-46db-b732-1208f10f3d84", "node_type": null, "metadata": {}, "hash": "074da263cbc9e2e1e81fcd28c5d4f3b079edc479c25a34021b541ba539b3a9ed"}}, "hash": "767f94df79cdc468c311dc352cd16cb4ba10e81802068a75d5a914a8a128ec8c", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [send-\ninput](../acl.html#perm_domain_send-input)| -  \n  \n### `virDomainSendProcessSignal`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSendProcessSignal\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t long long pid_value,\n    \t\t\t\t\t unsigned int signum,\n    \t\t\t\t\t unsigned int flags)\n\nSend a signal to the designated process in the guest\n\nThe signal numbers must be taken from the [virDomainProcessSignal](libvirt-\nlibvirt-domain.html#virDomainProcessSignal) enum. These will be translated to\nthe corresponding signal number for the guest OS, by the guest agent\ndelivering the signal. If there is no mapping from\n[virDomainProcessSignal](libvirt-libvirt-domain.html#virDomainProcessSignal)\nto the native OS signals, this API will report an error.\n\nIf `pid_value` is an integer greater than zero, it is treated as a process ID.\nIf `pid_value` is an integer less than zero, it is treated as a process group\nID. All the `pid_value` numbers are from the container/guest namespace. The\nvalue zero is not valid.\n\nNot all hypervisors will support sending signals to arbitrary processes or\nprocess groups. If this API is implemented the minimum requirement is to be\nable to use `pid_value` == 1 (i.e. kill init). No other value is required to\nbe supported.\n\nIf the `signum` is [VIR_DOMAIN_PROCESS_SIGNAL_NOP](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_PROCESS_SIGNAL_NOP) then this API will simply report\nwhether the process is running in the container/guest.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "00521dd2-3c1f-46db-b732-1208f10f3d84": {"__data__": {"id_": "00521dd2-3c1f-46db-b732-1208f10f3d84", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "8cac867e-9547-4cc3-b860-be7802b0ab51", "node_type": null, "metadata": {}, "hash": "767f94df79cdc468c311dc352cd16cb4ba10e81802068a75d5a914a8a128ec8c"}, "3": {"node_id": "d62f6427-b444-4436-b923-9807bc98a99e", "node_type": null, "metadata": {}, "hash": "ea8521c714126ade1f1d43ae39a36d01dabd5c54deeee7c2e2b392832293b4b3"}}, "hash": "074da263cbc9e2e1e81fcd28c5d4f3b079edc479c25a34021b541ba539b3a9ed", "text": "domain\n\n    pointer to domain object\npid_value\n\n    a positive integer process ID, or negative integer process group ID\nsignum\n\n    a signal from the [virDomainProcessSignal](libvirt-libvirt-domain.html#virDomainProcessSignal) enum\nflags\n\n    currently unused, pass 0\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [send-\nsignal](../acl.html#perm_domain_send-signal)| -  \n  \n### `virDomainSetAutostart`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetAutostart\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int autostart)\n\nConfigure the domain to be automatically started when the host machine boots.\n\ndomain\n\n    a domain object\nautostart\n\n    whether the domain should be automatically started 0 or 1\nReturns\n\n    -1 in case of error, 0 in case of success\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetBlkioParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetBlkioParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange all or a subset of the blkio tunables. This function may require\nprivileged access to the hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d62f6427-b444-4436-b923-9807bc98a99e": {"__data__": {"id_": "d62f6427-b444-4436-b923-9807bc98a99e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "00521dd2-3c1f-46db-b732-1208f10f3d84", "node_type": null, "metadata": {}, "hash": "074da263cbc9e2e1e81fcd28c5d4f3b079edc479c25a34021b541ba539b3a9ed"}, "3": {"node_id": "17dccfe7-959f-4289-abc2-e4473af0f6f0", "node_type": null, "metadata": {}, "hash": "a32e53c64cd4322c7aa8c8e168e15bafc5d2027fdd9a34e2a6914182626adeee"}}, "hash": "ea8521c714126ade1f1d43ae39a36d01dabd5c54deeee7c2e2b392832293b4b3", "text": "This function may require\nprivileged access to the hypervisor.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to blkio parameter objects\nnparams\n\n    number of blkio parameters (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetBlockIoTune`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetBlockIoTune\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * disk,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange all or a subset of the per-device block IO tunables.\n\nThe `disk` parameter is either an unambiguous source name of the block device\n(the <source file='...'/> sub-element, such as \"/path/to/image\"), or the\ndevice target shorthand (the <target dev='...'/> sub-element, such as \"xvda\").", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "17dccfe7-959f-4289-abc2-e4473af0f6f0": {"__data__": {"id_": "17dccfe7-959f-4289-abc2-e4473af0f6f0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "d62f6427-b444-4436-b923-9807bc98a99e", "node_type": null, "metadata": {}, "hash": "ea8521c714126ade1f1d43ae39a36d01dabd5c54deeee7c2e2b392832293b4b3"}, "3": {"node_id": "b152c13f-7ba3-4446-b2ad-7c88fbad7255", "node_type": null, "metadata": {}, "hash": "673cf1cc5d5a56a8d0f3640cbe5db8a4edecd6f929aa0065b9f38a1e24e8ff5f"}}, "hash": "a32e53c64cd4322c7aa8c8e168e15bafc5d2027fdd9a34e2a6914182626adeee", "text": "Valid names can be found by calling [virDomainGetXMLDesc](libvirt-libvirt-\ndomain.html#virDomainGetXMLDesc)() and inspecting elements within\n//domain/devices/disk.\n\ndom\n\n    pointer to domain object\ndisk\n\n    path to the block device, or device shorthand\nparams\n\n    Pointer to blkio parameter objects\nnparams\n\n    Number of blkio parameters (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetBlockThreshold`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetBlockThreshold\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * dev,\n    \t\t\t\t\t unsigned long long threshold,\n    \t\t\t\t\t unsigned int flags)\n\nSet the threshold level for delivering the\n[VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD) if the device or backing\nchain element described by `dev` is written beyond the set threshold level.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b152c13f-7ba3-4446-b2ad-7c88fbad7255": {"__data__": {"id_": "b152c13f-7ba3-4446-b2ad-7c88fbad7255", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "17dccfe7-959f-4289-abc2-e4473af0f6f0", "node_type": null, "metadata": {}, "hash": "a32e53c64cd4322c7aa8c8e168e15bafc5d2027fdd9a34e2a6914182626adeee"}, "3": {"node_id": "26cd940b-e8b7-4239-a43e-83b3281aba37", "node_type": null, "metadata": {}, "hash": "1d1e7b585648fabe0169e248ac7de9e4e22fd24591f4efb751ee8965b696bfd6"}}, "hash": "673cf1cc5d5a56a8d0f3640cbe5db8a4edecd6f929aa0065b9f38a1e24e8ff5f", "text": "The threshold level is unset once the event fires. The event might not be\ndelivered at all if libvirtd was not running at the moment when the threshold\nwas reached. Note that if the threshold level is reached for a top level\nimage, the event is emitted for `dev` corresponding to the disk target, and\nmay also be reported with `dev` corresponding to the disk target with an index\ncorresponding to the 'index' attribute of 'source' in the live VM XML if the\nattribute is present.\n\n`dev` can either be a disk target name (vda, sda) or disk target with index (\nvda[4]). Without the index the top image in the backing chain will have the\nthreshold set. The index corresponds to the 'index' attribute reported in the\nlive VM XML for 'backingStore' or 'source' elements of a disk. If index is\ngiven the threshold is set for the corresponding image.\n\nIn case when `dev` does not contain index the\n[VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD) event may be emitted twice,\nonce for the disk device target without index and once containing the index.\n\nNote that the threshold event can be registered also for destinations of a\n'virDomainBlockCopy' destination by using the 'index' of the 'mirror' source.\n\nHypervisors report the last written sector of an image in the bulk stats API\n(virConnectGetAllDomainStats/virDomainListGetStats) as\n\"block.<num>.allocation\" in the [VIR_DOMAIN_STATS_BLOCK](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_STATS_BLOCK) group. The current threshold value is\nreported as \"block.<num>.threshold\".\n\nThis event allows to use thin-provisioned storage which needs management tools\nto grow it without the need for polling of the data.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "26cd940b-e8b7-4239-a43e-83b3281aba37": {"__data__": {"id_": "26cd940b-e8b7-4239-a43e-83b3281aba37", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "b152c13f-7ba3-4446-b2ad-7c88fbad7255", "node_type": null, "metadata": {}, "hash": "673cf1cc5d5a56a8d0f3640cbe5db8a4edecd6f929aa0065b9f38a1e24e8ff5f"}, "3": {"node_id": "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd", "node_type": null, "metadata": {}, "hash": "3dfe9a13d2ebcf94ea53ecfd354a205ce8f8364e6583f4c6a72b2d3515df844c"}}, "hash": "1d1e7b585648fabe0169e248ac7de9e4e22fd24591f4efb751ee8965b696bfd6", "text": "domain\n\n    pointer to domain object\ndev\n\n    string specifying the block device or backing chain element\nthreshold\n\n    threshold in bytes when to fire the event\nflags\n\n    currently unused, callers should pass 0\nReturns\n\n    0 if the operation has started, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetGuestVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetGuestVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * cpumap,\n    \t\t\t\t\t int state,\n    \t\t\t\t\t unsigned int flags)\n\nSets state of individual vcpus described by `cpumap` via guest agent. Other\nvcpus are not modified.\n\nThis API requires the VM to run. Various hypervisors or guest agent\nimplementation may limit to operate on just 1 vCPU per call.\n\n`cpumap` is a list of vCPU numbers. Its syntax is a comma separated list and a\nspecial markup using '-' and '^' (ex. '0-4', '0-3,^2'). The '-' denotes the\nrange and the '^' denotes exclusive. The expression is sequentially evaluated,\nso \"0-15,^8\" is identical to \"9-14,0-7,15\" but not identical to \"^8,0-15\".\n\nNote that OSes (notably Linux) may require vCPU 0 to stay online to support\nlow-level features a S3 sleep.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd": {"__data__": {"id_": "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "26cd940b-e8b7-4239-a43e-83b3281aba37", "node_type": null, "metadata": {}, "hash": "1d1e7b585648fabe0169e248ac7de9e4e22fd24591f4efb751ee8965b696bfd6"}, "3": {"node_id": "63d52fdd-238d-4e14-97ea-b6902d4d43d9", "node_type": null, "metadata": {}, "hash": "155cfd460cb48736b1bf71a907466ebca35ee9df6d5c7a6deef77a37f12abfe6"}}, "hash": "3dfe9a13d2ebcf94ea53ecfd354a205ce8f8364e6583f4c6a72b2d3515df844c", "text": "domain\n\n    pointer to domain object\ncpumap\n\n    text representation of a bitmap of vcpus to set\nstate\n\n    0 to disable/1 to enable cpus described by `cpumap`\nflags\n\n    currently unused, callers shall pass 0\nReturns\n\n    0 on success, -1 on error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetIOThreadParams`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetIOThreadParams\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int iothread_id,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically set IOThread parameters to the domain. It is left up to the\nunderlying virtual hypervisor to determine the valid range for an\n`iothread_id`, determining whether the `iothread_id` already exists, and\ndetermining the validity of the provided param values.\n\nSee VIR_DOMAIN_IOTHREAD_* for detailed description of accepted IOThread\nparameters.\n\nSince the purpose of this API is to dynamically modify the IOThread `flags`\nshould only include the [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT) and/or\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\n[virDomainMemoryModFlags](libvirt-libvirt-\ndomain.html#virDomainMemoryModFlags). Setting other flags may cause errors\nfrom the hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "63d52fdd-238d-4e14-97ea-b6902d4d43d9": {"__data__": {"id_": "63d52fdd-238d-4e14-97ea-b6902d4d43d9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd", "node_type": null, "metadata": {}, "hash": "3dfe9a13d2ebcf94ea53ecfd354a205ce8f8364e6583f4c6a72b2d3515df844c"}, "3": {"node_id": "752ce547-a0b6-4c98-ab51-b1b24383af77", "node_type": null, "metadata": {}, "hash": "113cdf4b2e01402c9ceeb51d5920e65f26f8fa59335e4d0cbba1e6cc0120fb1a"}}, "hash": "155cfd460cb48736b1bf71a907466ebca35ee9df6d5c7a6deef77a37f12abfe6", "text": "Setting other flags may cause errors\nfrom the hypervisor.\n\nNote that this call can fail if the underlying virtualization hypervisor does\nnot support it or does not support setting the provided values.\n\nThis function requires privileged access to the hypervisor.\n\ndomain\n\n    a domain object\niothread_id\n\n    the specific IOThread ID value to add\nparams\n\n    pointer to IOThread parameter objects\nnparams\n\n    number of IOThread parameters\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact) and [virTypedParameterFlags](libvirt-libvirt-common.html#virTypedParameterFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetInterfaceParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetInterfaceParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * device,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange a subset or all parameters of interface; currently this includes\nbandwidth parameters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "752ce547-a0b6-4c98-ab51-b1b24383af77": {"__data__": {"id_": "752ce547-a0b6-4c98-ab51-b1b24383af77", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "63d52fdd-238d-4e14-97ea-b6902d4d43d9", "node_type": null, "metadata": {}, "hash": "155cfd460cb48736b1bf71a907466ebca35ee9df6d5c7a6deef77a37f12abfe6"}, "3": {"node_id": "5908c659-760b-4994-a57a-b6d413067a1d", "node_type": null, "metadata": {}, "hash": "750f4a4669aa30222c7fbf365441fb6ceb8919945f4b0eabe156b8769971f6c8"}}, "hash": "113cdf4b2e01402c9ceeb51d5920e65f26f8fa59335e4d0cbba1e6cc0120fb1a", "text": "The value of `flags` should be either\n[VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT), or a bitwise-or of values\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nand [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG), although hypervisors vary in which\nflags are supported.\n\nThis function may require privileged access to the hypervisor.\n\ndomain\n\n    pointer to domain object\ndevice\n\n    the interface name or mac address\nparams\n\n    pointer to interface parameter objects\nnparams\n\n    number of interface parameter (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5908c659-760b-4994-a57a-b6d413067a1d": {"__data__": {"id_": "5908c659-760b-4994-a57a-b6d413067a1d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "752ce547-a0b6-4c98-ab51-b1b24383af77", "node_type": null, "metadata": {}, "hash": "113cdf4b2e01402c9ceeb51d5920e65f26f8fa59335e4d0cbba1e6cc0120fb1a"}, "3": {"node_id": "f9ec66e2-d616-4cc8-b08d-7a01065a920f", "node_type": null, "metadata": {}, "hash": "d3913487706d1b51f0fa8d721800b4cc7f570c83bb12b61633ab7c99639ca51f"}}, "hash": "750f4a4669aa30222c7fbf365441fb6ceb8919945f4b0eabe156b8769971f6c8", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetLaunchSecurityState`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetLaunchSecurityState\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nSet a launch security secret in the guest's memory. The guest must be in a\npaused state, e.g. in state VIR_DOMIAN_PAUSED as reported by\n[virDomainGetState](libvirt-libvirt-domain.html#virDomainGetState). On\nsuccess, the guest can be transitioned to a running state. On failure, the\nguest should be destroyed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f9ec66e2-d616-4cc8-b08d-7a01065a920f": {"__data__": {"id_": "f9ec66e2-d616-4cc8-b08d-7a01065a920f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "5908c659-760b-4994-a57a-b6d413067a1d", "node_type": null, "metadata": {}, "hash": "750f4a4669aa30222c7fbf365441fb6ceb8919945f4b0eabe156b8769971f6c8"}, "3": {"node_id": "6cb3212b-05d0-4279-967e-9e0d7010703e", "node_type": null, "metadata": {}, "hash": "dfc11c9091e6a213380dbc07ff250cdbc480a7f608d45feca455791de5d92264"}}, "hash": "d3913487706d1b51f0fa8d721800b4cc7f570c83bb12b61633ab7c99639ca51f", "text": "On failure, the\nguest should be destroyed.\n\nA basic guest attestation process can be achieved by: - Start a secure guest\nin the paused state by passing [VIR_DOMAIN_START_PAUSED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_START_PAUSED) to one of the [virDomainCreate](libvirt-\nlibvirt-domain.html#virDomainCreate) APIs - Retrieve the guest launch\nmeasurement with [virDomainGetLaunchSecurityInfo](libvirt-libvirt-\ndomain.html#virDomainGetLaunchSecurityInfo) \\- Verify launch measurement and\ngenerate a secret for the guest - Set the secret in the guest's memory with\n[virDomainSetLaunchSecurityState](libvirt-libvirt-\ndomain.html#virDomainSetLaunchSecurityState) \\- Start running the guest with\n[virDomainResume](libvirt-libvirt-domain.html#virDomainResume)\n\nSee VIR_DOMAIN_LAUNCH_SECURITY_* for a detailed description of accepted launch\nsecurity parameters.\n\ndomain\n\n    a domain object\nparams\n\n    pointer to launch security parameter objects\nnparams\n\n    number of launch security parameters\nflags\n\n    currently used, set to 0.\nReturns\n\n    -1 in case of failure, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetLifecycleAction`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetLifecycleAction\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int type,\n    \t\t\t\t\t unsigned int action,\n    \t\t\t\t\t unsigned int flags)\n\nChanges the actions of lifecycle events for domain represented as\n<on_$type>$action</on_$type> in the domain XML.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6cb3212b-05d0-4279-967e-9e0d7010703e": {"__data__": {"id_": "6cb3212b-05d0-4279-967e-9e0d7010703e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "f9ec66e2-d616-4cc8-b08d-7a01065a920f", "node_type": null, "metadata": {}, "hash": "d3913487706d1b51f0fa8d721800b4cc7f570c83bb12b61633ab7c99639ca51f"}, "3": {"node_id": "c8b18fd3-edaa-4957-9fe3-70cefb75a219", "node_type": null, "metadata": {}, "hash": "150aadbb2f1cac86d2ab6de929f4097d305219e7b8113ad88a2d82f4a5f3efb1"}}, "hash": "dfc11c9091e6a213380dbc07ff250cdbc480a7f608d45feca455791de5d92264", "text": "QEMU driver has a limitation that if all lifecycle events are set to destroy\nwhen the domain is started, it's not possible to change any action for running\ndomain.\n\ndomain\n\n    pointer to domain object\ntype\n\n    the lifecycle type from [virDomainLifecycle](libvirt-libvirt-domain.html#virDomainLifecycle)\naction\n\n    the action type from [virDomainLifecycleAction](libvirt-libvirt-domain.html#virDomainLifecycleAction)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 on success, -1 on failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetMaxMemory`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMaxMemory\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long memory)\n\nDynamically change the maximum amount of physical memory allocated to a\ndomain. If domain is NULL, then this change the amount of memory reserved to\nDomain0 i.e. the domain where the application runs. This function may require\nprivileged access to the hypervisor.\n\nThis command is hypervisor-specific for whether active, persistent, or both\nconfigurations are changed; for more control, use\n[virDomainSetMemoryFlags](libvirt-libvirt-\ndomain.html#virDomainSetMemoryFlags)().\n\ndomain\n\n    a domain object or NULL\nmemory\n\n    the memory size in kibibytes (blocks of 1024 bytes)\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c8b18fd3-edaa-4957-9fe3-70cefb75a219": {"__data__": {"id_": "c8b18fd3-edaa-4957-9fe3-70cefb75a219", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "6cb3212b-05d0-4279-967e-9e0d7010703e", "node_type": null, "metadata": {}, "hash": "dfc11c9091e6a213380dbc07ff250cdbc480a7f608d45feca455791de5d92264"}, "3": {"node_id": "709622cc-616a-4b2b-b4af-1be817596fa9", "node_type": null, "metadata": {}, "hash": "7b6006207f230874b117f8c75b0d8e4861d81f994dfb672d9429d1e2335c17ba"}}, "hash": "150aadbb2f1cac86d2ab6de929f4097d305219e7b8113ad88a2d82f4a5f3efb1", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetMemory`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMemory\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long memory)\n\nDynamically change the target amount of physical memory allocated to a domain.\nIf domain is NULL, then this change the amount of memory reserved to Domain0\ni.e. the domain where the application runs. This function may require\nprivileged access to the hypervisor.\n\nThis command is hypervisor-specific for whether active, persistent, or both\nconfigurations are changed; for more control, use\n[virDomainSetMemoryFlags](libvirt-libvirt-\ndomain.html#virDomainSetMemoryFlags)().\n\ndomain\n\n    a domain object or NULL\nmemory\n\n    the memory size in kibibytes (blocks of 1024 bytes)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetMemoryFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMemoryFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned long memory,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the target amount of physical memory allocated to a domain.\nIf domain is NULL, then this change the amount of memory reserved to Domain0\ni.e. the domain where the application runs. This function may require\nprivileged access to the hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "709622cc-616a-4b2b-b4af-1be817596fa9": {"__data__": {"id_": "709622cc-616a-4b2b-b4af-1be817596fa9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "c8b18fd3-edaa-4957-9fe3-70cefb75a219", "node_type": null, "metadata": {}, "hash": "150aadbb2f1cac86d2ab6de929f4097d305219e7b8113ad88a2d82f4a5f3efb1"}, "3": {"node_id": "2acf1a42-ed1d-4f13-9005-d21b27cb406f", "node_type": null, "metadata": {}, "hash": "1299eb05fa98018669b1f813ec13f284a470158dbc9e853ecb98d60c190bbd09"}}, "hash": "7b6006207f230874b117f8c75b0d8e4861d81f994dfb672d9429d1e2335c17ba", "text": "This function may require\nprivileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and will fail if domain is not\nactive. If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains. If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed. If\n[VIR_DOMAIN_MEM_MAXIMUM](libvirt-libvirt-domain.html#VIR_DOMAIN_MEM_MAXIMUM)\nis set, the change affects domain's maximum memory size rather than current\nmemory size. Not all hypervisors can support all flag combinations.\n\ndomain\n\n    a domain object or NULL\nmemory\n\n    the memory size in kibibytes (blocks of 1024 bytes)\nflags\n\n    bitwise-OR of [virDomainMemoryModFlags](libvirt-libvirt-domain.html#virDomainMemoryModFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2acf1a42-ed1d-4f13-9005-d21b27cb406f": {"__data__": {"id_": "2acf1a42-ed1d-4f13-9005-d21b27cb406f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "709622cc-616a-4b2b-b4af-1be817596fa9", "node_type": null, "metadata": {}, "hash": "7b6006207f230874b117f8c75b0d8e4861d81f994dfb672d9429d1e2335c17ba"}, "3": {"node_id": "4239f2f8-03c7-490d-a01a-eba7cda70794", "node_type": null, "metadata": {}, "hash": "7769867e4aaca793b1a02cab35e60d429c7b51f124e52ce736ddf32d542f0f24"}}, "hash": "1299eb05fa98018669b1f813ec13f284a470158dbc9e853ecb98d60c190bbd09", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetMemoryParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMemoryParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange all or a subset of the memory tunables. This function may require\nprivileged access to the hypervisor.\n\nPossible values for all *_limit memory tunables are in range from 0 to\n[VIR_DOMAIN_MEMORY_PARAM_UNLIMITED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_MEMORY_PARAM_UNLIMITED).\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to memory parameter objects\nnparams\n\n    number of memory parameter (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4239f2f8-03c7-490d-a01a-eba7cda70794": {"__data__": {"id_": "4239f2f8-03c7-490d-a01a-eba7cda70794", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "2acf1a42-ed1d-4f13-9005-d21b27cb406f", "node_type": null, "metadata": {}, "hash": "1299eb05fa98018669b1f813ec13f284a470158dbc9e853ecb98d60c190bbd09"}, "3": {"node_id": "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc", "node_type": null, "metadata": {}, "hash": "7e6818c4c610645598f3719a31e9ce8c12312d74712db2754e8040747a78e3f8"}}, "hash": "7769867e4aaca793b1a02cab35e60d429c7b51f124e52ce736ddf32d542f0f24", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetMemoryStatsPeriod`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMemoryStatsPeriod\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int period,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the domain memory balloon driver statistics collection\nperiod. Use 0 to disable and a positive value to enable.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_CONFIG). Both flags may be set. If\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nis set, the change affects a running domain and will fail if domain is not\nactive. If [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) is set, the change affects persistent\nstate, and will fail for transient domains.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc": {"__data__": {"id_": "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "4239f2f8-03c7-490d-a01a-eba7cda70794", "node_type": null, "metadata": {}, "hash": "7769867e4aaca793b1a02cab35e60d429c7b51f124e52ce736ddf32d542f0f24"}, "3": {"node_id": "cdefedec-9863-4033-9f58-0fb02ea90186", "node_type": null, "metadata": {}, "hash": "d31ab5bf89f38ad3dfb22bfe626f7f591a444f9b8813d5f0e3b5d7f219b8e473"}}, "hash": "7e6818c4c610645598f3719a31e9ce8c12312d74712db2754e8040747a78e3f8", "text": "If neither flag is specified (that\nis, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed.\n\nNot all hypervisors can support all flag combinations.\n\ndomain\n\n    a domain object or NULL\nperiod\n\n    the period in seconds for stats collection\nflags\n\n    bitwise-OR of [virDomainMemoryModFlags](libvirt-libvirt-domain.html#virDomainMemoryModFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetMetadata`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetMetadata\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int type,\n    \t\t\t\t\t const char * metadata,\n    \t\t\t\t\t const char * key,\n    \t\t\t\t\t const char * uri,\n    \t\t\t\t\t unsigned int flags)\n\nSets the appropriate domain element given by `type` to the value of\n`metadata`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cdefedec-9863-4033-9f58-0fb02ea90186": {"__data__": {"id_": "cdefedec-9863-4033-9f58-0fb02ea90186", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc", "node_type": null, "metadata": {}, "hash": "7e6818c4c610645598f3719a31e9ce8c12312d74712db2754e8040747a78e3f8"}, "3": {"node_id": "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4", "node_type": null, "metadata": {}, "hash": "15096248c820bc3a0a10c0e0a6012d1632735537e4a15ea776b9ebaa01107082"}}, "hash": "d31ab5bf89f38ad3dfb22bfe626f7f591a444f9b8813d5f0e3b5d7f219b8e473", "text": "A `type` of [VIR_DOMAIN_METADATA_DESCRIPTION](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_METADATA_DESCRIPTION) is free-form text;\n[VIR_DOMAIN_METADATA_TITLE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_METADATA_TITLE) is free-form, but no newlines are\npermitted, and should be short (although the length is not enforced). For\nthese two options `key` and `uri` are irrelevant and must be set to NULL.\n\nFor type [VIR_DOMAIN_METADATA_ELEMENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_METADATA_ELEMENT) `metadata` must be well-formed XML\nbelonging to namespace defined by `uri` with local name `key`.\n\nPassing NULL for `metadata` says to remove that element from the domain XML\n(passing the empty string leaves the element present).\n\nThe resulting metadata will be present in [virDomainGetXMLDesc](libvirt-\nlibvirt-domain.html#virDomainGetXMLDesc)(), as well as quick access through\n[virDomainGetMetadata](libvirt-libvirt-domain.html#virDomainGetMetadata)().\n\n`flags` controls whether the live domain, persistent configuration, or both\nwill be modified.\n\ndomain\n\n    a domain object\ntype\n\n    type of metadata, from [virDomainMetadataType](libvirt-libvirt-domain.html#virDomainMetadataType)\nmetadata\n\n    new metadata text\nkey\n\n    XML namespace key, or NULL\nuri\n\n    XML namespace URI, or NULL\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 on success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4": {"__data__": {"id_": "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cdefedec-9863-4033-9f58-0fb02ea90186", "node_type": null, "metadata": {}, "hash": "d31ab5bf89f38ad3dfb22bfe626f7f591a444f9b8813d5f0e3b5d7f219b8e473"}, "3": {"node_id": "1c4f62d5-c087-4442-871d-0f254d498802", "node_type": null, "metadata": {}, "hash": "21b578af7be7cdedffb0d4d11fc10ef9788443b09a7b8633591c174abee7be71"}}, "hash": "15096248c820bc3a0a10c0e0a6012d1632735537e4a15ea776b9ebaa01107082", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetNumaParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetNumaParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange all or a subset of the numa tunables. This function may require\nprivileged access to the hypervisor.\n\nChanging live configuration may be possible only in some cases. For instance,\nfor QEMU driver the mode ([VIR_DOMAIN_NUMA_MODE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_NUMA_MODE)) can not be changed, and changing the\nnodeset ([VIR_DOMAIN_NUMA_NODESET](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_NUMA_NODESET)) is possible only for\n[VIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE) mode.\n\nChanging persistent configuration does not pose such limitations.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1c4f62d5-c087-4442-871d-0f254d498802": {"__data__": {"id_": "1c4f62d5-c087-4442-871d-0f254d498802", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4", "node_type": null, "metadata": {}, "hash": "15096248c820bc3a0a10c0e0a6012d1632735537e4a15ea776b9ebaa01107082"}, "3": {"node_id": "697efad6-3110-4218-bdcb-1c228b50d21a", "node_type": null, "metadata": {}, "hash": "e2bfb9f4e6724b70506542ae58981ce875ce166ed4fb6e562e6dd0010d717be2"}}, "hash": "21b578af7be7cdedffb0d4d11fc10ef9788443b09a7b8633591c174abee7be71", "text": "Changing persistent configuration does not pose such limitations.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to numa parameter objects\nnparams\n\n    number of numa parameters (this value can be the same or less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetPerfEvents`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetPerfEvents\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nEnable or disable the particular list of Linux perf events you care about. The\n`params` argument should contain any subset of VIR_PERF_EVENT_ macros.\n\nLinux perf events are performance analyzing tool in Linux.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "697efad6-3110-4218-bdcb-1c228b50d21a": {"__data__": {"id_": "697efad6-3110-4218-bdcb-1c228b50d21a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1c4f62d5-c087-4442-871d-0f254d498802", "node_type": null, "metadata": {}, "hash": "21b578af7be7cdedffb0d4d11fc10ef9788443b09a7b8633591c174abee7be71"}, "3": {"node_id": "58c7eaed-dbab-4144-89d3-c9300a5953af", "node_type": null, "metadata": {}, "hash": "ac50d4f2363bdc1947eea15fd6997fe8c36eaf3be8e2abfa89d99d0c4eef48c3"}}, "hash": "e2bfb9f4e6724b70506542ae58981ce875ce166ed4fb6e562e6dd0010d717be2", "text": "Linux perf events are performance analyzing tool in Linux.\n\ndomain\n\n    a domain object\nparams\n\n    pointer to perf events parameter object\nnparams\n\n    number of perf event parameters (this value can be the same less than the number of parameters supported)\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetSchedulerParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetSchedulerParameters\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams)\n\nChange all or a subset or the scheduler parameters. It is hypervisor-specific\nwhether this sets live, persistent, or both settings; for more control, use\n[virDomainSetSchedulerParametersFlags](libvirt-libvirt-\ndomain.html#virDomainSetSchedulerParametersFlags).\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to scheduler parameter objects\nnparams\n\n    number of scheduler parameter objects (this value can be the same or less than the returned value nparams of [virDomainGetSchedulerType](libvirt-libvirt-domain.html#virDomainGetSchedulerType))\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "58c7eaed-dbab-4144-89d3-c9300a5953af": {"__data__": {"id_": "58c7eaed-dbab-4144-89d3-c9300a5953af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "697efad6-3110-4218-bdcb-1c228b50d21a", "node_type": null, "metadata": {}, "hash": "e2bfb9f4e6724b70506542ae58981ce875ce166ed4fb6e562e6dd0010d717be2"}, "3": {"node_id": "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36", "node_type": null, "metadata": {}, "hash": "30a58c3a038f0fa81ff2c996a2ce158a0b75fad0df998b6928395fa2ed3fcfe8"}}, "hash": "ac50d4f2363bdc1947eea15fd6997fe8c36eaf3be8e2abfa89d99d0c4eef48c3", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [read](../acl.html#perm_domain_read)| -  \n  \n### `virDomainSetSchedulerParametersFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetSchedulerParametersFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t\t int nparams,\n    \t\t\t\t\t\t unsigned int flags)\n\nChange a subset or all scheduler parameters. The value of `flags` should be\neither [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT), or a bitwise-or of values from\n[VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE)\nand [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT), although hypervisors vary in which\nflags are supported.\n\ndomain\n\n    pointer to domain object\nparams\n\n    pointer to scheduler parameter objects\nnparams\n\n    number of scheduler parameter objects (this value can be the same or less than the returned value nparams of [virDomainGetSchedulerType](libvirt-libvirt-domain.html#virDomainGetSchedulerType))\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36": {"__data__": {"id_": "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "58c7eaed-dbab-4144-89d3-c9300a5953af", "node_type": null, "metadata": {}, "hash": "ac50d4f2363bdc1947eea15fd6997fe8c36eaf3be8e2abfa89d99d0c4eef48c3"}, "3": {"node_id": "a03633b1-2fc3-408f-9ddd-d832989d7584", "node_type": null, "metadata": {}, "hash": "6190e79566fea62f11e021710b3419ca8bc933527691f6de4b6044d2361b485b"}}, "hash": "30a58c3a038f0fa81ff2c996a2ce158a0b75fad0df998b6928395fa2ed3fcfe8", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetTime`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetTime\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t long long seconds,\n    \t\t\t\t\t unsigned int nseconds,\n    \t\t\t\t\t unsigned int flags)\n\nWhen a domain is suspended or restored from a file the domain's OS has no idea\nthat there was a big gap in the time. Depending on how long the gap was, NTP\nmight not be able to resynchronize the guest.\n\nThis API tries to set guest time to the given value. The time to set\n(`seconds` and `nseconds`) should be in seconds relative to the Epoch of\n1970-01-01 00:00:00 in UTC.\n\nPlease note that some hypervisors may require guest agent to be configured and\nrunning in order to be able to run this API.\n\ndom\n\n    a domain object\nseconds\n\n    time to set\nnseconds\n\n    the nanosecond part of `seconds`\nflags\n\n    bitwise-OR of [virDomainSetTimeFlags](libvirt-libvirt-domain.html#virDomainSetTimeFlags)\nReturns\n\n    0 on success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a03633b1-2fc3-408f-9ddd-d832989d7584": {"__data__": {"id_": "a03633b1-2fc3-408f-9ddd-d832989d7584", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36", "node_type": null, "metadata": {}, "hash": "30a58c3a038f0fa81ff2c996a2ce158a0b75fad0df998b6928395fa2ed3fcfe8"}, "3": {"node_id": "92883c5c-bc5a-4abf-81f0-48e0708f6aa0", "node_type": null, "metadata": {}, "hash": "6c8b3fb3ecf69d4cc91ea3297584d2f15fccc758e241f8ddb8e5ac42a8b27535"}}, "hash": "6190e79566fea62f11e021710b3419ca8bc933527691f6de4b6044d2361b485b", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [set-time](../acl.html#perm_domain_set-\ntime)| -  \n  \n### `virDomainSetUserPassword`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetUserPassword\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) dom,\n    \t\t\t\t\t const char * user,\n    \t\t\t\t\t const char * password,\n    \t\t\t\t\t unsigned int flags)\n\nSets the `user` password to the value specified by `password`. If `flags`\ncontain [VIR_DOMAIN_PASSWORD_ENCRYPTED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_PASSWORD_ENCRYPTED), the password is assumed to be\nencrypted by the method required by the guest OS.\n\nPlease note that some hypervisors may require guest agent to be configured and\nrunning in order to be able to run this API.\n\ndom\n\n    a domain object\nuser\n\n    the username that will get a new password\npassword\n\n    the password to set\nflags\n\n    bitwise-OR of [virDomainSetUserPasswordFlags](libvirt-libvirt-domain.html#virDomainSetUserPasswordFlags)\nReturns\n\n    0 on success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "92883c5c-bc5a-4abf-81f0-48e0708f6aa0": {"__data__": {"id_": "92883c5c-bc5a-4abf-81f0-48e0708f6aa0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a03633b1-2fc3-408f-9ddd-d832989d7584", "node_type": null, "metadata": {}, "hash": "6190e79566fea62f11e021710b3419ca8bc933527691f6de4b6044d2361b485b"}, "3": {"node_id": "dc516459-8dc2-4cb8-9980-9b8e61ed7fca", "node_type": null, "metadata": {}, "hash": "fb2b45f53231264896a124ad3d2dd86a0703d0c617fa3eeb510c5daeb5878cb7"}}, "hash": "6c8b3fb3ecf69d4cc91ea3297584d2f15fccc758e241f8ddb8e5ac42a8b27535", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [set-\npassword](../acl.html#perm_domain_set-password)| -  \n  \n### `virDomainSetVcpu`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetVcpu\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * vcpumap,\n    \t\t\t\t\t int state,\n    \t\t\t\t\t unsigned int flags)\n\nEnables/disables individual vcpus described by `vcpumap` in the hypervisor.\n\nVarious hypervisor implementations may limit to operate on just 1 hotpluggable\nentity (which may contain multiple vCPUs on certain platforms).\n\nNote that OSes and hypervisors may require vCPU 0 to stay online.\n\ndomain\n\n    pointer to domain object\nvcpumap\n\n    text representation of a bitmap of vcpus to set\nstate\n\n    0 to disable/1 to enable cpus described by `vcpumap`\nflags\n\n    bitwise-OR of [virDomainModificationImpact](libvirt-libvirt-domain.html#virDomainModificationImpact)\nReturns\n\n    0 on success, -1 on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dc516459-8dc2-4cb8-9980-9b8e61ed7fca": {"__data__": {"id_": "dc516459-8dc2-4cb8-9980-9b8e61ed7fca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "92883c5c-bc5a-4abf-81f0-48e0708f6aa0", "node_type": null, "metadata": {}, "hash": "6c8b3fb3ecf69d4cc91ea3297584d2f15fccc758e241f8ddb8e5ac42a8b27535"}, "3": {"node_id": "56ccd739-12b5-44ec-aa91-611e4b51506c", "node_type": null, "metadata": {}, "hash": "5d2feaa2089a219d2dbca2e29943abfad9a92a00d6f91530f94b307e87d5d0fd"}}, "hash": "fb2b45f53231264896a124ad3d2dd86a0703d0c617fa3eeb510c5daeb5878cb7", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n### `virDomainSetVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetVcpus\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int nvcpus)\n\nDynamically change the number of virtual CPUs used by the domain. Note that\nthis call may fail if the underlying virtualization hypervisor does not\nsupport it or if growing the number is arbitrarily limited. This function may\nrequire privileged access to the hypervisor.\n\nNote that if this call is executed before the guest has finished booting, the\nguest may fail to process the change.\n\nThis command only changes the runtime configuration of the domain, so can only\nbe called on an active domain. It is hypervisor-dependent whether it also\naffects persistent configuration; for more control, use\n[virDomainSetVcpusFlags](libvirt-libvirt-\ndomain.html#virDomainSetVcpusFlags)().\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nnvcpus\n\n    the new number of virtual CPUs for this domain\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "56ccd739-12b5-44ec-aa91-611e4b51506c": {"__data__": {"id_": "56ccd739-12b5-44ec-aa91-611e4b51506c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "dc516459-8dc2-4cb8-9980-9b8e61ed7fca", "node_type": null, "metadata": {}, "hash": "fb2b45f53231264896a124ad3d2dd86a0703d0c617fa3eeb510c5daeb5878cb7"}, "3": {"node_id": "df8d2576-645e-4c4b-9c85-017c79c2748f", "node_type": null, "metadata": {}, "hash": "00ed93fea3e08f60708ea26313519db6e445908387a5bda3467e731c5d871ab0"}}, "hash": "5d2feaa2089a219d2dbca2e29943abfad9a92a00d6f91530f94b307e87d5d0fd", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainSetVcpusFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSetVcpusFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int nvcpus,\n    \t\t\t\t\t unsigned int flags)\n\nDynamically change the number of virtual CPUs used by the domain. Note that\nthis call may fail if the underlying virtualization hypervisor does not\nsupport it or if growing the number is arbitrarily limited. This function may\nrequire privileged access to the hypervisor.\n\n`flags` may include [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) to affect a running domain (which may fail\nif domain is not active), or [VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) to affect the next boot via the XML\ndescription of the domain. Both flags may be set. If neither flag is specified\n(that is, `flags` is [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT)), then an inactive domain modifies\npersistent setup, while an active domain is hypervisor-dependent on whether\njust live or both live and persistent state is changed.\n\nNote that if this call is executed before the guest has finished booting, the\nguest may fail to process the change.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df8d2576-645e-4c4b-9c85-017c79c2748f": {"__data__": {"id_": "df8d2576-645e-4c4b-9c85-017c79c2748f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "56ccd739-12b5-44ec-aa91-611e4b51506c", "node_type": null, "metadata": {}, "hash": "5d2feaa2089a219d2dbca2e29943abfad9a92a00d6f91530f94b307e87d5d0fd"}, "3": {"node_id": "e6d0141e-7999-44a0-83d1-455981ae31ff", "node_type": null, "metadata": {}, "hash": "9a61e299d08536301e952094d13346c702766e0bb22b7a8351f0d8eecce2c0f8"}}, "hash": "00ed93fea3e08f60708ea26313519db6e445908387a5bda3467e731c5d871ab0", "text": "If `flags` includes [VIR_DOMAIN_VCPU_MAXIMUM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_VCPU_MAXIMUM), then [VIR_DOMAIN_AFFECT_LIVE](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_AFFECT_LIVE) must be clear, and only the\nmaximum virtual CPU limit is altered; generally, this value must be less than\nor equal to [virConnectGetMaxVcpus](libvirt-libvirt-\nhost.html#virConnectGetMaxVcpus)(). Otherwise, this call affects the current\nvirtual CPU limit, which must be less than or equal to the maximum limit. Note\nthat hypervisors may not allow changing the maximum vcpu count if processor\ntopology is specified.\n\nIf `flags` includes [VIR_DOMAIN_VCPU_GUEST](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_VCPU_GUEST), then the state of processors is modified\ninside the guest instead of the hypervisor. This flag can only be used with\nlive guests and is incompatible with [VIR_DOMAIN_VCPU_MAXIMUM](libvirt-\nlibvirt-domain.html#VIR_DOMAIN_VCPU_MAXIMUM). The usage of this flag may\nrequire a guest agent configured.\n\nNot all hypervisors can support all flag combinations.\n\ndomain\n\n    pointer to domain object, or NULL for Domain0\nnvcpus\n\n    the new number of virtual CPUs for this domain, must be at least 1\nflags\n\n    bitwise-OR of [virDomainVcpuFlags](libvirt-libvirt-domain.html#virDomainVcpuFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e6d0141e-7999-44a0-83d1-455981ae31ff": {"__data__": {"id_": "e6d0141e-7999-44a0-83d1-455981ae31ff", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "df8d2576-645e-4c4b-9c85-017c79c2748f", "node_type": null, "metadata": {}, "hash": "00ed93fea3e08f60708ea26313519db6e445908387a5bda3467e731c5d871ab0"}, "3": {"node_id": "542628c5-247c-410a-8f88-d2f8b2b4447e", "node_type": null, "metadata": {}, "hash": "677eea8720233b5dda4a8e0fce9e8b280f588ee1d69988b7ea860521149312b5"}}, "hash": "9a61e299d08536301e952094d13346c702766e0bb22b7a8351f0d8eecce2c0f8", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)|\nVIR_DOMAIN_VCPU_GUEST  \n  \n### `virDomainShutdown`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainShutdown\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nShutdown a domain, the domain object is still usable thereafter, but the\ndomain OS is being stopped. Note that the guest OS may ignore the request.\nAdditionally, the hypervisor may check and support the domain 'on_poweroff'\nXML setting resulting in a domain that reboots instead of shutting down. For\nguests that react to a shutdown request, the differences from\n[virDomainDestroy](libvirt-libvirt-domain.html#virDomainDestroy)() are that\nthe guests disk storage will be in a stable state rather than having the\n(virtual) power cord pulled, and this command returns as soon as the shutdown\nrequest is issued rather than blocking until the guest is no longer running.\n\nIf the domain is transient and has any snapshot metadata (see\n[virDomainSnapshotNum](libvirt-libvirt-domain-\nsnapshot.html#virDomainSnapshotNum)()), then that metadata will automatically\nbe deleted when the domain quits.\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "542628c5-247c-410a-8f88-d2f8b2b4447e": {"__data__": {"id_": "542628c5-247c-410a-8f88-d2f8b2b4447e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "e6d0141e-7999-44a0-83d1-455981ae31ff", "node_type": null, "metadata": {}, "hash": "9a61e299d08536301e952094d13346c702766e0bb22b7a8351f0d8eecce2c0f8"}, "3": {"node_id": "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2", "node_type": null, "metadata": {}, "hash": "a3cea6c76997e42d8eed3c29ec98289b8506a9c99aa61122e847f0e92259151c"}}, "hash": "677eea8720233b5dda4a8e0fce9e8b280f588ee1d69988b7ea860521149312b5", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [init-\ncontrol](../acl.html#perm_domain_init-control)| -  \n  \n### `virDomainShutdownFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainShutdownFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nShutdown a domain, the domain object is still usable thereafter but the domain\nOS is being stopped. Note that the guest OS may ignore the request.\nAdditionally, the hypervisor may check and support the domain 'on_poweroff'\nXML setting resulting in a domain that reboots instead of shutting down. For\nguests that react to a shutdown request, the differences from\n[virDomainDestroy](libvirt-libvirt-domain.html#virDomainDestroy)() are that\nthe guest's disk storage will be in a stable state rather than having the\n(virtual) power cord pulled, and this command returns as soon as the shutdown\nrequest is issued rather than blocking until the guest is no longer running.\n\nIf the domain is transient and has any snapshot metadata (see\n[virDomainSnapshotNum](libvirt-libvirt-domain-\nsnapshot.html#virDomainSnapshotNum)()), then that metadata will automatically\nbe deleted when the domain quits.\n\nIf `flags` is set to zero, then the hypervisor will choose the method of\nshutdown it considers best. To have greater control pass one or more of the\n[virDomainShutdownFlagValues](libvirt-libvirt-\ndomain.html#virDomainShutdownFlagValues). The order in which the hypervisor\ntries each shutdown method is undefined, and a hypervisor is not required to\nsupport all methods.\n\nTo use guest agent ([VIR_DOMAIN_SHUTDOWN_GUEST_AGENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_SHUTDOWN_GUEST_AGENT)) the domain XML must have\n<channel> configured.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2": {"__data__": {"id_": "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "542628c5-247c-410a-8f88-d2f8b2b4447e", "node_type": null, "metadata": {}, "hash": "677eea8720233b5dda4a8e0fce9e8b280f588ee1d69988b7ea860521149312b5"}, "3": {"node_id": "27a3ec13-1887-458d-ba26-545296203652", "node_type": null, "metadata": {}, "hash": "8e308f6c4a24c385489440f3b987cd7d42c3127ad71094d47202ad92506223eb"}}, "hash": "a3cea6c76997e42d8eed3c29ec98289b8506a9c99aa61122e847f0e92259151c", "text": "domain\n\n    a domain object\nflags\n\n    bitwise-OR of [virDomainShutdownFlagValues](libvirt-libvirt-domain.html#virDomainShutdownFlagValues)\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [init-\ncontrol](../acl.html#perm_domain_init-control)| -  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)|\nVIR_DOMAIN_SHUTDOWN_GUEST_AGENT  \n  \n### `virDomainStartDirtyRateCalc`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainStartDirtyRateCalc\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t int seconds,\n    \t\t\t\t\t unsigned int flags)\n\nCalculate the current domain's memory dirty rate in next `seconds`. The\ncalculated dirty rate information is available by calling\n[virConnectGetAllDomainStats](libvirt-libvirt-\ndomain.html#virConnectGetAllDomainStats).\n\ndomain\n\n    a domain object\nseconds\n\n    specified calculating time in seconds\nflags\n\n    bitwise-OR of supported [virDomainDirtyRateCalcFlags](libvirt-libvirt-domain.html#virDomainDirtyRateCalcFlags)\nReturns\n\n    0 in case of success, -1 otherwise.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27a3ec13-1887-458d-ba26-545296203652": {"__data__": {"id_": "27a3ec13-1887-458d-ba26-545296203652", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2", "node_type": null, "metadata": {}, "hash": "a3cea6c76997e42d8eed3c29ec98289b8506a9c99aa61122e847f0e92259151c"}, "3": {"node_id": "27244290-e0d1-41dd-bfba-545992691d71", "node_type": null, "metadata": {}, "hash": "1385acfae916a8f54cc99e9b4167706ca2080bd1c33a510c6c3c93965469368e"}}, "hash": "8e308f6c4a24c385489440f3b987cd7d42c3127ad71094d47202ad92506223eb", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n  \n### `virDomainStatsRecordListFree`\u00c2\u00b6\n\n    \n    \n    void\tvirDomainStatsRecordListFree\t([virDomainStatsRecordPtr](libvirt-libvirt-domain.html#virDomainStatsRecordPtr) * stats)\n\nConvenience function to free a list of domain stats returned by\n[virDomainListGetStats](libvirt-libvirt-domain.html#virDomainListGetStats) and\n[virConnectGetAllDomainStats](libvirt-libvirt-\ndomain.html#virConnectGetAllDomainStats).\n\nstats\n\n    NULL terminated array of virDomainStatsRecords to free\n\n### `virDomainSuspend`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainSuspend\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nSuspends an active domain, the process is frozen without further access to CPU\nresources and I/O but the memory used by the domain at the hypervisor level\nwill stay allocated. Use [virDomainResume](libvirt-libvirt-\ndomain.html#virDomainResume)() to reactivate the domain. This function may\nrequire privileged access. Moreover, suspend may not be supported if domain is\nin some special state like [VIR_DOMAIN_PMSUSPENDED](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_PMSUSPENDED).\n\ndomain\n\n    a domain object\nReturns\n\n    0 in case of success and -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27244290-e0d1-41dd-bfba-545992691d71": {"__data__": {"id_": "27244290-e0d1-41dd-bfba-545992691d71", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "27a3ec13-1887-458d-ba26-545296203652", "node_type": null, "metadata": {}, "hash": "8e308f6c4a24c385489440f3b987cd7d42c3127ad71094d47202ad92506223eb"}, "3": {"node_id": "7ebace69-15d2-44d1-9d39-3a370478548e", "node_type": null, "metadata": {}, "hash": "41ef2d5528589e1e2aeaa8fea92cb6bd09734f59007189aba4829a271fda1e24"}}, "hash": "1385acfae916a8f54cc99e9b4167706ca2080bd1c33a510c6c3c93965469368e", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)|\n[suspend](../acl.html#perm_domain_suspend)| -  \n  \n### `virDomainUndefine`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainUndefine\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain)\n\nUndefine a domain. If the domain is running, it's converted to transient\ndomain, without stopping it. If the domain is inactive, the domain\nconfiguration is removed.\n\nIf the domain has a managed save image (see\n[virDomainHasManagedSaveImage](libvirt-libvirt-\ndomain.html#virDomainHasManagedSaveImage)()), or if it is inactive and has any\nsnapshot metadata (see [virDomainSnapshotNum](libvirt-libvirt-domain-\nsnapshot.html#virDomainSnapshotNum)()) or checkpoint metadata (see\n[virDomainListAllCheckpoints](libvirt-libvirt-domain-\ncheckpoint.html#virDomainListAllCheckpoints)()), then the undefine will fail.\nSee [virDomainUndefineFlags](libvirt-libvirt-\ndomain.html#virDomainUndefineFlags)() for more control.\n\ndomain\n\n    pointer to a defined domain\nReturns\n\n    0 in case of success, -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [delete](../acl.html#perm_domain_delete)|\n-  \n  \n### `virDomainUndefineFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainUndefineFlags\t\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t unsigned int flags)\n\nUndefine a domain. If the domain is running, it's converted to transient\ndomain, without stopping it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7ebace69-15d2-44d1-9d39-3a370478548e": {"__data__": {"id_": "7ebace69-15d2-44d1-9d39-3a370478548e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "27244290-e0d1-41dd-bfba-545992691d71", "node_type": null, "metadata": {}, "hash": "1385acfae916a8f54cc99e9b4167706ca2080bd1c33a510c6c3c93965469368e"}, "3": {"node_id": "258c1075-4e40-4b9a-adf0-d983d66b790c", "node_type": null, "metadata": {}, "hash": "45380edcea95615911017b7edb0be6a20997830689f10dec8913075167b7f722"}}, "hash": "41ef2d5528589e1e2aeaa8fea92cb6bd09734f59007189aba4829a271fda1e24", "text": "If the domain is running, it's converted to transient\ndomain, without stopping it. If the domain is inactive, the domain\nconfiguration is removed.\n\nIf the domain has a managed save image (see\n[virDomainHasManagedSaveImage](libvirt-libvirt-\ndomain.html#virDomainHasManagedSaveImage)()), then including\n[VIR_DOMAIN_UNDEFINE_MANAGED_SAVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_UNDEFINE_MANAGED_SAVE) in `flags` will also remove that\nfile, and omitting the flag will cause the undefine process to fail.\n\nIf the domain is inactive and has any snapshot metadata (see\n[virDomainSnapshotNum](libvirt-libvirt-domain-\nsnapshot.html#virDomainSnapshotNum)()), then including\n[VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA) in `flags` will also\nremove that metadata. Omitting the flag will cause the undefine of an inactive\ndomain with snapshots to fail. Active domains will retain snapshot metadata\nuntil the (now-transient) domain halts, regardless of whether this flag is\npresent. On hypervisors that support snapshots, but where snapshots do not use\nlibvirt metadata, this flag has no effect.\n\nIf the domain is inactive and has any checkpoint metadata (see\n[virDomainListAllCheckpoints](libvirt-libvirt-domain-\ncheckpoint.html#virDomainListAllCheckpoints)()), then including\n[VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA) in `flags` will also\nremove that metadata. Omitting the flag will cause the undefine of an inactive\ndomain with checkpoints to fail. Active domains will retain checkpoint\nmetadata until the (now-transient) domain halts, regardless of whether this\nflag is present.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "258c1075-4e40-4b9a-adf0-d983d66b790c": {"__data__": {"id_": "258c1075-4e40-4b9a-adf0-d983d66b790c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "7ebace69-15d2-44d1-9d39-3a370478548e", "node_type": null, "metadata": {}, "hash": "41ef2d5528589e1e2aeaa8fea92cb6bd09734f59007189aba4829a271fda1e24"}, "3": {"node_id": "a76a9ace-ab5f-4f4e-beec-8151f85b60aa", "node_type": null, "metadata": {}, "hash": "9de3221658f085d1d7ac3cc7082c3e3413dcdfab289cc3829143f2a6b9e640cb"}}, "hash": "45380edcea95615911017b7edb0be6a20997830689f10dec8913075167b7f722", "text": "On hypervisors that support checkpoints, but where\ncheckpoints do not use libvirt metadata, this flag has no effect.\n\nIf the domain has any nvram specified, the undefine process will fail unless\n[VIR_DOMAIN_UNDEFINE_KEEP_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_UNDEFINE_KEEP_NVRAM) is specified, or if\n[VIR_DOMAIN_UNDEFINE_NVRAM](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_UNDEFINE_NVRAM) is specified to remove the nvram file.\n\ndomain\n\n    pointer to a defined domain\nflags\n\n    bitwise-OR of supported [virDomainUndefineFlagsValues](libvirt-libvirt-domain.html#virDomainUndefineFlagsValues)\nReturns\n\n    0 in case of success, -1 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [delete](../acl.html#perm_domain_delete)|\n-  \n  \n### `virDomainUpdateDeviceFlags`\u00c2\u00b6\n\n    \n    \n    int\tvirDomainUpdateDeviceFlags\t([virDomainPtr](libvirt-libvirt-domain.html#virDomainPtr) domain,\n    \t\t\t\t\t const char * xml,\n    \t\t\t\t\t unsigned int flags)\n\nChange a virtual device on a domain, using the flags parameter to control how\nthe device is changed. [VIR_DOMAIN_AFFECT_CURRENT](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CURRENT) specifies that the device change is\nmade based on current domain state. [VIR_DOMAIN_AFFECT_LIVE](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_LIVE) specifies that the device shall be changed\non the active domain instance only and is not added to the persisted domain\nconfiguration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a76a9ace-ab5f-4f4e-beec-8151f85b60aa": {"__data__": {"id_": "a76a9ace-ab5f-4f4e-beec-8151f85b60aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "258c1075-4e40-4b9a-adf0-d983d66b790c", "node_type": null, "metadata": {}, "hash": "45380edcea95615911017b7edb0be6a20997830689f10dec8913075167b7f722"}, "3": {"node_id": "988cc3ed-e7a5-4b6d-88ea-e537ccc364dd", "node_type": null, "metadata": {}, "hash": "27d92d6dc9b1a026315a50bb76806ec2355b001f6491dd859f80cc4bffaf89e0"}}, "hash": "9de3221658f085d1d7ac3cc7082c3e3413dcdfab289cc3829143f2a6b9e640cb", "text": "[VIR_DOMAIN_AFFECT_CONFIG](libvirt-libvirt-\ndomain.html#VIR_DOMAIN_AFFECT_CONFIG) specifies that the device shall be\nchanged on the persisted domain configuration only. Note that the target\nhypervisor must return an error if unable to satisfy flags. E.g. the\nhypervisor driver will return failure if LIVE is specified but it only\nsupports modifying the persisted device allocation.\n\nThis method is used for actions such changing CDROM/Floppy device media,\naltering the graphics configuration such as password, reconfiguring the NIC\ndevice backend connectivity, etc.\n\nThe supplied XML description of the device should contain all the information\nthat is found in the corresponding domain XML. Leaving out any piece of\ninformation may be treated as a request for its removal, which may be denied.\nFor instance, when users want to change CDROM media only for live XML, they\nmust provide live disk XML as found in the corresponding live domain XML with\nonly the disk path changed.\n\ndomain\n\n    pointer to domain object\nxml\n\n    pointer to XML description of one device\nflags\n\n    bitwise-OR of [virDomainDeviceModifyFlags](libvirt-libvirt-domain.html#virDomainDeviceModifyFlags)\nReturns\n\n    0 in case of success, -1 in case of failure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "988cc3ed-e7a5-4b6d-88ea-e537ccc364dd": {"__data__": {"id_": "988cc3ed-e7a5-4b6d-88ea-e537ccc364dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6ee2a5d-3af7-4137-acb1-282913d4d83f", "node_type": null, "metadata": {}, "hash": "3f50773d5ca131918b13c1e77609152c47021386c38cbb045031114625fc6fe6"}, "2": {"node_id": "a76a9ace-ab5f-4f4e-beec-8151f85b60aa", "node_type": null, "metadata": {}, "hash": "9de3221658f085d1d7ac3cc7082c3e3413dcdfab289cc3829143f2a6b9e640cb"}}, "hash": "27d92d6dc9b1a026315a50bb76806ec2355b001f6491dd859f80cc4bffaf89e0", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[domain](../acl.html#object_domain)| [write](../acl.html#perm_domain_write)| -  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\n!VIR_DOMAIN_AFFECT_CONFIG|VIR_DOMAIN_AFFECT_LIVE  \n[domain](../acl.html#object_domain)| [save](../acl.html#perm_domain_save)|\nVIR_DOMAIN_AFFECT_CONFIG  \n  \n[Home](../index.html)\n\n  * [Download](../downloads.html)\n  * [Contribute](../contribute.html)\n  * [Docs](../docs.html)\n\nWebsite Wiki Developers list Users list\n\n### Contact\n\n  * [email](../contact.html#mailing-lists)\n  * [irc](../contact.html#irc)\n\n### Community\n\n  * [fosstodon](https://fosstodon.org/tags/libvirt)\n  * [stackoverflow](https://stackoverflow.com/questions/tagged/libvirt)\n  * [serverfault](https://serverfault.com/questions/tagged/libvirt)\n\nParticipants in the libvirt project agree to abide by [the project code of\nconduct](../governance.html#code-of-conduct)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a0a58d4f-d41c-4d99-8d61-9e5b67eda42b": {"__data__": {"id_": "a0a58d4f-d41c-4d99-8d61-9e5b67eda42b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "3": {"node_id": "5e867e6e-1b67-43f0-acf9-597030caeada", "node_type": null, "metadata": {}, "hash": "e24ab373adedea487103688699e29a760eda022a51418c84ee0a63522cd8df19"}}, "hash": "118446f8d001bd1821a2b8df2ce9a94ad448a9028292354334125f5644469c52", "text": "# Module libvirt-host from libvirt\n\nProvides APIs for the management of hosts\n\n## Table of Contents\n\n### Macros\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_GROUP_NAME\n    #define VIR_CONNECT_IDENTITY_PROCESS_ID\n    #define VIR_CONNECT_IDENTITY_PROCESS_TIME\n    #define VIR_CONNECT_IDENTITY_SASL_USER_NAME\n    #define VIR_CONNECT_IDENTITY_SELINUX_CONTEXT\n    #define VIR_CONNECT_IDENTITY_UNIX_GROUP_ID\n    #define VIR_CONNECT_IDENTITY_UNIX_USER_ID\n    #define VIR_CONNECT_IDENTITY_USER_NAME\n    #define VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME\n    #define VIR_NODEINFO_MAXCPUS\n    #define VIR_NODE_CPU_STATS_FIELD_LENGTH\n    #define VIR_NODE_CPU_STATS_IDLE\n    #define VIR_NODE_CPU_STATS_INTR\n    #define VIR_NODE_CPU_STATS_IOWAIT\n    #define VIR_NODE_CPU_STATS_KERNEL\n    #define VIR_NODE_CPU_STATS_USER\n    #define VIR_NODE_CPU_STATS_UTILIZATION\n    #define VIR_NODE_MEMORY_SHARED_FULL_SCANS\n    #define VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES\n    #define VIR_NODE_MEMORY_SHARED_PAGES_SHARED\n    #define VIR_NODE_MEMORY_SHARED_PAGES_SHARING\n    #define", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5e867e6e-1b67-43f0-acf9-597030caeada": {"__data__": {"id_": "5e867e6e-1b67-43f0-acf9-597030caeada", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "a0a58d4f-d41c-4d99-8d61-9e5b67eda42b", "node_type": null, "metadata": {}, "hash": "118446f8d001bd1821a2b8df2ce9a94ad448a9028292354334125f5644469c52"}, "3": {"node_id": "2c006329-564a-463c-bc72-8cd76f8cbaa3", "node_type": null, "metadata": {}, "hash": "0d5c0c792178636f37b0143bf7261a812a58a732ba98ad21f2559eaaacc73566"}}, "hash": "e24ab373adedea487103688699e29a760eda022a51418c84ee0a63522cd8df19", "text": "#define VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN\n    #define VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED\n    #define VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE\n    #define VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS\n    #define VIR_NODE_MEMORY_STATS_BUFFERS\n    #define VIR_NODE_MEMORY_STATS_CACHED\n    #define VIR_NODE_MEMORY_STATS_FIELD_LENGTH\n    #define VIR_NODE_MEMORY_STATS_FREE\n    #define VIR_NODE_MEMORY_STATS_TOTAL\n    #define VIR_NODE_SEV_CBITPOS\n    #define VIR_NODE_SEV_CERT_CHAIN\n    #define VIR_NODE_SEV_CPU0_ID\n    #define VIR_NODE_SEV_MAX_ES_GUESTS\n    #define VIR_NODE_SEV_MAX_GUESTS\n    #define VIR_NODE_SEV_PDH\n    #define VIR_NODE_SEV_REDUCED_PHYS_BITS\n    #define VIR_SECURITY_DOI_BUFLEN\n    #define VIR_SECURITY_LABEL_BUFLEN\n    #define VIR_SECURITY_MODEL_BUFLEN\n    #define VIR_UUID_BUFLEN\n    #define VIR_UUID_STRING_BUFLEN\n    \n\n### Types\n\n    \n    \n    typedef enum virCPUCompareResult\n    typedef struct _virConnect virConnect\n    typedef struct _virConnectAuth virConnectAuth\n    typedef", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2c006329-564a-463c-bc72-8cd76f8cbaa3": {"__data__": {"id_": "2c006329-564a-463c-bc72-8cd76f8cbaa3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "5e867e6e-1b67-43f0-acf9-597030caeada", "node_type": null, "metadata": {}, "hash": "e24ab373adedea487103688699e29a760eda022a51418c84ee0a63522cd8df19"}, "3": {"node_id": "21d42433-9020-48b9-9030-a21655cebdbe", "node_type": null, "metadata": {}, "hash": "efc546dbf2df6a1c6b9beb57865f7dbe5ef94950e444f3d8d10c3c53069b4f01"}}, "hash": "0d5c0c792178636f37b0143bf7261a812a58a732ba98ad21f2559eaaacc73566", "text": "typedef struct _virConnectAuth virConnectAuth\n    typedef [virConnectAuth](libvirt-libvirt-host.html#virConnectAuth) * virConnectAuthPtr\n    typedef enum virConnectBaselineCPUFlags\n    typedef enum virConnectCompareCPUFlags\n    typedef struct _virConnectCredential virConnectCredential\n    typedef [virConnectCredential](libvirt-libvirt-host.html#virConnectCredential) * virConnectCredentialPtr\n    typedef enum virConnectCredentialType\n    typedef enum virConnectFlags\n    typedef [virConnect](libvirt-libvirt-host.html#virConnect) * virConnectPtr\n    typedef enum virNodeAllocPagesFlags\n    typedef struct _virNodeCPUStats virNodeCPUStats\n    typedef [virNodeCPUStats](libvirt-libvirt-host.html#virNodeCPUStats) * virNodeCPUStatsPtr\n    typedef enum virNodeGetCPUStatsAllCPUs\n    typedef enum virNodeGetMemoryStatsAllCells\n    typedef struct _virNodeInfo virNodeInfo\n    typedef [virNodeInfo](libvirt-libvirt-host.html#virNodeInfo) * virNodeInfoPtr\n    typedef struct _virNodeMemoryStats virNodeMemoryStats\n    typedef [virNodeMemoryStats](libvirt-libvirt-host.html#virNodeMemoryStats) * virNodeMemoryStatsPtr\n    typedef enum virNodeSuspendTarget\n    typedef struct _virSecurityLabel virSecurityLabel\n    typedef [virSecurityLabel](libvirt-libvirt-host.html#virSecurityLabel) * virSecurityLabelPtr\n    typedef struct _virSecurityModel virSecurityModel\n    typedef [virSecurityModel](libvirt-libvirt-host.html#virSecurityModel) * virSecurityModelPtr\n    typedef struct _virStream virStream\n    typedef [virStream](libvirt-libvirt-host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "21d42433-9020-48b9-9030-a21655cebdbe": {"__data__": {"id_": "21d42433-9020-48b9-9030-a21655cebdbe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "2c006329-564a-463c-bc72-8cd76f8cbaa3", "node_type": null, "metadata": {}, "hash": "0d5c0c792178636f37b0143bf7261a812a58a732ba98ad21f2559eaaacc73566"}, "3": {"node_id": "c9f0c1fa-9976-4ccd-b10d-86f186d34c67", "node_type": null, "metadata": {}, "hash": "6c4c961fa95fd39728ca09ab06b53e2f350b05d14bb264fb6a47f685f3cf2fa5"}}, "hash": "efc546dbf2df6a1c6b9beb57865f7dbe5ef94950e444f3d8d10c3c53069b4f01", "text": "html#virStream) * virStreamPtr\n    \n\n### Functions\n\n    \n    \n    typedef virConnectAuthCallbackPtr\n    int\tvirConnectAuthCallbackPtr\t([virConnectCredentialPtr](libvirt-libvirt-host.html#virConnectCredentialPtr) cred,   \n    \t\t\t\t\t unsigned int ncred,   \n    \t\t\t\t\t void * cbdata)\n    \n    char *\tvirConnectBaselineCPU\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char ** xmlCPUs,   \n    \t\t\t\t\t unsigned int ncpus,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirConnectBaselineHypervisorCPU\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * emulator,   \n    \t\t\t\t\t const char * arch,   \n    \t\t\t\t\t const char * machine,   \n    \t\t\t\t\t const char * virttype,   \n    \t\t\t\t\t const char ** xmlCPUs,   \n    \t\t\t\t\t unsigned int ncpus,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectClose\t\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    typedef virConnectCloseFunc\n    void\tvirConnectCloseFunc\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int reason,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c9f0c1fa-9976-4ccd-b10d-86f186d34c67": {"__data__": {"id_": "c9f0c1fa-9976-4ccd-b10d-86f186d34c67", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "21d42433-9020-48b9-9030-a21655cebdbe", "node_type": null, "metadata": {}, "hash": "efc546dbf2df6a1c6b9beb57865f7dbe5ef94950e444f3d8d10c3c53069b4f01"}, "3": {"node_id": "a3aed14b-b2d8-4b0e-9c00-893d3b72561e", "node_type": null, "metadata": {}, "hash": "5f18239dbfc280254637cc3d012d38164e1b6468332366e71fc68cd8f966dcef"}}, "hash": "6c4c961fa95fd39728ca09ab06b53e2f350b05d14bb264fb6a47f685f3cf2fa5", "text": "int reason,   \n    \t\t\t\t\t void * opaque)\n    \n    int\tvirConnectCompareCPU\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * xmlDesc,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectCompareHypervisorCPU\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * emulator,   \n    \t\t\t\t\t const char * arch,   \n    \t\t\t\t\t const char * machine,   \n    \t\t\t\t\t const char * virttype,   \n    \t\t\t\t\t const char * xmlCPU,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectGetCPUModelNames\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * arch,   \n    \t\t\t\t\t char *** models,   \n    \t\t\t\t\t unsigned int flags)\n    char *\tvirConnectGetCapabilities\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    char *\tvirConnectGetHostname\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirConnectGetLibVersion\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned long * libVer)\n    int\tvirConnectGetMaxVcpus\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a3aed14b-b2d8-4b0e-9c00-893d3b72561e": {"__data__": {"id_": "a3aed14b-b2d8-4b0e-9c00-893d3b72561e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "c9f0c1fa-9976-4ccd-b10d-86f186d34c67", "node_type": null, "metadata": {}, "hash": "6c4c961fa95fd39728ca09ab06b53e2f350b05d14bb264fb6a47f685f3cf2fa5"}, "3": {"node_id": "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f", "node_type": null, "metadata": {}, "hash": "d3af55775005123918c5e8772764b3b70e2dbb5852601e241d1fcbf893d8a348"}}, "hash": "5f18239dbfc280254637cc3d012d38164e1b6468332366e71fc68cd8f966dcef", "text": "html#virConnectPtr) conn,   \n    \t\t\t\t\t const char * type)\n    char *\tvirConnectGetSysinfo\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned int flags)\n    const char *\tvirConnectGetType\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    char *\tvirConnectGetURI\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirConnectGetVersion\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned long * hvVer)\n    int\tvirConnectIsAlive\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirConnectIsEncrypted\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirConnectIsSecure\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpen\t\t(const char * name)\n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpenAuth\t(const char * name,   \n    \t\t\t\t\t [virConnectAuthPtr](libvirt-libvirt-host.html#virConnectAuthPtr) auth,   \n    \t\t\t\t\t unsigned int flags)\n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpenReadOnly\t(const char * name)\n    int\tvirConnectRef\t\t\t([virConnectPtr](libvirt-libvirt-host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f": {"__data__": {"id_": "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "a3aed14b-b2d8-4b0e-9c00-893d3b72561e", "node_type": null, "metadata": {}, "hash": "5f18239dbfc280254637cc3d012d38164e1b6468332366e71fc68cd8f966dcef"}, "3": {"node_id": "2c60cee0-3c5b-4760-9faf-26027afcd2e0", "node_type": null, "metadata": {}, "hash": "7b65e84c14f12af090ab53521438955f30165884eddf1daaad848a082619613d"}}, "hash": "d3af55775005123918c5e8772764b3b70e2dbb5852601e241d1fcbf893d8a348", "text": "html#virConnectPtr) conn)\n    int\tvirConnectRegisterCloseCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virConnectCloseFunc](libvirt-libvirt-host.html#virConnectCloseFunc) cb,   \n    \t\t\t\t\t void * opaque,   \n    \t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) freecb)\n    int\tvirConnectSetIdentity\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirConnectSetKeepAlive\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int interval,   \n    \t\t\t\t\t unsigned int count)\n    int\tvirConnectUnregisterCloseCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t\t [virConnectCloseFunc](libvirt-libvirt-host.html#virConnectCloseFunc) cb)\n    int\tvirGetVersion\t\t\t(unsigned long * libVer,   \n    \t\t\t\t\t const char * type,   \n    \t\t\t\t\t unsigned long * typeVer)\n    int\tvirInitialize\t\t\t(void)\n    int\tvirNodeAllocPages\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned int npages,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2c60cee0-3c5b-4760-9faf-26027afcd2e0": {"__data__": {"id_": "2c60cee0-3c5b-4760-9faf-26027afcd2e0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f", "node_type": null, "metadata": {}, "hash": "d3af55775005123918c5e8772764b3b70e2dbb5852601e241d1fcbf893d8a348"}, "3": {"node_id": "28b4abb8-de97-4bf0-b20e-d41cbabf21c7", "node_type": null, "metadata": {}, "hash": "fcf35c6752f18bc748039c6d0e1fddf2f4e0c548dd2111e36ff5016b14d1dd56"}}, "hash": "7b65e84c14f12af090ab53521438955f30165884eddf1daaad848a082619613d", "text": "unsigned int npages,   \n    \t\t\t\t\t unsigned int * pageSizes,   \n    \t\t\t\t\t unsigned long long * pageCounts,   \n    \t\t\t\t\t int startCell,   \n    \t\t\t\t\t unsigned int cellCount,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetCPUMap\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned char ** cpumap,   \n    \t\t\t\t\t unsigned int * online,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetCPUStats\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int cpuNum,   \n    \t\t\t\t\t [virNodeCPUStatsPtr](libvirt-libvirt-host.html#virNodeCPUStatsPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetCellsFreeMemory\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned long long * freeMems,   \n    \t\t\t\t\t int startCell,   \n    \t\t\t\t\t int maxCells)\n    unsigned long long\tvirNodeGetFreeMemory\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n    int\tvirNodeGetFreePages\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned int npages,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "28b4abb8-de97-4bf0-b20e-d41cbabf21c7": {"__data__": {"id_": "28b4abb8-de97-4bf0-b20e-d41cbabf21c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "2c60cee0-3c5b-4760-9faf-26027afcd2e0", "node_type": null, "metadata": {}, "hash": "7b65e84c14f12af090ab53521438955f30165884eddf1daaad848a082619613d"}, "3": {"node_id": "c94417e4-61f1-4545-97fe-5fd42530da37", "node_type": null, "metadata": {}, "hash": "b3c7f8fdaf626713a1dc9ed58ae770486a7046896ca11afdea3b7ad025d1f8dc"}}, "hash": "fcf35c6752f18bc748039c6d0e1fddf2f4e0c548dd2111e36ff5016b14d1dd56", "text": "unsigned int npages,   \n    \t\t\t\t\t unsigned int * pages,   \n    \t\t\t\t\t int startCell,   \n    \t\t\t\t\t unsigned int cellCount,   \n    \t\t\t\t\t unsigned long long * counts,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetInfo\t\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virNodeInfoPtr](libvirt-libvirt-host.html#virNodeInfoPtr) info)\n    int\tvirNodeGetMemoryParameters\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetMemoryStats\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t int cellNum,   \n    \t\t\t\t\t [virNodeMemoryStatsPtr](libvirt-libvirt-host.html#virNodeMemoryStatsPtr) params,   \n    \t\t\t\t\t int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetSEVInfo\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,   \n    \t\t\t\t\t int * nparams,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c94417e4-61f1-4545-97fe-5fd42530da37": {"__data__": {"id_": "c94417e4-61f1-4545-97fe-5fd42530da37", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "28b4abb8-de97-4bf0-b20e-d41cbabf21c7", "node_type": null, "metadata": {}, "hash": "fcf35c6752f18bc748039c6d0e1fddf2f4e0c548dd2111e36ff5016b14d1dd56"}, "3": {"node_id": "b937cc92-b505-4a7c-be3d-2629c06df59c", "node_type": null, "metadata": {}, "hash": "453abae942680a681884742f13770803932dc602e059af9194242b5ed9fba3fb"}}, "hash": "b3c7f8fdaf626713a1dc9ed58ae770486a7046896ca11afdea3b7ad025d1f8dc", "text": "int * nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeGetSecurityModel\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virSecurityModelPtr](libvirt-libvirt-host.html#virSecurityModelPtr) secmodel)\n    int\tvirNodeSetMemoryParameters\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,   \n    \t\t\t\t\t int nparams,   \n    \t\t\t\t\t unsigned int flags)\n    int\tvirNodeSuspendForDuration\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,   \n    \t\t\t\t\t unsigned int target,   \n    \t\t\t\t\t unsigned long long duration,   \n    \t\t\t\t\t unsigned int flags)\n    \n\n## Description\n\n### Macros\u00c2\u00b6\n\n### `VIR_CONNECT_IDENTITY_GROUP_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_GROUP_NAME\n\nThe operating system group name as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_CONNECT_IDENTITY_PROCESS_ID`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_PROCESS_ID\n\nThe operating system process ID as [VIR_TYPED_PARAM_LLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_LLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b937cc92-b505-4a7c-be3d-2629c06df59c": {"__data__": {"id_": "b937cc92-b505-4a7c-be3d-2629c06df59c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "c94417e4-61f1-4545-97fe-5fd42530da37", "node_type": null, "metadata": {}, "hash": "b3c7f8fdaf626713a1dc9ed58ae770486a7046896ca11afdea3b7ad025d1f8dc"}, "3": {"node_id": "eca07f71-af5f-47d1-8c1c-78deba7637df", "node_type": null, "metadata": {}, "hash": "2526263207066c27c09e77436f91bd2816c045c7c9258a8de015d02fa9b8485a"}}, "hash": "453abae942680a681884742f13770803932dc602e059af9194242b5ed9fba3fb", "text": "### `VIR_CONNECT_IDENTITY_PROCESS_TIME`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_PROCESS_TIME\n\nThe operating system process start time as [VIR_TYPED_PARAM_ULLONG](libvirt-\nlibvirt-common.html#VIR_TYPED_PARAM_ULLONG). The units the time is measured in\nvary according to the host operating system. On Linux this is usually clock\nticks (as reported in /proc/$PID/stat field 22).\n\n### `VIR_CONNECT_IDENTITY_SASL_USER_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_SASL_USER_NAME\n\nThe SASL authenticated username as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING)\n\n### `VIR_CONNECT_IDENTITY_SELINUX_CONTEXT`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_SELINUX_CONTEXT\n\nThe application's SELinux context as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_CONNECT_IDENTITY_UNIX_GROUP_ID`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_UNIX_GROUP_ID\n\nThe UNIX group ID as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "eca07f71-af5f-47d1-8c1c-78deba7637df": {"__data__": {"id_": "eca07f71-af5f-47d1-8c1c-78deba7637df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "b937cc92-b505-4a7c-be3d-2629c06df59c", "node_type": null, "metadata": {}, "hash": "453abae942680a681884742f13770803932dc602e059af9194242b5ed9fba3fb"}, "3": {"node_id": "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2", "node_type": null, "metadata": {}, "hash": "60ba6701772d7325efeb40c7d42c4ae9e70e0de0a193cf3ebc71ca1369e8b4f4"}}, "hash": "2526263207066c27c09e77436f91bd2816c045c7c9258a8de015d02fa9b8485a", "text": "### `VIR_CONNECT_IDENTITY_UNIX_USER_ID`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_UNIX_USER_ID\n\nThe UNIX user ID as [VIR_TYPED_PARAM_ULLONG](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_ULLONG).\n\n### `VIR_CONNECT_IDENTITY_USER_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_USER_NAME\n\nThe operating system user name as [VIR_TYPED_PARAM_STRING](libvirt-libvirt-\ncommon.html#VIR_TYPED_PARAM_STRING).\n\n### `VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME`\u00c2\u00b6\n\n    \n    \n    #define VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME\n\nThe TLS x509 certificate distinguished named as\n[VIR_TYPED_PARAM_STRING](libvirt-libvirt-common.html#VIR_TYPED_PARAM_STRING)\n\n### `VIR_NODEINFO_MAXCPUS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODEINFO_MAXCPUS\n\nThis macro is to calculate the total number of CPUs supported but not\nnecessary active in the host.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2": {"__data__": {"id_": "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "eca07f71-af5f-47d1-8c1c-78deba7637df", "node_type": null, "metadata": {}, "hash": "2526263207066c27c09e77436f91bd2816c045c7c9258a8de015d02fa9b8485a"}, "3": {"node_id": "e041cf85-5bb6-47d5-a0f8-3d3c8f547025", "node_type": null, "metadata": {}, "hash": "24c1ae621806fc7e0e13e3c7f11da2fa48687567adc8e0edf88f4d8f1fccfdd4"}}, "hash": "60ba6701772d7325efeb40c7d42c4ae9e70e0de0a193cf3ebc71ca1369e8b4f4", "text": "### `VIR_NODE_CPU_STATS_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_FIELD_LENGTH\n\nMacro providing the field length of [virNodeCPUStats](libvirt-libvirt-\nhost.html#virNodeCPUStats)\n\n### `VIR_NODE_CPU_STATS_IDLE`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_IDLE\n\nThe cumulative idle CPU time, since the node booting up (in nanoseconds).\n\n### `VIR_NODE_CPU_STATS_INTR`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_INTR\n\nThe cumulative interrupt CPU time, since the node booting up (in nanoseconds).\n\n### `VIR_NODE_CPU_STATS_IOWAIT`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_IOWAIT\n\nThe cumulative I/O wait CPU time, since the node booting up (in nanoseconds).\n\n### `VIR_NODE_CPU_STATS_KERNEL`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_KERNEL\n\nMacro for the cumulative CPU time which was spent by the kernel, since the\nnode booting up (in nanoseconds).\n\n### `VIR_NODE_CPU_STATS_USER`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_USER\n\nThe cumulative CPU time which was spent by user processes, since the node\nbooting up (in nanoseconds).\n\n### `VIR_NODE_CPU_STATS_UTILIZATION`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_CPU_STATS_UTILIZATION\n\nThe CPU utilization of a node.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e041cf85-5bb6-47d5-a0f8-3d3c8f547025": {"__data__": {"id_": "e041cf85-5bb6-47d5-a0f8-3d3c8f547025", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2", "node_type": null, "metadata": {}, "hash": "60ba6701772d7325efeb40c7d42c4ae9e70e0de0a193cf3ebc71ca1369e8b4f4"}, "3": {"node_id": "2a1af6cb-041d-4c86-9f44-9a130adf20b7", "node_type": null, "metadata": {}, "hash": "f43c830da39c2222bea36ee6b83f7aceb4adca63211e4f1122646b5e60a30215"}}, "hash": "24c1ae621806fc7e0e13e3c7f11da2fa48687567adc8e0edf88f4d8f1fccfdd4", "text": "The usage value is in percent and 100%\nrepresents all CPUs of the node.\n\n### `VIR_NODE_MEMORY_SHARED_FULL_SCANS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_FULL_SCANS\n\nMacro for typed parameter that represents how many times all mergeable areas\nhave been scanned.\n\n### `VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES\n\nMacro for typed parameter that represents whether pages from different NUMA\nnodes can be merged. The parameter has type int, when its value is 0, only\npages which physically reside in the memory area of same NUMA node are merged;\nWhen its value is 1, pages from all nodes can be merged. Other values are\nreserved for future use.\n\n### `VIR_NODE_MEMORY_SHARED_PAGES_SHARED`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_PAGES_SHARED\n\nMacro for typed parameter that represents how many the shared memory pages are\nbeing used.\n\n### `VIR_NODE_MEMORY_SHARED_PAGES_SHARING`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_PAGES_SHARING\n\nMacro for typed parameter that represents how many sites are sharing the pages\ni.e. how much saved.\n\n### `VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN\n\nMacro for typed parameter that represents how many present pages to scan\nbefore the shared memory service goes to sleep.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a1af6cb-041d-4c86-9f44-9a130adf20b7": {"__data__": {"id_": "2a1af6cb-041d-4c86-9f44-9a130adf20b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "e041cf85-5bb6-47d5-a0f8-3d3c8f547025", "node_type": null, "metadata": {}, "hash": "24c1ae621806fc7e0e13e3c7f11da2fa48687567adc8e0edf88f4d8f1fccfdd4"}, "3": {"node_id": "631da2d0-4782-4beb-b02b-8dfa0d1664ec", "node_type": null, "metadata": {}, "hash": "f3a8b77caf1a610960a7a497ca1573633cf001e94dd36f0bef561efc1ef9e56a"}}, "hash": "f43c830da39c2222bea36ee6b83f7aceb4adca63211e4f1122646b5e60a30215", "text": "### `VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED\n\nMacro for typed parameter that represents how many pages unique but repeatedly\nchecked for merging.\n\n### `VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE\n\nMacro for typed parameter that represents how many pages changing too fast to\nbe placed in a tree.\n\n### `VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS\n\nMacro for typed parameter that represents how many milliseconds the shared\nmemory service should sleep before next scan.\n\n### `VIR_NODE_MEMORY_STATS_BUFFERS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_STATS_BUFFERS\n\nMacro for the buffer memory: On Linux, it is only returned in case of\n[VIR_NODE_MEMORY_STATS_ALL_CELLS](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_ALL_CELLS).\n\n### `VIR_NODE_MEMORY_STATS_CACHED`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_STATS_CACHED\n\nMacro for the cached memory: On Linux, it is only returned in case of\n[VIR_NODE_MEMORY_STATS_ALL_CELLS](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_ALL_CELLS).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "631da2d0-4782-4beb-b02b-8dfa0d1664ec": {"__data__": {"id_": "631da2d0-4782-4beb-b02b-8dfa0d1664ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "2a1af6cb-041d-4c86-9f44-9a130adf20b7", "node_type": null, "metadata": {}, "hash": "f43c830da39c2222bea36ee6b83f7aceb4adca63211e4f1122646b5e60a30215"}, "3": {"node_id": "d76bcd6d-9def-4f3f-bd23-518d72311940", "node_type": null, "metadata": {}, "hash": "514ae5f6ab11937ae36a54d93bdceb4448430e29b6c34b025bc1fbef83905539"}}, "hash": "f3a8b77caf1a610960a7a497ca1573633cf001e94dd36f0bef561efc1ef9e56a", "text": "### `VIR_NODE_MEMORY_STATS_FIELD_LENGTH`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_STATS_FIELD_LENGTH\n\nMacro providing the field length of [virNodeMemoryStats](libvirt-libvirt-\nhost.html#virNodeMemoryStats)\n\n### `VIR_NODE_MEMORY_STATS_FREE`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_STATS_FREE\n\nMacro for the free memory of specified cell: On Linux, it includes buffer and\ncached memory, in case of [VIR_NODE_MEMORY_STATS_ALL_CELLS](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_ALL_CELLS).\n\n### `VIR_NODE_MEMORY_STATS_TOTAL`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_MEMORY_STATS_TOTAL\n\nMacro for the total memory of specified cell: it represents the maximum\nmemory.\n\n### `VIR_NODE_SEV_CBITPOS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_CBITPOS\n\nMacro represents the CBit Position used by hypervisor when SEV is enabled.\n\n### `VIR_NODE_SEV_CERT_CHAIN`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_CERT_CHAIN\n\nMacro represents the platform certificate chain that includes the platform\nendorsement key (PEK), owner certificate authority (OCD) and chip endorsement\nkey (CEK), as VIR_TYPED_PARAMS_STRING.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d76bcd6d-9def-4f3f-bd23-518d72311940": {"__data__": {"id_": "d76bcd6d-9def-4f3f-bd23-518d72311940", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "631da2d0-4782-4beb-b02b-8dfa0d1664ec", "node_type": null, "metadata": {}, "hash": "f3a8b77caf1a610960a7a497ca1573633cf001e94dd36f0bef561efc1ef9e56a"}, "3": {"node_id": "beef3088-792c-4802-8a67-2d955e94665c", "node_type": null, "metadata": {}, "hash": "fe388184fa2c72dd4c455c1267a22b430819578b19975fcd33db1e5cfa37c21f"}}, "hash": "514ae5f6ab11937ae36a54d93bdceb4448430e29b6c34b025bc1fbef83905539", "text": "### `VIR_NODE_SEV_CPU0_ID`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_CPU0_ID\n\nMacro represents the unique ID of CPU0 (socket 0) needed to retrieve the\nsigned CEK of the CPU from AMD's Key Distribution Service (KDS), as\nVIR_TYPED_PARAMS_STRING.\n\n### `VIR_NODE_SEV_MAX_ES_GUESTS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_MAX_ES_GUESTS\n\nMacro represents the number of SEV-ES guests that can be run on the host, as a\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).\n\n### `VIR_NODE_SEV_MAX_GUESTS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_MAX_GUESTS\n\nMacro represents the number of SEV guests that can be run on the host, as a\n[VIR_TYPED_PARAM_UINT](libvirt-libvirt-common.html#VIR_TYPED_PARAM_UINT).\n\n### `VIR_NODE_SEV_PDH`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_PDH\n\nMacro represents the Platform Diffie-Hellman key, as VIR_TYPED_PARAMS_STRING.\n\n### `VIR_NODE_SEV_REDUCED_PHYS_BITS`\u00c2\u00b6\n\n    \n    \n    #define VIR_NODE_SEV_REDUCED_PHYS_BITS\n\nMacro represents the number of bits we lose in physical address space when SEV\nis enabled in the guest.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "beef3088-792c-4802-8a67-2d955e94665c": {"__data__": {"id_": "beef3088-792c-4802-8a67-2d955e94665c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "d76bcd6d-9def-4f3f-bd23-518d72311940", "node_type": null, "metadata": {}, "hash": "514ae5f6ab11937ae36a54d93bdceb4448430e29b6c34b025bc1fbef83905539"}, "3": {"node_id": "11661390-1048-4e56-97bc-7c6779c65e7f", "node_type": null, "metadata": {}, "hash": "57aab6e04d1cd667bb42253a82a20e7ba83762dac8815698f2ae7d0c92ace210"}}, "hash": "fe388184fa2c72dd4c455c1267a22b430819578b19975fcd33db1e5cfa37c21f", "text": "### `VIR_SECURITY_DOI_BUFLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_SECURITY_DOI_BUFLEN\n\nMacro providing the maximum length of the [virSecurityModel](libvirt-libvirt-\nhost.html#virSecurityModel) doi string.\n\n### `VIR_SECURITY_LABEL_BUFLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_SECURITY_LABEL_BUFLEN\n\nMacro providing the maximum length of the [virSecurityLabel](libvirt-libvirt-\nhost.html#virSecurityLabel) label string. Note that this value is based on\nthat used by Labeled NFS.\n\n### `VIR_SECURITY_MODEL_BUFLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_SECURITY_MODEL_BUFLEN\n\nMacro providing the maximum length of the [virSecurityModel](libvirt-libvirt-\nhost.html#virSecurityModel) model string.\n\n### `VIR_UUID_BUFLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_UUID_BUFLEN\n\nThis macro provides the length of the buffer required for\n[virDomainGetUUID](libvirt-libvirt-domain.html#virDomainGetUUID)()\n\n### `VIR_UUID_STRING_BUFLEN`\u00c2\u00b6\n\n    \n    \n    #define VIR_UUID_STRING_BUFLEN\n\nThis macro provides the length of the buffer required for\n[virDomainGetUUIDString](libvirt-libvirt-domain.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "11661390-1048-4e56-97bc-7c6779c65e7f": {"__data__": {"id_": "11661390-1048-4e56-97bc-7c6779c65e7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "beef3088-792c-4802-8a67-2d955e94665c", "node_type": null, "metadata": {}, "hash": "fe388184fa2c72dd4c455c1267a22b430819578b19975fcd33db1e5cfa37c21f"}, "3": {"node_id": "4a5d1358-b36f-4426-adab-7b8f3dbdf50a", "node_type": null, "metadata": {}, "hash": "2805da35f96d4e7641d797b98d838df9daacf946ef469fe3b78e701e9e8402a0"}}, "hash": "57aab6e04d1cd667bb42253a82a20e7ba83762dac8815698f2ae7d0c92ace210", "text": "html#virDomainGetUUIDString)()\n\n### Types\u00c2\u00b6\n\n### `virCPUCompareResult`\u00c2\u00b6\n\n    \n    \n    enum virCPUCompareResult {\n    \n\nVIR_CPU_COMPARE_ERROR|  = | -1 (-0x1)  \n---|---|---  \nVIR_CPU_COMPARE_INCOMPATIBLE|  = | 0 (0x0)  \nVIR_CPU_COMPARE_IDENTICAL|  = | 1 (0x1)  \nVIR_CPU_COMPARE_SUPERSET|  = | 2 (0x2)  \nVIR_CPU_COMPARE_LAST|  = | 3 (0x3)  \n      \n    \n    }\n    \n\n### `virConnect`\u00c2\u00b6\n\n    \n    \n    struct virConnect {\n    \n\nThe content of this structure is not made public by the API\n\n    \n    \n    }\n    \n\n### `virConnectAuth`\u00c2\u00b6\n\n    \n    \n    struct virConnectAuth {\n    \n\nint *| credtype|\n\nList of supported [virConnectCredentialType](libvirt-libvirt-\nhost.html#virConnectCredentialType) values  \n  \n---|---|---  \nunsigned int| ncredtype  \n[virConnectAuthCallbackPtr](libvirt-libvirt-\nhost.html#virConnectAuthCallbackPtr)| cb|\n\nCallback used to collect credentials  \n  \nvoid *| cbdata  \n      \n    \n    }\n    \n\n### `virConnectAuthPtr`\u00c2\u00b6\n\n    \n    \n    typedef virConnectAuth * virConnectAuthPtr;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4a5d1358-b36f-4426-adab-7b8f3dbdf50a": {"__data__": {"id_": "4a5d1358-b36f-4426-adab-7b8f3dbdf50a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "11661390-1048-4e56-97bc-7c6779c65e7f", "node_type": null, "metadata": {}, "hash": "57aab6e04d1cd667bb42253a82a20e7ba83762dac8815698f2ae7d0c92ace210"}, "3": {"node_id": "78c39e61-4f77-4657-ad1d-b19693fb7be9", "node_type": null, "metadata": {}, "hash": "caa0f6c84e782d7e96cee036ae0fbe0015ca84f8686037777c5be0f69ed2050e"}}, "hash": "2805da35f96d4e7641d797b98d838df9daacf946ef469fe3b78e701e9e8402a0", "text": "### `virConnectBaselineCPUFlags`\u00c2\u00b6\n\nFlags when getting XML description of a computed CPU\n\n    \n    \n    enum virConnectBaselineCPUFlags {\n    \n\nVIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES|  = | 1 (0x1; 1 << 0)|\n\nshow all features  \n  \n---|---|---|---  \nVIR_CONNECT_BASELINE_CPU_MIGRATABLE|  = | 2 (0x2; 1 << 1)|\n\nfilter out non-migratable features  \n      \n    \n    }\n    \n\n### `virConnectCompareCPUFlags`\u00c2\u00b6\n\n    \n    \n    enum virConnectCompareCPUFlags {\n    \n\nVIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE|  = | 1 (0x1; 1 << 0)|\n\ntreat incompatible CPUs as failure  \n  \n---|---|---|---  \nVIR_CONNECT_COMPARE_CPU_VALIDATE_XML|  = | 2 (0x2; 1 << 1)|\n\nvalidate the xml document  \n      \n    \n    }\n    \n\n### `virConnectCredential`\u00c2\u00b6\n\n    \n    \n    struct virConnectCredential {\n    \n\nint| type|\n\nOne of [virConnectCredentialType](libvirt-libvirt-\nhost.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78c39e61-4f77-4657-ad1d-b19693fb7be9": {"__data__": {"id_": "78c39e61-4f77-4657-ad1d-b19693fb7be9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "4a5d1358-b36f-4426-adab-7b8f3dbdf50a", "node_type": null, "metadata": {}, "hash": "2805da35f96d4e7641d797b98d838df9daacf946ef469fe3b78e701e9e8402a0"}, "3": {"node_id": "10116b06-2768-41a2-8c27-85a2fcfa9ac7", "node_type": null, "metadata": {}, "hash": "e0d8d9c7e1b13a32720a1ce2c0b37b5cba24b12e6b282fd539938e81e4c9ab39"}}, "hash": "caa0f6c84e782d7e96cee036ae0fbe0015ca84f8686037777c5be0f69ed2050e", "text": "html#virConnectCredentialType) constants  \n  \n---|---|---  \nconst char *| prompt|\n\nPrompt to show to user  \n  \nconst char *| challenge|\n\nAdditional challenge to show  \n  \nconst char *| defresult|\n\nOptional default result  \n  \nchar *| result|\n\nResult to be filled with user response (or defresult)  \n  \nunsigned int| resultlen|\n\nLength of the result  \n      \n    \n    }\n    \n\n### `virConnectCredentialPtr`\u00c2\u00b6\n\n    \n    \n    typedef virConnectCredential * virConnectCredentialPtr;\n\n### `virConnectCredentialType`\u00c2\u00b6\n\n    \n    \n    enum virConnectCredentialType {\n    \n\nVIR_CRED_USERNAME|  = | 1 (0x1)|\n\nIdentity to act as  \n  \n---|---|---|---  \nVIR_CRED_AUTHNAME|  = | 2 (0x2)|\n\nIdentify to authorize as  \n  \nVIR_CRED_LANGUAGE|  = | 3 (0x3)|\n\nRFC 1766 languages,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "10116b06-2768-41a2-8c27-85a2fcfa9ac7": {"__data__": {"id_": "10116b06-2768-41a2-8c27-85a2fcfa9ac7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "78c39e61-4f77-4657-ad1d-b19693fb7be9", "node_type": null, "metadata": {}, "hash": "caa0f6c84e782d7e96cee036ae0fbe0015ca84f8686037777c5be0f69ed2050e"}, "3": {"node_id": "4cd26ab6-fcde-4333-bf48-d3a3153eb08e", "node_type": null, "metadata": {}, "hash": "455d8ddb0134cd3428e4196fa63be01fe0efb7f960cddc1ba5b9cf8ffde1dcae"}}, "hash": "e0d8d9c7e1b13a32720a1ce2c0b37b5cba24b12e6b282fd539938e81e4c9ab39", "text": "comma separated  \n  \nVIR_CRED_CNONCE|  = | 4 (0x4)|\n\nclient supplies a nonce  \n  \nVIR_CRED_PASSPHRASE|  = | 5 (0x5)|\n\nPassphrase secret  \n  \nVIR_CRED_ECHOPROMPT|  = | 6 (0x6)|\n\nChallenge response  \n  \nVIR_CRED_NOECHOPROMPT|  = | 7 (0x7)|\n\nChallenge response  \n  \nVIR_CRED_REALM|  = | 8 (0x8)|\n\nAuthentication realm  \n  \nVIR_CRED_EXTERNAL|  = | 9 (0x9)|\n\nExternally managed credential  \n  \nVIR_CRED_LAST|  = | 10 (0xa)|\n\nMore may be added - expect the unexpected  \n      \n    \n    }\n    \n\n### `virConnectFlags`\u00c2\u00b6\n\nFlags when opening a connection to a hypervisor\n\n    \n    \n    enum virConnectFlags {\n    \n\nVIR_CONNECT_RO|  = | 1 (0x1; 1 << 0)|\n\nA readonly connection  \n  \n---|---|---|---  \nVIR_CONNECT_NO_ALIASES|  = | 2 (0x2; 1 << 1)|\n\nDon't try to resolve URI aliases  \n      \n    \n    }\n    \n\n### `virConnectPtr`\u00c2\u00b6\n\n    \n    \n    typedef virConnect * virConnectPtr;\n\na [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) is pointer to a\n[virConnect](libvirt-libvirt-host.html#virConnect) private structure, this is\nthe type used to reference a connection to the Hypervisor in the API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4cd26ab6-fcde-4333-bf48-d3a3153eb08e": {"__data__": {"id_": "4cd26ab6-fcde-4333-bf48-d3a3153eb08e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "10116b06-2768-41a2-8c27-85a2fcfa9ac7", "node_type": null, "metadata": {}, "hash": "e0d8d9c7e1b13a32720a1ce2c0b37b5cba24b12e6b282fd539938e81e4c9ab39"}, "3": {"node_id": "541c7388-228c-4530-8be8-b096a7f6de4f", "node_type": null, "metadata": {}, "hash": "246ace98ec1f0494258598bfb64582a50c17d9bbe9779aa2575e606f1d2337c0"}}, "hash": "455d8ddb0134cd3428e4196fa63be01fe0efb7f960cddc1ba5b9cf8ffde1dcae", "text": "this is\nthe type used to reference a connection to the Hypervisor in the API.\n\n### `virNodeAllocPagesFlags`\u00c2\u00b6\n\n    \n    \n    enum virNodeAllocPagesFlags {\n    \n\nVIR_NODE_ALLOC_PAGES_ADD|  = | 0 (0x0)|\n\nAdd `pageCounts` to the pages pool. This can be used only to size up the pool.  \n  \n---|---|---|---  \nVIR_NODE_ALLOC_PAGES_SET|  = | 1 (0x1; 1 << 0)|\n\nDon't add `pageCounts`, instead set passed number of pages. This can be used\nto free allocated pages.  \n      \n    \n    }\n    \n\n### `virNodeCPUStats`\u00c2\u00b6\n\n    \n    \n    struct virNodeCPUStats {\n    \n\nchar field[VIR_NODE_CPU_STATS_FIELD_LENGTH]| field  \n---|---  \nunsigned long long| value  \n      \n    \n    }\n    \n\n### `virNodeCPUStatsPtr`\u00c2\u00b6\n\n    \n    \n    typedef virNodeCPUStats * virNodeCPUStatsPtr;\n\na [virNodeCPUStatsPtr](libvirt-libvirt-host.html#virNodeCPUStatsPtr) is a\npointer to a [virNodeCPUStats](libvirt-libvirt-host.html#virNodeCPUStats)\nstructure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "541c7388-228c-4530-8be8-b096a7f6de4f": {"__data__": {"id_": "541c7388-228c-4530-8be8-b096a7f6de4f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "4cd26ab6-fcde-4333-bf48-d3a3153eb08e", "node_type": null, "metadata": {}, "hash": "455d8ddb0134cd3428e4196fa63be01fe0efb7f960cddc1ba5b9cf8ffde1dcae"}, "3": {"node_id": "b010e078-4cd9-4b00-a10e-f5e080d711b9", "node_type": null, "metadata": {}, "hash": "201314f68613902a9fe05733757819342d6a643663bf6e24868c90d642edca9f"}}, "hash": "246ace98ec1f0494258598bfb64582a50c17d9bbe9779aa2575e606f1d2337c0", "text": "### `virNodeGetCPUStatsAllCPUs`\u00c2\u00b6\n\nValue for specifying request for the total CPU time/utilization\n\n    \n    \n    enum virNodeGetCPUStatsAllCPUs {\n    \n\nVIR_NODE_CPU_STATS_ALL_CPUS|  = | -1 (-0x1)  \n---|---|---  \n      \n    \n    }\n    \n\n### `virNodeGetMemoryStatsAllCells`\u00c2\u00b6\n\nValue for specifying request for the total memory of all cells.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b010e078-4cd9-4b00-a10e-f5e080d711b9": {"__data__": {"id_": "b010e078-4cd9-4b00-a10e-f5e080d711b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "541c7388-228c-4530-8be8-b096a7f6de4f", "node_type": null, "metadata": {}, "hash": "246ace98ec1f0494258598bfb64582a50c17d9bbe9779aa2575e606f1d2337c0"}, "3": {"node_id": "5766380f-047e-4bb3-aeff-1439f1825321", "node_type": null, "metadata": {}, "hash": "6213c187b6977ecb71aad83edca52eacb16017f6a477d860d651f4b54c18be86"}}, "hash": "201314f68613902a9fe05733757819342d6a643663bf6e24868c90d642edca9f", "text": "enum virNodeGetMemoryStatsAllCells {\n    \n\nVIR_NODE_MEMORY_STATS_ALL_CELLS|  = | -1 (-0x1)  \n---|---|---  \n      \n    \n    }\n    \n\n### `virNodeInfo`\u00c2\u00b6\n\n    \n    \n    struct virNodeInfo {\n    \n\nchar model[32]| model|\n\nstring indicating the CPU model  \n  \n---|---|---  \nunsigned long| memory|\n\nmemory size in kilobytes  \n  \nunsigned int| cpus|\n\nthe number of active CPUs  \n  \nunsigned int| mhz|\n\nexpected CPU frequency, 0 if not known or on unusual architectures  \n  \nunsigned int| nodes|\n\nthe number of NUMA cell, 1 for unusual NUMA topologies or uniform memory\naccess; check capabilities XML for the actual NUMA topology  \n  \nunsigned int| sockets|\n\nnumber of CPU sockets per node if nodes > 1, 1 in case of unusual NUMA\ntopology  \n  \nunsigned int| cores|\n\nnumber of cores per socket, total number of processors in case of unusual NUMA\ntopology  \n  \nunsigned int| threads|\n\nnumber of threads per core, 1 in case of unusual numa topology  \n      \n    \n    }\n    \n\n### `virNodeInfoPtr`\u00c2\u00b6\n\n    \n    \n    typedef virNodeInfo * virNodeInfoPtr;\n\na [virNodeInfoPtr](libvirt-libvirt-host.html#virNodeInfoPtr) is a pointer to a\n[virNodeInfo](libvirt-libvirt-host.html#virNodeInfo) structure.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5766380f-047e-4bb3-aeff-1439f1825321": {"__data__": {"id_": "5766380f-047e-4bb3-aeff-1439f1825321", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "b010e078-4cd9-4b00-a10e-f5e080d711b9", "node_type": null, "metadata": {}, "hash": "201314f68613902a9fe05733757819342d6a643663bf6e24868c90d642edca9f"}, "3": {"node_id": "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3", "node_type": null, "metadata": {}, "hash": "a85ad169faedb0cff3ab7b77b1729c5da9a96f9382cf3f9c7a9884517dbe2a0c"}}, "hash": "6213c187b6977ecb71aad83edca52eacb16017f6a477d860d651f4b54c18be86", "text": "### `virNodeMemoryStats`\u00c2\u00b6\n\n    \n    \n    struct virNodeMemoryStats {\n    \n\nchar field[VIR_NODE_MEMORY_STATS_FIELD_LENGTH]| field  \n---|---  \nunsigned long long| value  \n      \n    \n    }\n    \n\n### `virNodeMemoryStatsPtr`\u00c2\u00b6\n\n    \n    \n    typedef virNodeMemoryStats * virNodeMemoryStatsPtr;\n\na [virNodeMemoryStatsPtr](libvirt-libvirt-host.html#virNodeMemoryStatsPtr) is\na pointer to a [virNodeMemoryStats](libvirt-libvirt-\nhost.html#virNodeMemoryStats) structure.\n\n### `virNodeSuspendTarget`\u00c2\u00b6\n\nFlags to indicate which system-wide sleep state the host must be transitioned\nto.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3": {"__data__": {"id_": "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "5766380f-047e-4bb3-aeff-1439f1825321", "node_type": null, "metadata": {}, "hash": "6213c187b6977ecb71aad83edca52eacb16017f6a477d860d651f4b54c18be86"}, "3": {"node_id": "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824", "node_type": null, "metadata": {}, "hash": "df8b55d15bb0e443351ef385f4eea31d1e4d2110c3b70e47ac218a89ea54dc4d"}}, "hash": "a85ad169faedb0cff3ab7b77b1729c5da9a96f9382cf3f9c7a9884517dbe2a0c", "text": "enum virNodeSuspendTarget {\n    \n\nVIR_NODE_SUSPEND_TARGET_MEM|  = | 0 (0x0)  \n---|---|---  \nVIR_NODE_SUSPEND_TARGET_DISK|  = | 1 (0x1)  \nVIR_NODE_SUSPEND_TARGET_HYBRID|  = | 2 (0x2)  \nVIR_NODE_SUSPEND_TARGET_LAST|  = | 3 (0x3)|\n\nThis constant is subject to change  \n      \n    \n    }\n    \n\n### `virSecurityLabel`\u00c2\u00b6\n\n    \n    \n    struct virSecurityLabel {\n    \n\nchar label[VIR_SECURITY_LABEL_BUFLEN]| label|\n\nsecurity label string  \n  \n---|---|---  \nint| enforcing|\n\n1 if security policy is being enforced for domain  \n      \n    \n    }\n    \n\n### `virSecurityLabelPtr`\u00c2\u00b6\n\n    \n    \n    typedef virSecurityLabel * virSecurityLabelPtr;\n\na [virSecurityLabelPtr](libvirt-libvirt-host.html#virSecurityLabelPtr) is a\npointer to a [virSecurityLabel](libvirt-libvirt-host.html#virSecurityLabel).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824": {"__data__": {"id_": "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3", "node_type": null, "metadata": {}, "hash": "a85ad169faedb0cff3ab7b77b1729c5da9a96f9382cf3f9c7a9884517dbe2a0c"}, "3": {"node_id": "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3", "node_type": null, "metadata": {}, "hash": "6fef870a963098418d76cfefd0e6d4e3bb406ef9dafd2889a36b298c4a1a5259"}}, "hash": "df8b55d15bb0e443351ef385f4eea31d1e4d2110c3b70e47ac218a89ea54dc4d", "text": "### `virSecurityModel`\u00c2\u00b6\n\n    \n    \n    struct virSecurityModel {\n    \n\nchar model[VIR_SECURITY_MODEL_BUFLEN]| model|\n\nsecurity model string  \n  \n---|---|---  \nchar doi[VIR_SECURITY_DOI_BUFLEN]| doi|\n\ndomain of interpretation  \n      \n    \n    }\n    \n\n### `virSecurityModelPtr`\u00c2\u00b6\n\n    \n    \n    typedef virSecurityModel * virSecurityModelPtr;\n\na [virSecurityModelPtr](libvirt-libvirt-host.html#virSecurityModelPtr) is a\npointer to a [virSecurityModel](libvirt-libvirt-host.html#virSecurityModel).\n\n### `virStream`\u00c2\u00b6\n\n    \n    \n    struct virStream {\n    \n\nThe content of this structure is not made public by the API\n\n    \n    \n    }\n    \n\n### `virStreamPtr`\u00c2\u00b6\n\n    \n    \n    typedef virStream * virStreamPtr;\n\na [virStreamPtr](libvirt-libvirt-host.html#virStreamPtr) is pointer to a\n[virStream](libvirt-libvirt-host.html#virStream) private structure, this is\nthe type used to reference a data stream in the API.\n\n### Functions\u00c2\u00b6\n\n### `virConnectAuthCallbackPtr`\u00c2\u00b6\n\n    \n    \n    typedef int\t(*virConnectAuthCallbackPtr)\t([virConnectCredentialPtr](libvirt-libvirt-host.html#virConnectCredentialPtr) cred,\n    \t\t\t\t\t unsigned int ncred,\n    \t\t\t\t\t void * cbdata)\n    \n\nWhen authentication requires one or more interactions, this callback is\ninvoked.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3": {"__data__": {"id_": "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824", "node_type": null, "metadata": {}, "hash": "df8b55d15bb0e443351ef385f4eea31d1e4d2110c3b70e47ac218a89ea54dc4d"}, "3": {"node_id": "5e39a3d5-764e-43db-9ac1-115986f817fe", "node_type": null, "metadata": {}, "hash": "4db7440a9b638c8cbb48be3890502fe1b8f778d5a87ef3018e333f987a090c89"}}, "hash": "6fef870a963098418d76cfefd0e6d4e3bb406ef9dafd2889a36b298c4a1a5259", "text": "For each interaction supplied, data must be gathered from the user\nand filled in to the 'result' and 'resultlen' fields. If an interaction cannot\nbe filled, fill in NULL and 0.\n\ncred\n\n    list of [virConnectCredential](libvirt-libvirt-host.html#virConnectCredential) object to fetch from user\nncred\n\n    size of cred list\ncbdata\n\n    opaque data passed to [virConnectOpenAuth](libvirt-libvirt-host.html#virConnectOpenAuth)\nReturns\n\n    0 if all interactions were filled, or -1 upon error\n  \n\n### `virConnectBaselineCPU`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectBaselineCPU\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char ** xmlCPUs,\n    \t\t\t\t\t unsigned int ncpus,\n    \t\t\t\t\t unsigned int flags)\n\nComputes the most feature-rich CPU which is compatible with all given host\nCPUs.\n\nSee [virConnectBaselineHypervisorCPU](libvirt-libvirt-\nhost.html#virConnectBaselineHypervisorCPU)() to get a CPU which can be\nprovided by the hypervisor.\n\nIf `flags` includes [VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES](libvirt-\nlibvirt-host.html#VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES) then libvirt will\nexplicitly list all CPU features that are part of the host CPU, without this\nflag features that are part of the CPU model will not be listed.\n\nIf `flags` includes [VIR_CONNECT_BASELINE_CPU_MIGRATABLE](libvirt-libvirt-\nhost.html#VIR_CONNECT_BASELINE_CPU_MIGRATABLE), the resulting CPU will not\ninclude features that block migration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5e39a3d5-764e-43db-9ac1-115986f817fe": {"__data__": {"id_": "5e39a3d5-764e-43db-9ac1-115986f817fe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3", "node_type": null, "metadata": {}, "hash": "6fef870a963098418d76cfefd0e6d4e3bb406ef9dafd2889a36b298c4a1a5259"}, "3": {"node_id": "8a6047a5-1b6b-437b-a28c-22693d223eda", "node_type": null, "metadata": {}, "hash": "45d0cd64f555aed5d04b906ef597dae5572003ce9206345c386dfcda021716c1"}}, "hash": "4db7440a9b638c8cbb48be3890502fe1b8f778d5a87ef3018e333f987a090c89", "text": "conn\n\n    [virConnect](libvirt-libvirt-host.html#virConnect) connection\nxmlCPUs\n\n    array of XML descriptions of host CPUs\nncpus\n\n    number of CPUs in xmlCPUs\nflags\n\n    bitwise-OR of [virConnectBaselineCPUFlags](libvirt-libvirt-host.html#virConnectBaselineCPUFlags)\nReturns\n\n    XML description of the computed CPU (caller frees) or NULL on error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectBaselineHypervisorCPU`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectBaselineHypervisorCPU\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * emulator,\n    \t\t\t\t\t const char * arch,\n    \t\t\t\t\t const char * machine,\n    \t\t\t\t\t const char * virttype,\n    \t\t\t\t\t const char ** xmlCPUs,\n    \t\t\t\t\t unsigned int ncpus,\n    \t\t\t\t\t unsigned int flags)\n\nComputes the most feature-rich CPU which is compatible with all given CPUs and\ncan be provided by the specified hypervisor. For best results the host-model\nCPUs as advertised by [virConnectGetDomainCapabilities](libvirt-libvirt-\ndomain.html#virConnectGetDomainCapabilities)() should be passed in `xmlCPUs`.\nAny of `emulator`, `arch`, `machine`, and `virttype` parameters may be NULL;\nlibvirt will choose sensible defaults tailored to the host and its current\nconfiguration.\n\nThis is different from [virConnectBaselineCPU](libvirt-libvirt-\nhost.html#virConnectBaselineCPU)() which doesn't consider any hypervisor\nabilities when computing the best CPU.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8a6047a5-1b6b-437b-a28c-22693d223eda": {"__data__": {"id_": "8a6047a5-1b6b-437b-a28c-22693d223eda", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "5e39a3d5-764e-43db-9ac1-115986f817fe", "node_type": null, "metadata": {}, "hash": "4db7440a9b638c8cbb48be3890502fe1b8f778d5a87ef3018e333f987a090c89"}, "3": {"node_id": "6bbfbb2b-9927-41a7-b644-27482eb95d82", "node_type": null, "metadata": {}, "hash": "9ab4a25640498821ba2ec476ae28f857bbde1fba3492fcf1d7788bbf02552c22"}}, "hash": "45d0cd64f555aed5d04b906ef597dae5572003ce9206345c386dfcda021716c1", "text": "If `ncpus` == 1, the result will be the first (and only) CPU in `xmlCPUs`\ntailored to what the hypervisor can support on the current host. Specifically\nif this single CPU definition contains no feature elements and a CPU model\nlisted as usable='no' in domain capabilities XML, the result will contain a\nlist usability blockers, i.e., a list of features that would need to be\ndisabled to for the model to be usable on this host. This list may contain\nmore features than what the hypervisor reports as blockers in case the CPU\nmodel definition in libvirt differs from QEMU definition.\n\nIf `flags` includes [VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES](libvirt-\nlibvirt-host.html#VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES) then libvirt will\nexplicitly list all CPU features that are part of the computed CPU, without\nthis flag features that are part of the CPU model will not be listed.\n\nIf `flags` includes [VIR_CONNECT_BASELINE_CPU_MIGRATABLE](libvirt-libvirt-\nhost.html#VIR_CONNECT_BASELINE_CPU_MIGRATABLE), the resulting CPU will not\ninclude features that block migration.\n\nconn\n\n    pointer to the hypervisor connection\nemulator\n\n    path to the emulator binary\narch\n\n    CPU architecture\nmachine\n\n    machine type\nvirttype\n\n    virtualization type\nxmlCPUs\n\n    array of XML descriptions of CPUs\nncpus\n\n    number of CPUs in xmlCPUs\nflags\n\n    bitwise-OR of [virConnectBaselineCPUFlags](libvirt-libvirt-host.html#virConnectBaselineCPUFlags)\nReturns\n\n    XML description of the computed CPU (caller frees) or NULL on error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6bbfbb2b-9927-41a7-b644-27482eb95d82": {"__data__": {"id_": "6bbfbb2b-9927-41a7-b644-27482eb95d82", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "8a6047a5-1b6b-437b-a28c-22693d223eda", "node_type": null, "metadata": {}, "hash": "45d0cd64f555aed5d04b906ef597dae5572003ce9206345c386dfcda021716c1"}, "3": {"node_id": "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0", "node_type": null, "metadata": {}, "hash": "59eec83b9d791afac00912ac23448325a8cff9c20260c55069236b984a54cc41"}}, "hash": "9ab4a25640498821ba2ec476ae28f857bbde1fba3492fcf1d7788bbf02552c22", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectClose`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectClose\t\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nThis function closes the connection to the Hypervisor. This should not be\ncalled if further interaction with the Hypervisor are needed especially if\nthere is running domain which need further monitoring by the application.\n\nConnections are reference counted; the count is explicitly increased by the\ninitial open ([virConnectOpen](libvirt-libvirt-host.html#virConnectOpen),\n[virConnectOpenAuth](libvirt-libvirt-host.html#virConnectOpenAuth), and the\nlike) as well as [virConnectRef](libvirt-libvirt-host.html#virConnectRef); it\nis also temporarily increased by other API that depend on the connection\nremaining alive. The open and every [virConnectRef](libvirt-libvirt-\nhost.html#virConnectRef) call should have a matching\n[virConnectClose](libvirt-libvirt-host.html#virConnectClose), and all other\nreferences will be released after the corresponding operation completes.\n\nconn\n\n    pointer to the hypervisor connection\nReturns\n\n    a positive number if at least 1 reference remains on success. The returned value should not be assumed to be the total reference count. A return of 0 implies no references remain and the connection is closed and memory has been freed. A return of -1 implies a failure. It is possible for the last [virConnectClose](libvirt-libvirt-host.html#virConnectClose) to return a positive value if some other object still has a temporary reference to the connection, but the application should not try to further use a connection after the [virConnectClose](libvirt-libvirt-host.html#virConnectClose) that matches the initial open.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0": {"__data__": {"id_": "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "6bbfbb2b-9927-41a7-b644-27482eb95d82", "node_type": null, "metadata": {}, "hash": "9ab4a25640498821ba2ec476ae28f857bbde1fba3492fcf1d7788bbf02552c22"}, "3": {"node_id": "7071e691-c6fa-44a3-8c35-92c59c0f0cd8", "node_type": null, "metadata": {}, "hash": "ce29bd758ec1b767a09ab9f82cabaec2d33b8f48e25078e7e0e5bda689f35a3b"}}, "hash": "59eec83b9d791afac00912ac23448325a8cff9c20260c55069236b984a54cc41", "text": "### `virConnectCloseFunc`\u00c2\u00b6\n\n    \n    \n    typedef void\t(*virConnectCloseFunc\t)\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int reason,\n    \t\t\t\t\t void * opaque)\n    \n\nA callback function to be registered, and called when the connection is\nclosed.\n\nconn\n\n    [virConnect](libvirt-libvirt-host.html#virConnect) connection\nreason\n\n    reason why the connection was closed (one of [virConnectCloseReason](libvirt-libvirt-common.html#virConnectCloseReason))\nopaque\n\n    opaque user data\n  \n\n### `virConnectCompareCPU`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectCompareCPU\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * xmlDesc,\n    \t\t\t\t\t unsigned int flags)\n\nCompares the given CPU description with the host CPU.\n\nSee [virConnectCompareHypervisorCPU](libvirt-libvirt-\nhost.html#virConnectCompareHypervisorCPU)() if you want to consider hypervisor\nabilities and compare the CPU to the CPU which a hypervisor is able to provide\non the host.\n\nconn\n\n    [virConnect](libvirt-libvirt-host.html#virConnect) connection\nxmlDesc\n\n    XML describing the CPU to compare with host CPU\nflags\n\n    bitwise-OR of [virConnectCompareCPUFlags](libvirt-libvirt-host.html#virConnectCompareCPUFlags)\nReturns\n\n    comparison result according to enum [virCPUCompareResult](libvirt-libvirt-host.html#virCPUCompareResult).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7071e691-c6fa-44a3-8c35-92c59c0f0cd8": {"__data__": {"id_": "7071e691-c6fa-44a3-8c35-92c59c0f0cd8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0", "node_type": null, "metadata": {}, "hash": "59eec83b9d791afac00912ac23448325a8cff9c20260c55069236b984a54cc41"}, "3": {"node_id": "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e", "node_type": null, "metadata": {}, "hash": "5955c91a75c63117318493fa8afbf567156db246ebd2f52b9c2c4a36833a0f62"}}, "hash": "ce29bd758ec1b767a09ab9f82cabaec2d33b8f48e25078e7e0e5bda689f35a3b", "text": "If [VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE](libvirt-libvirt-host.html#VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE) is used and `xmlDesc` CPU is incompatible with host CPU, this function will return [VIR_CPU_COMPARE_ERROR](libvirt-libvirt-host.html#VIR_CPU_COMPARE_ERROR) (instead of [VIR_CPU_COMPARE_INCOMPATIBLE](libvirt-libvirt-host.html#VIR_CPU_COMPARE_INCOMPATIBLE)) and the error will use the [VIR_ERR_CPU_INCOMPATIBLE](libvirt-virterror.html#VIR_ERR_CPU_INCOMPATIBLE) code with a message providing more details about the incompatibility.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectCompareHypervisorCPU`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectCompareHypervisorCPU\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * emulator,\n    \t\t\t\t\t const char * arch,\n    \t\t\t\t\t const char * machine,\n    \t\t\t\t\t const char * virttype,\n    \t\t\t\t\t const char * xmlCPU,\n    \t\t\t\t\t unsigned int flags)\n\nCompares the given CPU description with the CPU the specified hypervisor is\nable to provide on the host. Any of `emulator`, `arch`, `machine`, and\n`virttype` parameters may be NULL; libvirt will choose sensible defaults\ntailored to the host and its current configuration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e": {"__data__": {"id_": "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "7071e691-c6fa-44a3-8c35-92c59c0f0cd8", "node_type": null, "metadata": {}, "hash": "ce29bd758ec1b767a09ab9f82cabaec2d33b8f48e25078e7e0e5bda689f35a3b"}, "3": {"node_id": "b87f1f02-25fc-4794-825a-4542dfc81a37", "node_type": null, "metadata": {}, "hash": "f34ce35446925ecc882943d68634717ebfd399c3b5db6cd217d50e4c765cde00"}}, "hash": "5955c91a75c63117318493fa8afbf567156db246ebd2f52b9c2c4a36833a0f62", "text": "This is different from [virConnectCompareCPU](libvirt-libvirt-\nhost.html#virConnectCompareCPU)() which compares the CPU definition with the\nhost CPU without considering any specific hypervisor and its abilities.\n\nconn\n\n    pointer to the hypervisor connection\nemulator\n\n    path to the emulator binary\narch\n\n    CPU architecture\nmachine\n\n    machine type\nvirttype\n\n    virtualization type\nxmlCPU\n\n    XML describing the CPU to be compared\nflags\n\n    bitwise-OR of [virConnectCompareCPUFlags](libvirt-libvirt-host.html#virConnectCompareCPUFlags)\nReturns\n\n    comparison result according to enum [virCPUCompareResult](libvirt-libvirt-host.html#virCPUCompareResult). If [VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE](libvirt-libvirt-host.html#VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE) is used and `xmlCPU` is incompatible with the CPU the specified hypervisor is able to provide on the host, this function will return [VIR_CPU_COMPARE_ERROR](libvirt-libvirt-host.html#VIR_CPU_COMPARE_ERROR) (instead of [VIR_CPU_COMPARE_INCOMPATIBLE](libvirt-libvirt-host.html#VIR_CPU_COMPARE_INCOMPATIBLE)) and the error will use the [VIR_ERR_CPU_INCOMPATIBLE](libvirt-virterror.html#VIR_ERR_CPU_INCOMPATIBLE) code with a message providing more details about the incompatibility.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b87f1f02-25fc-4794-825a-4542dfc81a37": {"__data__": {"id_": "b87f1f02-25fc-4794-825a-4542dfc81a37", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e", "node_type": null, "metadata": {}, "hash": "5955c91a75c63117318493fa8afbf567156db246ebd2f52b9c2c4a36833a0f62"}, "3": {"node_id": "0b500aad-c078-4271-80aa-e01de1bafca9", "node_type": null, "metadata": {}, "hash": "e4a3c1cbebc99a1d00e1e21362b3e415eb7e6e3916b98e7e334c776d997b19be"}}, "hash": "f34ce35446925ecc882943d68634717ebfd399c3b5db6cd217d50e4c765cde00", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectGetCPUModelNames`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectGetCPUModelNames\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * arch,\n    \t\t\t\t\t char *** models,\n    \t\t\t\t\t unsigned int flags)\n\nGet the list of CPU models supported by libvirt for a specific architecture.\n\nThe returned list limits CPU models usable with libvirt (empty list means\nthere's no limit imposed by libvirt) and it does not reflect capabilities of\nany particular hypervisor. See the XML returned by\n[virConnectGetDomainCapabilities](libvirt-libvirt-\ndomain.html#virConnectGetDomainCapabilities)() for a list of CPU models\nsupported by libvirt for domains created on a specific hypervisor.\n\nconn\n\n    [virConnect](libvirt-libvirt-host.html#virConnect) connection\narch\n\n    Architecture\nmodels\n\n    Pointer to a variable to store the NULL-terminated array of the CPU models supported for the specified architecture. Each element and the array itself must be freed by the caller with free. Pass NULL if only the list length is needed.\nflags\n\n    extra flags; not used yet, so callers should always pass 0.\nReturns\n\n    -1 on error, number of elements in `models` on success (0 means libvirt accepts any CPU model).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0b500aad-c078-4271-80aa-e01de1bafca9": {"__data__": {"id_": "0b500aad-c078-4271-80aa-e01de1bafca9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "b87f1f02-25fc-4794-825a-4542dfc81a37", "node_type": null, "metadata": {}, "hash": "f34ce35446925ecc882943d68634717ebfd399c3b5db6cd217d50e4c765cde00"}, "3": {"node_id": "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20", "node_type": null, "metadata": {}, "hash": "9b123f4a3da96451ba2021c864d752c2b927868be91d1ab03e1ac1c10041684b"}}, "hash": "e4a3c1cbebc99a1d00e1e21362b3e415eb7e6e3916b98e7e334c776d997b19be", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectGetCapabilities`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectGetCapabilities\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nProvides capabilities of the hypervisor / driver.\n\nconn\n\n    pointer to the hypervisor connection\nReturns\n\n    NULL in case of error, or an XML string defining the capabilities. The client must free the returned string after use.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectGetHostname`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectGetHostname\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nThis returns a system hostname on which the hypervisor is running (based on\nthe result of the gethostname system call, but possibly expanded to a fully-\nqualified domain name via getaddrinfo). If we are connected to a remote\nsystem, then this returns the hostname of the remote system.\n\nconn\n\n    pointer to a hypervisor connection\nReturns\n\n    the hostname which must be freed by the caller, or NULL if there was an error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20": {"__data__": {"id_": "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "0b500aad-c078-4271-80aa-e01de1bafca9", "node_type": null, "metadata": {}, "hash": "e4a3c1cbebc99a1d00e1e21362b3e415eb7e6e3916b98e7e334c776d997b19be"}, "3": {"node_id": "510c62de-0e71-48b7-9bf0-130bd2f6c6a4", "node_type": null, "metadata": {}, "hash": "1f98d6341d201cf7d42546caa6c66ea7c2d2e5202895085881dd54158449d663"}}, "hash": "9b123f4a3da96451ba2021c864d752c2b927868be91d1ab03e1ac1c10041684b", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectGetLibVersion`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectGetLibVersion\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned long * libVer)\n\nProvides `libVer`, which is the version of libvirt used by the daemon running\non the `conn` host\n\nconn\n\n    pointer to the hypervisor connection\nlibVer\n\n    returns the libvirt library version used on the connection (OUT)\nReturns\n\n    -1 in case of failure, 0 otherwise, and values for `libVer` have the format major * 1,000,000 + minor * 1,000 + release.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectGetMaxVcpus`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectGetMaxVcpus\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t const char * type)\n\nProvides the maximum number of virtual CPUs supported for a guest VM of a\nspecific type. The 'type' parameter here corresponds to the 'type' attribute\nin the <domain> element of the XML. This API doesn't take emulator limits into\nconsideration, hence the returned value is not guaranteed to be usable. It is\nrecommended to use [virConnectGetDomainCapabilities](libvirt-libvirt-\ndomain.html#virConnectGetDomainCapabilities)() and look for \"<vcpu max='...'>\"\nin its output instead.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "510c62de-0e71-48b7-9bf0-130bd2f6c6a4": {"__data__": {"id_": "510c62de-0e71-48b7-9bf0-130bd2f6c6a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20", "node_type": null, "metadata": {}, "hash": "9b123f4a3da96451ba2021c864d752c2b927868be91d1ab03e1ac1c10041684b"}, "3": {"node_id": "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0", "node_type": null, "metadata": {}, "hash": "1f03ec584a5b3b0896256ce1c9af79ce28e576d852bdd35dae9eeafbc54083e6"}}, "hash": "1f98d6341d201cf7d42546caa6c66ea7c2d2e5202895085881dd54158449d663", "text": "conn\n\n    pointer to the hypervisor connection\ntype\n\n    value of the 'type' attribute in the <domain> element\nReturns\n\n    the maximum of virtual CPU or -1 in case of error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectGetSysinfo`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectGetSysinfo\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned int flags)\n\nThis returns the XML description of the sysinfo details for the host on which\nthe hypervisor is running, in the same format as the <sysinfo> element of a\ndomain XML. This information is generally available only for hypervisors\nrunning with root privileges.\n\nconn\n\n    pointer to a hypervisor connection\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    the XML string which must be freed by the caller, or NULL if there was an error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virConnectGetType`\u00c2\u00b6\n\n    \n    \n    const char *\tvirConnectGetType\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nGet the name of the Hypervisor driver used. This is merely the driver name;\nfor example, both KVM and QEMU guests are serviced by the driver for the\nqemu:// URI, so a return of \"QEMU\" does not indicate whether KVM acceleration\nis present. For more details about the hypervisor, use\n[virConnectGetCapabilities](libvirt-libvirt-\nhost.html#virConnectGetCapabilities)().", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0": {"__data__": {"id_": "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "510c62de-0e71-48b7-9bf0-130bd2f6c6a4", "node_type": null, "metadata": {}, "hash": "1f98d6341d201cf7d42546caa6c66ea7c2d2e5202895085881dd54158449d663"}, "3": {"node_id": "13b69377-ab2d-4412-b40b-ea34e2360974", "node_type": null, "metadata": {}, "hash": "fd3c0b4ec82c475e56d1d27f25550cd111c2599695cca563a7c374cfb3f2af3a"}}, "hash": "1f03ec584a5b3b0896256ce1c9af79ce28e576d852bdd35dae9eeafbc54083e6", "text": "conn\n\n    pointer to the hypervisor connection\nReturns\n\n    NULL in case of error, a static zero terminated string otherwise.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectGetURI`\u00c2\u00b6\n\n    \n    \n    char *\tvirConnectGetURI\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nThis returns the URI (name) of the hypervisor connection. Normally this is the\nsame as or similar to the string passed to the\nvirConnectOpen/virConnectOpenReadOnly call, but the driver may make the URI\ncanonical. If name == NULL was passed to [virConnectOpen](libvirt-libvirt-\nhost.html#virConnectOpen), then the driver will return a non-NULL URI which\ncan be used to connect to the same hypervisor later.\n\nconn\n\n    pointer to a hypervisor connection\nReturns\n\n    the URI string which must be freed by the caller, or NULL if there was an error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectGetVersion`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectGetVersion\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned long * hvVer)\n\nGet the version level of the Hypervisor running. This may work only with\nhypervisor call, i.e. with privileged access to the hypervisor, not with a\nRead-Only connection.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "13b69377-ab2d-4412-b40b-ea34e2360974": {"__data__": {"id_": "13b69377-ab2d-4412-b40b-ea34e2360974", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0", "node_type": null, "metadata": {}, "hash": "1f03ec584a5b3b0896256ce1c9af79ce28e576d852bdd35dae9eeafbc54083e6"}, "3": {"node_id": "6475c08b-89ad-4f27-823b-b56467d3070d", "node_type": null, "metadata": {}, "hash": "ca0888b331ef73713b18db3ec1af64bc71969cf3a7b2cd328507190ca9d81c09"}}, "hash": "fd3c0b4ec82c475e56d1d27f25550cd111c2599695cca563a7c374cfb3f2af3a", "text": "with privileged access to the hypervisor, not with a\nRead-Only connection.\n\nconn\n\n    pointer to the hypervisor connection\nhvVer\n\n    return value for the version of the running hypervisor (OUT)\nReturns\n\n    -1 in case of error, 0 otherwise. if the version can't be extracted by lack of capacities returns 0 and `hvVer` is 0, otherwise `hvVer` value is major * 1,000,000 + minor * 1,000 + release\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectIsAlive`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectIsAlive\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nDetermine if the connection to the hypervisor is still alive\n\nA connection will be classed as alive if it is either local, or running over a\nchannel (TCP or UNIX socket) which is not closed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6475c08b-89ad-4f27-823b-b56467d3070d": {"__data__": {"id_": "6475c08b-89ad-4f27-823b-b56467d3070d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "13b69377-ab2d-4412-b40b-ea34e2360974", "node_type": null, "metadata": {}, "hash": "fd3c0b4ec82c475e56d1d27f25550cd111c2599695cca563a7c374cfb3f2af3a"}, "3": {"node_id": "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb", "node_type": null, "metadata": {}, "hash": "7df46d14d99742dfc99498b42ffa9511ffe3aee0be9254bae1055776869afc5a"}}, "hash": "ca0888b331ef73713b18db3ec1af64bc71969cf3a7b2cd328507190ca9d81c09", "text": "conn\n\n    pointer to the connection object\nReturns\n\n    1 if alive, 0 if dead, -1 on error\n\n### `virConnectIsEncrypted`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectIsEncrypted\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nDetermine if the connection to the hypervisor is encrypted\n\nconn\n\n    pointer to the connection object\nReturns\n\n    1 if encrypted, 0 if not encrypted, -1 on error\n\n### `virConnectIsSecure`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectIsSecure\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nDetermine if the connection to the hypervisor is secure\n\nA connection will be classed as secure if it is either encrypted, or running\nover a channel which is not exposed to eavesdropping (eg a UNIX domain socket,\nor pipe)\n\nconn\n\n    pointer to the connection object\nReturns\n\n    1 if secure, 0 if not secure, -1 on error\n\n### `virConnectOpen`\u00c2\u00b6\n\n    \n    \n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpen\t\t(const char * name)\n\nThis function should be called first to get a connection to the Hypervisor and\nxen store\n\nIf `name` is NULL, if the LIBVIRT_DEFAULT_URI environment variable is set,\nthen it will be used. Otherwise if the client configuration file has the\n\"uri_default\" parameter set, then it will be used. Finally probing will be\ndone to determine a suitable default driver to activate. This involves trying\neach hypervisor in turn until one successfully opens.\n\nIf connecting to an unprivileged hypervisor driver which requires the libvirtd\ndaemon to be active, it will automatically be launched if not already running.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb": {"__data__": {"id_": "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "6475c08b-89ad-4f27-823b-b56467d3070d", "node_type": null, "metadata": {}, "hash": "ca0888b331ef73713b18db3ec1af64bc71969cf3a7b2cd328507190ca9d81c09"}, "3": {"node_id": "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4", "node_type": null, "metadata": {}, "hash": "a90f8d78fd70cb2846887ad630ae4f3160fbea3a901d57b36452022a425fbdb4"}}, "hash": "7df46d14d99742dfc99498b42ffa9511ffe3aee0be9254bae1055776869afc5a", "text": "This can be prevented by setting the environment variable LIBVIRT_AUTOSTART=0\n\nURIs are documented at <https://libvirt.org/uri.html>\n\n[virConnectClose](libvirt-libvirt-host.html#virConnectClose) should be used to\nrelease the resources after the connection is no longer needed.\n\nname\n\n    (optional) URI of the hypervisor\nReturns\n\n    a pointer to the hypervisor connection or NULL in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectOpenAuth`\u00c2\u00b6\n\n    \n    \n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpenAuth\t(const char * name,\n    \t\t\t\t\t [virConnectAuthPtr](libvirt-libvirt-host.html#virConnectAuthPtr) auth,\n    \t\t\t\t\t unsigned int flags)\n\nThis function should be called first to get a connection to the Hypervisor.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4": {"__data__": {"id_": "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb", "node_type": null, "metadata": {}, "hash": "7df46d14d99742dfc99498b42ffa9511ffe3aee0be9254bae1055776869afc5a"}, "3": {"node_id": "6354e734-fd8c-49e5-98da-b705c33b2c19", "node_type": null, "metadata": {}, "hash": "d9a319d0cbeaeccebbf4e2086bff110acf8f4a91c37181407a9beeaabdbfca0a"}}, "hash": "a90f8d78fd70cb2846887ad630ae4f3160fbea3a901d57b36452022a425fbdb4", "text": "If\nnecessary, authentication will be performed fetching credentials via the\ncallback\n\nSee [virConnectOpen](libvirt-libvirt-host.html#virConnectOpen) for notes about\nenvironment variables which can have an effect on opening drivers and freeing\nthe connection resources\n\nURIs are documented at <https://libvirt.org/uri.html>\n\nname\n\n    (optional) URI of the hypervisor\nauth\n\n    Authenticate callback parameters\nflags\n\n    bitwise-OR of [virConnectFlags](libvirt-libvirt-host.html#virConnectFlags)\nReturns\n\n    a pointer to the hypervisor connection or NULL in case of error\n\n### `virConnectOpenReadOnly`\u00c2\u00b6\n\n    \n    \n    [virConnectPtr](libvirt-libvirt-host.html#virConnectPtr)\tvirConnectOpenReadOnly\t(const char * name)\n\nThis function should be called first to get a restricted connection to the\nlibrary functionalities. The set of APIs usable are then restricted on the\navailable methods to control the domains.\n\nSee [virConnectOpen](libvirt-libvirt-host.html#virConnectOpen) for notes about\nenvironment variables which can have an effect on opening drivers and freeing\nthe connection resources\n\nURIs are documented at <https://libvirt.org/uri.html>\n\nname\n\n    (optional) URI of the hypervisor\nReturns\n\n    a pointer to the hypervisor connection or NULL in case of error\n\n### `virConnectRef`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectRef\t\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nIncrement the reference count on the connection. For each additional call to\nthis method, there shall be a corresponding call to [virConnectClose](libvirt-\nlibvirt-host.html#virConnectClose) to release the reference count, once the\ncaller no longer needs the reference to this object.\n\nThis method is typically useful for applications where multiple threads are\nusing a connection, and it is required that the connection remain open until\nall threads have finished using it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6354e734-fd8c-49e5-98da-b705c33b2c19": {"__data__": {"id_": "6354e734-fd8c-49e5-98da-b705c33b2c19", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4", "node_type": null, "metadata": {}, "hash": "a90f8d78fd70cb2846887ad630ae4f3160fbea3a901d57b36452022a425fbdb4"}, "3": {"node_id": "269dc7ad-d7ca-474d-9c4f-7d2e61eba086", "node_type": null, "metadata": {}, "hash": "fa706e395f2180e7ccac94ed8c2a3b2158824a44ab0a67e47f641828e7f9b31c"}}, "hash": "d9a319d0cbeaeccebbf4e2086bff110acf8f4a91c37181407a9beeaabdbfca0a", "text": "ie, each new thread using a connection\nwould increment the reference count.\n\nconn\n\n    the connection to hold a reference on\nReturns\n\n    0 in case of success, -1 in case of failure\n\n### `virConnectRegisterCloseCallback`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectRegisterCloseCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virConnectCloseFunc](libvirt-libvirt-host.html#virConnectCloseFunc) cb,\n    \t\t\t\t\t void * opaque,\n    \t\t\t\t\t [virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) freecb)\n\nRegisters a callback to be invoked when the connection is closed. This\ncallback is invoked when there is any condition that causes the socket\nconnection to the hypervisor to be closed.\n\nThis function is only applicable to hypervisor drivers which maintain a\npersistent open connection. Drivers which open a new connection for every\noperation will not invoke this.\n\nThe `freecb` must not invoke any other libvirt public APIs, since it is not\ncalled from a re-entrant safe context.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "269dc7ad-d7ca-474d-9c4f-7d2e61eba086": {"__data__": {"id_": "269dc7ad-d7ca-474d-9c4f-7d2e61eba086", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "6354e734-fd8c-49e5-98da-b705c33b2c19", "node_type": null, "metadata": {}, "hash": "d9a319d0cbeaeccebbf4e2086bff110acf8f4a91c37181407a9beeaabdbfca0a"}, "3": {"node_id": "9d35bd40-163c-4ed9-9001-b327034b5797", "node_type": null, "metadata": {}, "hash": "2a3e2eb7d4cc1e1bfbd357f46f90734af6687eade59e2688cf78b414abf1954a"}}, "hash": "fa706e395f2180e7ccac94ed8c2a3b2158824a44ab0a67e47f641828e7f9b31c", "text": "conn\n\n    pointer to connection object\ncb\n\n    callback to invoke upon close\nopaque\n\n    user data to pass to `cb`\nfreecb\n\n    callback to free `opaque`\nReturns\n\n    0 on success, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virConnectSetIdentity`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectSetIdentity\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nOverride the default identity information associated with the connection. When\nconnecting to a stateful driver over a UNIX socket, the daemon will\ninterrogate the remote end of the UNIX socket to acquire the application's\nidentity. This identity is used for the fine grained access control checks on\nAPI calls.\n\nThere may be times when application is operating on behalf of a variety of\nusers, and thus the identity that the application runs as is not appropriate\nfor access control checks. In this case, if the application is considered\ntrustworthy, it can supply alternative identity information.\n\nThe driver may reject the request to change the identity on a connection if\nthe application is not trustworthy.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9d35bd40-163c-4ed9-9001-b327034b5797": {"__data__": {"id_": "9d35bd40-163c-4ed9-9001-b327034b5797", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "269dc7ad-d7ca-474d-9c4f-7d2e61eba086", "node_type": null, "metadata": {}, "hash": "fa706e395f2180e7ccac94ed8c2a3b2158824a44ab0a67e47f641828e7f9b31c"}, "3": {"node_id": "f8f06fea-f766-49b1-b08f-5f3c296b3a01", "node_type": null, "metadata": {}, "hash": "1a8dc499e429ce398498b41c0af001a5b5e73f62b9e271db4e750a41860bed40"}}, "hash": "2a3e2eb7d4cc1e1bfbd357f46f90734af6687eade59e2688cf78b414abf1954a", "text": "conn\n\n    pointer to the hypervisor connection\nparams\n\n    parameters containing the identity attributes\nnparams\n\n    size of `params` array\nflags\n\n    currently unused, pass 0\nReturns\n\n    0 if the identity change was accepted, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virConnectSetKeepAlive`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectSetKeepAlive\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int interval,\n    \t\t\t\t\t unsigned int count)\n\nStart sending keepalive messages after `interval` seconds of inactivity and\nconsider the connection to be broken when no response is received after\n`count` keepalive messages sent in a row. In other words, sending count + 1\nkeepalive message results in closing the connection. When `interval` is <= 0,\nno keepalive messages will be sent. When `count` is 0, the connection will be\nautomatically closed after `interval` seconds of inactivity without sending\nany keepalive messages.\n\nNote: The client has to implement and run an event loop with\n[virEventRegisterImpl](libvirt-libvirt-event.html#virEventRegisterImpl)() or\n[virEventRegisterDefaultImpl](libvirt-libvirt-\nevent.html#virEventRegisterDefaultImpl)() to be able to use keepalive\nmessages. Failure to do so may result in connections being closed\nunexpectedly.\n\nNote: This API function controls only keepalive messages sent by the client.\nIf the server is configured to use keepalive you still need to run the event\nloop to respond to them, even if you disable keepalives by this function.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f8f06fea-f766-49b1-b08f-5f3c296b3a01": {"__data__": {"id_": "f8f06fea-f766-49b1-b08f-5f3c296b3a01", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "9d35bd40-163c-4ed9-9001-b327034b5797", "node_type": null, "metadata": {}, "hash": "2a3e2eb7d4cc1e1bfbd357f46f90734af6687eade59e2688cf78b414abf1954a"}, "3": {"node_id": "25484219-8985-4b18-82e9-b0753d52551d", "node_type": null, "metadata": {}, "hash": "0fb887cb9231eb51b3ac9d9f71d5599f8a1437509af21ae668bded7549de0e60"}}, "hash": "1a8dc499e429ce398498b41c0af001a5b5e73f62b9e271db4e750a41860bed40", "text": "conn\n\n    pointer to a hypervisor connection\ninterval\n\n    number of seconds of inactivity before a keepalive message is sent\ncount\n\n    number of messages that can be sent in a row\nReturns\n\n    -1 on error, 0 on success, 1 when remote party doesn't support keepalive messages.\n\n### `virConnectUnregisterCloseCallback`\u00c2\u00b6\n\n    \n    \n    int\tvirConnectUnregisterCloseCallback\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t\t [virConnectCloseFunc](libvirt-libvirt-host.html#virConnectCloseFunc) cb)\n\nUnregisters the callback previously set with the\n[virConnectRegisterCloseCallback](libvirt-libvirt-\nhost.html#virConnectRegisterCloseCallback) method. The callback will no longer\nreceive notifications when the connection closes. If a\n[virFreeCallback](libvirt-libvirt-common.html#virFreeCallback) was provided at\ntime of registration, it will be invoked\n\nconn\n\n    pointer to connection object\ncb\n\n    pointer to the current registered callback\nReturns\n\n    0 on success, -1 on error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[getattr](../acl.html#perm_connect_getattr)| -  \n  \n### `virGetVersion`\u00c2\u00b6\n\n    \n    \n    int\tvirGetVersion\t\t\t(unsigned long * libVer,\n    \t\t\t\t\t const char * type,\n    \t\t\t\t\t unsigned long * typeVer)\n\nProvides version information. `libVer` is the version of the library and will\nalways be set unless an error occurs, in which case an error code will be\nreturned.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "25484219-8985-4b18-82e9-b0753d52551d": {"__data__": {"id_": "25484219-8985-4b18-82e9-b0753d52551d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "f8f06fea-f766-49b1-b08f-5f3c296b3a01", "node_type": null, "metadata": {}, "hash": "1a8dc499e429ce398498b41c0af001a5b5e73f62b9e271db4e750a41860bed40"}, "3": {"node_id": "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6", "node_type": null, "metadata": {}, "hash": "738449af9e898372445c082cc0425fff57a29b60255743f7e77b034048920655"}}, "hash": "0fb887cb9231eb51b3ac9d9f71d5599f8a1437509af21ae668bded7549de0e60", "text": "`typeVer` exists for historical compatibility; if it is not NULL it\nwill duplicate `libVer` (it was originally intended to return hypervisor\ninformation based on `type`, but due to the design of remote clients this is\nnot reliable). To get the version of the running hypervisor use the\n[virConnectGetVersion](libvirt-libvirt-host.html#virConnectGetVersion)()\nfunction instead. To get the libvirt library version used by a connection use\nthe [virConnectGetLibVersion](libvirt-libvirt-\nhost.html#virConnectGetLibVersion)() instead.\n\nThis function includes a call to [virInitialize](libvirt-libvirt-\nhost.html#virInitialize)() when necessary.\n\nlibVer\n\n    return value for the library version (OUT)\ntype\n\n    ignored; pass NULL\ntypeVer\n\n    pass NULL; for historical purposes duplicates `libVer` if non-NULL\nReturns\n\n    -1 in case of failure, 0 otherwise, and values for `libVer` and `typeVer` have the format major * 1,000,000 + minor * 1,000 + release.\n\n### `virInitialize`\u00c2\u00b6\n\n    \n    \n    int\tvirInitialize\t\t\t(void)\n\nInitialize the library.\n\nThis method is invoked automatically by any of the [virConnectOpen](libvirt-\nlibvirt-host.html#virConnectOpen)() API calls, and by [virGetVersion](libvirt-\nlibvirt-host.html#virGetVersion)(). Since release 1.0.0, there is no need to\ncall this method even in a multithreaded application, since initialization is\nperformed in a thread safe manner; but applications using an older version of\nthe library should manually call this before setting up competing threads that\nattempt [virConnectOpen](libvirt-libvirt-host.html#virConnectOpen) in\nparallel.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6": {"__data__": {"id_": "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "25484219-8985-4b18-82e9-b0753d52551d", "node_type": null, "metadata": {}, "hash": "0fb887cb9231eb51b3ac9d9f71d5599f8a1437509af21ae668bded7549de0e60"}, "3": {"node_id": "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c", "node_type": null, "metadata": {}, "hash": "f964a1e033bf3705cd602063f8a73b76e2e85e5702ccf9c59f4eb66c08e556a1"}}, "hash": "738449af9e898372445c082cc0425fff57a29b60255743f7e77b034048920655", "text": "The only other time it would be necessary to call [virInitialize](libvirt-\nlibvirt-host.html#virInitialize) is if the application did not invoke\n[virConnectOpen](libvirt-libvirt-host.html#virConnectOpen) as its first API\ncall, such as when calling [virEventRegisterImpl](libvirt-libvirt-\nevent.html#virEventRegisterImpl)() before setting up connections, or when\nusing [virSetErrorFunc](libvirt-virterror.html#virSetErrorFunc)() to alter\nerror reporting of the first connection attempt.\n\nReturns\n\n    0 in case of success, -1 in case of error\n\n### `virNodeAllocPages`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeAllocPages\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned int npages,\n    \t\t\t\t\t unsigned int * pageSizes,\n    \t\t\t\t\t unsigned long long * pageCounts,\n    \t\t\t\t\t int startCell,\n    \t\t\t\t\t unsigned int cellCount,\n    \t\t\t\t\t unsigned int flags)\n\nSometimes, when trying to start a new domain, it may be necessary to reserve\nsome huge pages in the system pool which can be then allocated by the domain.\nThis API serves that purpose. On its input, `pageSizes` and `pageCounts` are\narrays of the same cardinality of `npages`. The `pageSizes` contains page\nsizes which are to be allocated in the system (the size unit is kibibytes),\nand `pageCounts` then contains the number of pages to reserve. If `flags` is 0\n([VIR_NODE_ALLOC_PAGES_ADD](libvirt-libvirt-\nhost.html#VIR_NODE_ALLOC_PAGES_ADD)), each pool corresponding to `pageSizes`\ngrows by the number of pages specified in the corresponding `pageCounts`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c": {"__data__": {"id_": "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6", "node_type": null, "metadata": {}, "hash": "738449af9e898372445c082cc0425fff57a29b60255743f7e77b034048920655"}, "3": {"node_id": "30184b58-2f0d-4edb-bc7f-6bd03fdf299e", "node_type": null, "metadata": {}, "hash": "d2bfd4587210460c008217b5313456b5b0f78e4fd7c6d512539dfda9192559bd"}}, "hash": "f964a1e033bf3705cd602063f8a73b76e2e85e5702ccf9c59f4eb66c08e556a1", "text": "If\n`flags` contains [VIR_NODE_ALLOC_PAGES_SET](libvirt-libvirt-\nhost.html#VIR_NODE_ALLOC_PAGES_SET), each pool mentioned is resized to the\ngiven number of pages. The pages pool can be allocated over several NUMA nodes\nat once, just point at `startCell` and tell how many subsequent NUMA nodes\nshould be taken in. As a special case, if `startCell` is equal to negative\none, then kernel is instructed to allocate the pages over all NUMA nodes\nproportionally.\n\nconn\n\n    pointer to the hypervisor connection\nnpages\n\n    number of items in the `pageSizes` and `pageCounts` arrays\npageSizes\n\n    which huge page sizes to allocate\npageCounts\n\n    how many pages should be allocated\nstartCell\n\n    index of first cell to allocate pages on\ncellCount\n\n    number of consecutive cells to allocate pages on\nflags\n\n    extra flags; binary-OR of [virNodeAllocPagesFlags](libvirt-libvirt-host.html#virNodeAllocPagesFlags)\nReturns\n\n    the number of nodes successfully adjusted or -1 in case of an error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virNodeGetCPUMap`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetCPUMap\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned char ** cpumap,\n    \t\t\t\t\t unsigned int * online,\n    \t\t\t\t\t unsigned int flags)\n\nGet CPU map of host node CPUs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "30184b58-2f0d-4edb-bc7f-6bd03fdf299e": {"__data__": {"id_": "30184b58-2f0d-4edb-bc7f-6bd03fdf299e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c", "node_type": null, "metadata": {}, "hash": "f964a1e033bf3705cd602063f8a73b76e2e85e5702ccf9c59f4eb66c08e556a1"}, "3": {"node_id": "ef32cb72-824d-44ca-b858-ccd913e0f21a", "node_type": null, "metadata": {}, "hash": "d226f0ecd2c8aba034764cd62403f6e73498daad345231f2504c76a5bfe74141"}}, "hash": "d2bfd4587210460c008217b5313456b5b0f78e4fd7c6d512539dfda9192559bd", "text": "conn\n\n    pointer to the hypervisor connection\ncpumap\n\n    optional pointer to a bit map of real CPUs on the host node (in 8-bit bytes) (OUT) In case of success each bit set to 1 means that corresponding CPU is online. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit. The bit map is allocated by [virNodeGetCPUMap](libvirt-libvirt-host.html#virNodeGetCPUMap) and needs to be released using free() by the caller.\nonline\n\n    optional number of online CPUs in cpumap (OUT) Contains the number of online CPUs if the call was successful.\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    number of CPUs present on the host node, or -1 if there was an error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetCPUStats`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetCPUStats\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int cpuNum,\n    \t\t\t\t\t [virNodeCPUStatsPtr](libvirt-libvirt-host.html#virNodeCPUStatsPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nThis function provides individual cpu statistics of the node. If you want to\nget total cpu statistics of the node, you must specify\n[VIR_NODE_CPU_STATS_ALL_CPUS](libvirt-libvirt-\nhost.html#VIR_NODE_CPU_STATS_ALL_CPUS) to `cpuNum`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ef32cb72-824d-44ca-b858-ccd913e0f21a": {"__data__": {"id_": "ef32cb72-824d-44ca-b858-ccd913e0f21a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "30184b58-2f0d-4edb-bc7f-6bd03fdf299e", "node_type": null, "metadata": {}, "hash": "d2bfd4587210460c008217b5313456b5b0f78e4fd7c6d512539dfda9192559bd"}, "3": {"node_id": "013af4e5-e4f6-4739-a331-234920a73988", "node_type": null, "metadata": {}, "hash": "8562a830ff82ba1e9968efe51cda603437a16343a1845346fdfb9f724584eb28"}}, "hash": "d226f0ecd2c8aba034764cd62403f6e73498daad345231f2504c76a5bfe74141", "text": "The `params` array will be\nfilled with the values equal to the number of parameters suggested by\n`nparams`\n\nAs the value of `nparams` is dynamic, call the API setting `nparams` to 0 and\n`params` as NULL, the API returns the number of parameters supported by the HV\nby updating `nparams` on SUCCESS. The caller should then allocate `params`\narray, i.e. (sizeof(`sizeofvirNodeCPUStats` * `nparams`) bytes and call the\nAPI again.\n\nHere is a sample code snippet:\n\n    \n    \n    if (virNodeGetCPUStats(conn, cpuNum, NULL, &nparams, 0) == 0 &&\n        nparams != 0) {\n        if ((params = malloc(sizeof(virNodeCPUStats) * nparams)) == NULL)\n            goto error;\n        memset(params, 0, sizeof(virNodeCPUStats) * nparams);\n        if (virNodeGetCPUStats(conn, cpuNum, params, &nparams, 0))\n            goto error;\n    }\n\nThis function doesn't require privileged access to the hypervisor. This\nfunction expects the caller to allocate the `params`.\n\nCPU time Statistics:\n\n[VIR_NODE_CPU_STATS_KERNEL](libvirt-libvirt-\nhost.html#VIR_NODE_CPU_STATS_KERNEL): The cumulative CPU time which spends by\nkernel, when the node booting up.(nanoseconds)\n[VIR_NODE_CPU_STATS_USER](libvirt-libvirt-host.html#VIR_NODE_CPU_STATS_USER):\nThe cumulative CPU time which spends by user processes, when the node booting\nup.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "013af4e5-e4f6-4739-a331-234920a73988": {"__data__": {"id_": "013af4e5-e4f6-4739-a331-234920a73988", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "ef32cb72-824d-44ca-b858-ccd913e0f21a", "node_type": null, "metadata": {}, "hash": "d226f0ecd2c8aba034764cd62403f6e73498daad345231f2504c76a5bfe74141"}, "3": {"node_id": "4739b0de-90c6-4635-8fd3-e9d6979fe17a", "node_type": null, "metadata": {}, "hash": "0658d55063e5934372d88e9ced9471a041ddc6c348cb94673a4899b06802209d"}}, "hash": "8562a830ff82ba1e9968efe51cda603437a16343a1845346fdfb9f724584eb28", "text": "(nanoseconds) [VIR_NODE_CPU_STATS_IDLE](libvirt-libvirt-\nhost.html#VIR_NODE_CPU_STATS_IDLE): The cumulative idle CPU time, when the\nnode booting up.(nanoseconds) [VIR_NODE_CPU_STATS_IOWAIT](libvirt-libvirt-\nhost.html#VIR_NODE_CPU_STATS_IOWAIT): The cumulative I/O wait CPU time, when\nthe node booting up.(nanoseconds) [VIR_NODE_CPU_STATS_UTILIZATION](libvirt-\nlibvirt-host.html#VIR_NODE_CPU_STATS_UTILIZATION): The CPU utilization. The\nusage value is in percent and 100% represents all CPUs on the server.\n\nconn\n\n    pointer to the hypervisor connection.\ncpuNum\n\n    number of node cpu. ([VIR_NODE_CPU_STATS_ALL_CPUS](libvirt-libvirt-host.html#VIR_NODE_CPU_STATS_ALL_CPUS) means total cpu statistics)\nparams\n\n    pointer to node cpu time parameter objects\nnparams\n\n    number of node cpu time parameter (this value should be same or less than the number of parameters supported)\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    -1 in case of error, 0 in case of success.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4739b0de-90c6-4635-8fd3-e9d6979fe17a": {"__data__": {"id_": "4739b0de-90c6-4635-8fd3-e9d6979fe17a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "013af4e5-e4f6-4739-a331-234920a73988", "node_type": null, "metadata": {}, "hash": "8562a830ff82ba1e9968efe51cda603437a16343a1845346fdfb9f724584eb28"}, "3": {"node_id": "5aabc438-0d8f-49aa-8c35-a1c20a08fb92", "node_type": null, "metadata": {}, "hash": "f7105f927b1f098346e6f145d79693e0f1a4d6764168750951c5935eb868291d"}}, "hash": "0658d55063e5934372d88e9ced9471a041ddc6c348cb94673a4899b06802209d", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetCellsFreeMemory`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetCellsFreeMemory\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned long long * freeMems,\n    \t\t\t\t\t int startCell,\n    \t\t\t\t\t int maxCells)\n\nThis call returns the amount of free memory in one or more NUMA cells. The\n`freeMems` array must be allocated by the caller and will be filled with the\namount of free memory in bytes for each cell requested, starting with\nstartCell (in freeMems[0]), up to either (startCell + maxCells), or the number\nof additional cells in the node, whichever is smaller.\n\nconn\n\n    pointer to the hypervisor connection\nfreeMems\n\n    pointer to the array of unsigned long long\nstartCell\n\n    index of first cell to return freeMems info on.\nmaxCells\n\n    Maximum number of cells for which freeMems information can be returned.\nReturns\n\n    the number of entries filled in freeMems, or -1 in case of error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetFreeMemory`\u00c2\u00b6\n\n    \n    \n    unsigned long long\tvirNodeGetFreeMemory\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn)\n\nprovides the free memory available on the Node Note: most libvirt APIs provide\nmemory sizes in kibibytes, but in this function the returned value is in\nbytes. Divide by 1024 as necessary.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5aabc438-0d8f-49aa-8c35-a1c20a08fb92": {"__data__": {"id_": "5aabc438-0d8f-49aa-8c35-a1c20a08fb92", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "4739b0de-90c6-4635-8fd3-e9d6979fe17a", "node_type": null, "metadata": {}, "hash": "0658d55063e5934372d88e9ced9471a041ddc6c348cb94673a4899b06802209d"}, "3": {"node_id": "2e15ce01-c37e-4fc1-aa7c-a399c537f7af", "node_type": null, "metadata": {}, "hash": "746affc326e3da2b8c9debacefa5982a0fe4391357c0ad4f634fa8c7d2bd0cb8"}}, "hash": "f7105f927b1f098346e6f145d79693e0f1a4d6764168750951c5935eb868291d", "text": "Divide by 1024 as necessary.\n\nconn\n\n    pointer to the hypervisor connection\nReturns\n\n    the available free memory in bytes or 0 in case of error\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetFreePages`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetFreePages\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned int npages,\n    \t\t\t\t\t unsigned int * pages,\n    \t\t\t\t\t int startCell,\n    \t\t\t\t\t unsigned int cellCount,\n    \t\t\t\t\t unsigned long long * counts,\n    \t\t\t\t\t unsigned int flags)\n\nThis calls queries the host system on free pages of specified size. For the\ninput, `pages` is expected to be filled with pages that caller is interested\nin (the size unit is kibibytes, so e.g. pass 2048 for 2MB), then `startcell`\nrefers to the first NUMA node that info should be collected from, and\n`cellcount` tells how many consecutive nodes should be queried. On the\nfunction output, `counts` is filled with desired information, where items are\ngrouped by NUMA node. So from `counts[0]` till `counts[npages`s - 1] you'll\nfind count for the first node (`startcell`), then from `counts[npages]`] till\n`count[2` * `npages` \\- 1] you'll find info for the (`startcell` \\+ 1) node,\nand so on. It's callers responsibility to allocate the `counts` array.\n\nExample how to use this API:\n\n    \n    \n    unsigned int pages[] = { 4, 2048,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2e15ce01-c37e-4fc1-aa7c-a399c537f7af": {"__data__": {"id_": "2e15ce01-c37e-4fc1-aa7c-a399c537f7af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "5aabc438-0d8f-49aa-8c35-a1c20a08fb92", "node_type": null, "metadata": {}, "hash": "f7105f927b1f098346e6f145d79693e0f1a4d6764168750951c5935eb868291d"}, "3": {"node_id": "df4e3efe-d6ac-44e7-a829-10aa07630547", "node_type": null, "metadata": {}, "hash": "601c5d3fdbfff50aec918040f3b78159155b38dfb348952c5dfe54e86edf9099"}}, "hash": "746affc326e3da2b8c9debacefa5982a0fe4391357c0ad4f634fa8c7d2bd0cb8", "text": "2048, 1048576}\n    unsigned int npages = G_N_ELEMENTS(pages);\n    int startcell = 0;\n    unsigned int cellcount = 2;\n    \n    unsigned long long counts = malloc(sizeof(long long) * npages * cellcount);\n    \n    virNodeGetFreePages(conn, pages, npages,\n                        startcell, cellcount, counts, 0);\n    \n    for (i = 0 ; i < cellcount ; i++) {\n        fprintf(stdout, \"Cell %d\\n\", startcell + i);\n        for (j = 0 ; j < npages ; j++) {\n           fprintf(stdout, \"  Page size=%d count=%d bytes=%llu\\n\",\n                   pages[j], counts[(i * npages) +  j],\n                   pages[j] * counts[(i * npages) +  j]);", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df4e3efe-d6ac-44e7-a829-10aa07630547": {"__data__": {"id_": "df4e3efe-d6ac-44e7-a829-10aa07630547", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "2e15ce01-c37e-4fc1-aa7c-a399c537f7af", "node_type": null, "metadata": {}, "hash": "746affc326e3da2b8c9debacefa5982a0fe4391357c0ad4f634fa8c7d2bd0cb8"}, "3": {"node_id": "4743b490-c7b0-45cf-831a-50821ebb701f", "node_type": null, "metadata": {}, "hash": "363dd34d2c56711dcf894553fe3a6e75d1facaed4204fee298956ad440d6b198"}}, "hash": "601c5d3fdbfff50aec918040f3b78159155b38dfb348952c5dfe54e86edf9099", "text": "}\n    }\n    \n    This little code snippet will produce something like this:\n    Cell 0\n     Page size=4096 count=300 bytes=1228800\n     Page size=2097152 count=0 bytes=0\n     Page size=1073741824 count=1 bytes=1073741824\n    Cell 1\n     Page size=4096 count=0 bytes=0\n     Page size=2097152 count=20 bytes=41943040\n     Page size=1073741824 count=0 bytes=0\n\nconn\n\n    pointer to the hypervisor connection\nnpages\n\n    number of items in the `pages` array\npages\n\n    page sizes to query\nstartCell\n\n    index of first cell to return free pages info on.\ncellCount\n\n    maximum number of cells for which free pages information can be returned.\ncounts\n\n    returned counts of free pages\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    the number of entries filled in `counts` or -1 in case of error.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetInfo\t\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virNodeInfoPtr](libvirt-libvirt-host.html#virNodeInfoPtr) info)\n\nExtract hardware information about the node.\n\nUse of this API is strongly discouraged as the information provided is not\nguaranteed to be accurate on all hardware platforms.\n\nThe mHZ value merely reflects the speed that the first CPU in the machine is\ncurrently running at. This speed may vary across CPUs and changes continually\nas the host OS throttles.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4743b490-c7b0-45cf-831a-50821ebb701f": {"__data__": {"id_": "4743b490-c7b0-45cf-831a-50821ebb701f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "df4e3efe-d6ac-44e7-a829-10aa07630547", "node_type": null, "metadata": {}, "hash": "601c5d3fdbfff50aec918040f3b78159155b38dfb348952c5dfe54e86edf9099"}, "3": {"node_id": "c5ba7e63-fcca-4011-b5c5-523fe68fa005", "node_type": null, "metadata": {}, "hash": "a5833a882bb0f7115cd925aa25abedc943ce5912b3ef70d8147379f43cbb20d3"}}, "hash": "363dd34d2c56711dcf894553fe3a6e75d1facaed4204fee298956ad440d6b198", "text": "This speed may vary across CPUs and changes continually\nas the host OS throttles.\n\nThe nodes/sockets/cores/threads data is potentially inaccurate as it assumes a\nsymmetric installation. If one NUMA node has more sockets populated that\nanother NUMA node this information will be wrong. It is also not able to\nreport about CPU dies.\n\nApplications are recommended to use the [virConnectGetCapabilities](libvirt-\nlibvirt-host.html#virConnectGetCapabilities)() call instead, which provides\nall the information except CPU mHZ, in a more accurate representation.\n\nconn\n\n    pointer to the hypervisor connection\ninfo\n\n    pointer to a [virNodeInfo](libvirt-libvirt-host.html#virNodeInfo) structure allocated by the user\nReturns\n\n    0 in case of success and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetMemoryParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetMemoryParameters\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nGet all node memory parameters (parameters unsupported by OS will be omitted).\nOn input, `nparams` gives the size of the `params` array; on output, `nparams`\ngives how many slots were filled with parameter information, which might be\nless but will not exceed the input value.\n\nAs a special case, calling with `params` as NULL and `nparams` as 0 on input\nwill cause `nparams` on output to contain the number of parameters supported\nby the hypervisor. The caller should then allocate `params` array, i.e.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c5ba7e63-fcca-4011-b5c5-523fe68fa005": {"__data__": {"id_": "c5ba7e63-fcca-4011-b5c5-523fe68fa005", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "4743b490-c7b0-45cf-831a-50821ebb701f", "node_type": null, "metadata": {}, "hash": "363dd34d2c56711dcf894553fe3a6e75d1facaed4204fee298956ad440d6b198"}, "3": {"node_id": "02ab8f80-4a6b-49ff-ada7-bf82356ddebc", "node_type": null, "metadata": {}, "hash": "602cd1758add8ad87fef6e9b23dc02a82330b776e7efcc835afbe86d0eadc683"}}, "hash": "a5833a882bb0f7115cd925aa25abedc943ce5912b3ef70d8147379f43cbb20d3", "text": "The caller should then allocate `params` array, i.e.\n(sizeof(`sizeofvirTypedParameter` * `nparams`) bytes and call the API again.\nSee [virDomainGetMemoryParameters](libvirt-libvirt-\ndomain.html#virDomainGetMemoryParameters)() for an equivalent usage example.\n\nconn\n\n    pointer to the hypervisor connection\nparams\n\n    pointer to memory parameter object (return value, allocated by the caller)\nnparams\n\n    pointer to number of memory parameters; input and output\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, and -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetMemoryStats`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetMemoryStats\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t int cellNum,\n    \t\t\t\t\t [virNodeMemoryStatsPtr](libvirt-libvirt-host.html#virNodeMemoryStatsPtr) params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nThis function provides memory stats of the node. If you want to get total\nmemory statistics of the node, you must specify\n[VIR_NODE_MEMORY_STATS_ALL_CELLS](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_ALL_CELLS) to `cellNum`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "02ab8f80-4a6b-49ff-ada7-bf82356ddebc": {"__data__": {"id_": "02ab8f80-4a6b-49ff-ada7-bf82356ddebc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "c5ba7e63-fcca-4011-b5c5-523fe68fa005", "node_type": null, "metadata": {}, "hash": "a5833a882bb0f7115cd925aa25abedc943ce5912b3ef70d8147379f43cbb20d3"}, "3": {"node_id": "6f77ac31-6018-4ca1-a8b2-fa81283e965e", "node_type": null, "metadata": {}, "hash": "c2d8549994317ed7960dbcfc0519f0e55911bece2e492f1c2d8b00ad39dd2783"}}, "hash": "602cd1758add8ad87fef6e9b23dc02a82330b776e7efcc835afbe86d0eadc683", "text": "The `params` array\nwill be filled with the values equal to the number of stats suggested by\n`nparams`\n\nAs the value of `nparams` is dynamic, call the API setting `nparams` to 0 and\n`params` as NULL, the API returns the number of parameters supported by the HV\nby updating `nparams` on SUCCESS. The caller should then allocate `params`\narray, i.e. (sizeof(`sizeofvirNodeMemoryStats` * `nparams`) bytes and call the\nAPI again.\n\nHere is the sample code snippet:\n\n    \n    \n    if (virNodeGetMemoryStats(conn, cellNum, NULL, &nparams, 0) == 0 &&\n        nparams != 0) {\n        if ((params = malloc(sizeof(virNodeMemoryStats) * nparams)) == NULL)\n            goto error;\n        memset(params, cellNum, 0, sizeof(virNodeMemoryStats) * nparams);\n        if (virNodeGetMemoryStats(conn, params, &nparams, 0))\n            goto error;\n    }\n\nThis function doesn't require privileged access to the hypervisor. This\nfunction expects the caller to allocate the `params`.\n\nMemory Stats:\n\n[VIR_NODE_MEMORY_STATS_TOTAL](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_TOTAL): The total memory usage.(KB)\n[VIR_NODE_MEMORY_STATS_FREE](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_FREE): The free memory usage.(KB) On linux,\nthis usage includes buffers and cached.\n[VIR_NODE_MEMORY_STATS_BUFFERS](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_BUFFERS): The buffers memory usage.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6f77ac31-6018-4ca1-a8b2-fa81283e965e": {"__data__": {"id_": "6f77ac31-6018-4ca1-a8b2-fa81283e965e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "02ab8f80-4a6b-49ff-ada7-bf82356ddebc", "node_type": null, "metadata": {}, "hash": "602cd1758add8ad87fef6e9b23dc02a82330b776e7efcc835afbe86d0eadc683"}, "3": {"node_id": "e1ae2018-863e-4cfe-8be8-6449aa3378b0", "node_type": null, "metadata": {}, "hash": "0efc8d7ff019bdab2bb09432e7e3bac475c2e63bc663b7540710ac99a6bcb237"}}, "hash": "c2d8549994317ed7960dbcfc0519f0e55911bece2e492f1c2d8b00ad39dd2783", "text": "(KB)\n[VIR_NODE_MEMORY_STATS_CACHED](libvirt-libvirt-\nhost.html#VIR_NODE_MEMORY_STATS_CACHED): The cached memory usage.(KB)\n\nconn\n\n    pointer to the hypervisor connection.\ncellNum\n\n    number of node cell. ([VIR_NODE_MEMORY_STATS_ALL_CELLS](libvirt-libvirt-host.html#VIR_NODE_MEMORY_STATS_ALL_CELLS) means total cell statistics)\nparams\n\n    pointer to node memory stats objects\nnparams\n\n    number of node memory stats (this value should be same or less than the number of stats supported)\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    -1 in case of error, 0 in case of success.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeGetSEVInfo`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetSEVInfo\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) * params,\n    \t\t\t\t\t int * nparams,\n    \t\t\t\t\t unsigned int flags)\n\nIf hypervisor supports AMD's SEV feature, then `params` will contain various\nplatform specific information like PDH and certificate chain. Caller is\nresponsible for freeing `params`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e1ae2018-863e-4cfe-8be8-6449aa3378b0": {"__data__": {"id_": "e1ae2018-863e-4cfe-8be8-6449aa3378b0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "6f77ac31-6018-4ca1-a8b2-fa81283e965e", "node_type": null, "metadata": {}, "hash": "c2d8549994317ed7960dbcfc0519f0e55911bece2e492f1c2d8b00ad39dd2783"}, "3": {"node_id": "af8bb22e-953f-41ec-9763-6a971006f50b", "node_type": null, "metadata": {}, "hash": "5fbd8e0e8eab79d1e9dac26473c1176827584972f6d511d00aacc00c2d89e411"}}, "hash": "0efc8d7ff019bdab2bb09432e7e3bac475c2e63bc663b7540710ac99a6bcb237", "text": "Caller is\nresponsible for freeing `params`.\n\nconn\n\n    pointer to the hypervisor connection\nparams\n\n    where to store SEV information\nnparams\n\n    pointer to number of SEV parameters returned in `params`\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, and -1 in case of failure.\n\n### `virNodeGetSecurityModel`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeGetSecurityModel\t\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virSecurityModelPtr](libvirt-libvirt-host.html#virSecurityModelPtr) secmodel)\n\nExtract the security model of a hypervisor. The 'model' field in the\n`secmodel` argument may be initialized to the empty string if the driver has\nnot activated a security model.\n\nconn\n\n    a connection object\nsecmodel\n\n    pointer to a [virSecurityModel](libvirt-libvirt-host.html#virSecurityModel) structure\nReturns\n\n    0 in case of success, -1 in case of failure\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [read](../acl.html#perm_connect_read)|\n-  \n  \n### `virNodeSetMemoryParameters`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeSetMemoryParameters\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t [virTypedParameterPtr](libvirt-libvirt-common.html#virTypedParameterPtr) params,\n    \t\t\t\t\t int nparams,\n    \t\t\t\t\t unsigned int flags)\n\nChange all or a subset of the node memory tunables. The function fails if not\nall of the tunables are supported.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "af8bb22e-953f-41ec-9763-6a971006f50b": {"__data__": {"id_": "af8bb22e-953f-41ec-9763-6a971006f50b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "e1ae2018-863e-4cfe-8be8-6449aa3378b0", "node_type": null, "metadata": {}, "hash": "0efc8d7ff019bdab2bb09432e7e3bac475c2e63bc663b7540710ac99a6bcb237"}, "3": {"node_id": "af4f0474-0e0d-4d33-820e-807b5f0ac73b", "node_type": null, "metadata": {}, "hash": "03ab1008fd932f7eb7883f625db1f09957407f49241a9c74ce76df2c1df28baa"}}, "hash": "5fbd8e0e8eab79d1e9dac26473c1176827584972f6d511d00aacc00c2d89e411", "text": "The function fails if not\nall of the tunables are supported.\n\nNote that it's not recommended to use this function while the outside tuning\nprogram is running (such as ksmtuned under Linux), as they could change the\ntunables in parallel, which could cause conflicts.\n\nThis function may require privileged access to the hypervisor.\n\nconn\n\n    pointer to the hypervisor connection\nparams\n\n    pointer to scheduler parameter objects\nnparams\n\n    number of scheduler parameter objects (this value can be the same or less than the returned value nparams of [virDomainGetSchedulerType](libvirt-libvirt-domain.html#virDomainGetSchedulerType))\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 in case of success, -1 in case of failure.\n\n##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)|\n[write](../acl.html#perm_connect_write)| -  \n  \n### `virNodeSuspendForDuration`\u00c2\u00b6\n\n    \n    \n    int\tvirNodeSuspendForDuration\t([virConnectPtr](libvirt-libvirt-host.html#virConnectPtr) conn,\n    \t\t\t\t\t unsigned int target,\n    \t\t\t\t\t unsigned long long duration,\n    \t\t\t\t\t unsigned int flags)\n\nAttempt to suspend the node (host machine) for the given duration of time in\nthe specified state (Suspend-to-RAM, Suspend-to-Disk or Hybrid-Suspend).\nSchedule the node's Real-Time-Clock interrupt to resume the node after the\nduration is complete.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "af4f0474-0e0d-4d33-820e-807b5f0ac73b": {"__data__": {"id_": "af4f0474-0e0d-4d33-820e-807b5f0ac73b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "af8bb22e-953f-41ec-9763-6a971006f50b", "node_type": null, "metadata": {}, "hash": "5fbd8e0e8eab79d1e9dac26473c1176827584972f6d511d00aacc00c2d89e411"}, "3": {"node_id": "ebeb2d06-4a77-42ca-9f4a-8a390b84f94e", "node_type": null, "metadata": {}, "hash": "314ff144d0c4fe895a710f556b93a9d6c8b7261b3fc39651ce02ea84b0998cdf"}}, "hash": "03ab1008fd932f7eb7883f625db1f09957407f49241a9c74ce76df2c1df28baa", "text": "conn\n\n    pointer to the hypervisor connection\ntarget\n\n    the state to which the host must be suspended to, such as: [VIR_NODE_SUSPEND_TARGET_MEM](libvirt-libvirt-host.html#VIR_NODE_SUSPEND_TARGET_MEM) (Suspend-to-RAM) [VIR_NODE_SUSPEND_TARGET_DISK](libvirt-libvirt-host.html#VIR_NODE_SUSPEND_TARGET_DISK) (Suspend-to-Disk) [VIR_NODE_SUSPEND_TARGET_HYBRID](libvirt-libvirt-host.html#VIR_NODE_SUSPEND_TARGET_HYBRID) (Hybrid-Suspend, which is a combination of the former modes).\nduration\n\n    the time duration in seconds for which the host has to be suspended\nflags\n\n    extra flags; not used yet, so callers should always pass 0\nReturns\n\n    0 on success (i.e., the node will be suspended after a short delay), -1 on failure (the operation is not supported, or an attempted suspend is already underway).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ebeb2d06-4a77-42ca-9f4a-8a390b84f94e": {"__data__": {"id_": "ebeb2d06-4a77-42ca-9f4a-8a390b84f94e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6f38537-21c1-4430-a68d-a16cabb6b48e", "node_type": null, "metadata": {}, "hash": "bcbdf998ad758d13085f6df00f74d1fba374e588a7c9fde099e6d471c4e5483f"}, "2": {"node_id": "af4f0474-0e0d-4d33-820e-807b5f0ac73b", "node_type": null, "metadata": {}, "hash": "03ab1008fd932f7eb7883f625db1f09957407f49241a9c74ce76df2c1df28baa"}}, "hash": "314ff144d0c4fe895a710f556b93a9d6c8b7261b3fc39651ce02ea84b0998cdf", "text": "##### Access control parameter checks\n\nObject| Permission| Condition  \n---|---|---  \n[connect](../acl.html#object_connect)| [pm-\ncontrol](../acl.html#perm_connect_pm-control)| -  \n  \n[Home](../index.html)\n\n  * [Download](../downloads.html)\n  * [Contribute](../contribute.html)\n  * [Docs](../docs.html)\n\nWebsite Wiki Developers list Users list\n\n### Contact\n\n  * [email](../contact.html#mailing-lists)\n  * [irc](../contact.html#irc)\n\n### Community\n\n  * [fosstodon](https://fosstodon.org/tags/libvirt)\n  * [stackoverflow](https://stackoverflow.com/questions/tagged/libvirt)\n  * [serverfault](https://serverfault.com/questions/tagged/libvirt)\n\nParticipants in the libvirt project agree to abide by [the project code of\nconduct](../governance.html#code-of-conduct)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"4d3387cc-c038-4a36-b963-1cbf76a78ac7": {"node_ids": ["5c7213d8-9955-42d3-ba87-318f9501399b", "5c0b76db-49a1-426c-8f45-557e5d6209f6", "e15e06d3-033c-488f-a582-4d9cbfe4dfe5", "5e3f9eff-fca4-4511-9bdd-50e806995cc4", "d599352a-d34f-42e5-84c4-456dd87136d4", "58d7b172-b581-4425-91dc-72d8d2b68d1e", "ca88f725-88b1-42a0-a241-8758d75fc914", "a5d4d981-e4ba-48ed-a5b2-d10c5f143fc7", "4570270b-12e8-4f96-b843-6d3a87fbff7e", "bd08dbcc-3d37-4897-b11d-5673a06ef304", "be2ce339-abe2-4370-bb07-99c66abee3ea", "2403f8cc-2d66-4f08-b62a-afd998c7f2d2", "010fad0f-5faa-45eb-a4e0-62538a560fc6", "02d6362e-4847-489e-8947-fcee603d1c9c", "634f8ad8-ee5e-4a17-addc-e0e08fb620de", "c6509fbc-8974-453c-9c1f-d81cfed12577", "a32ce559-1f49-4471-9f7c-b3c7f8b8e882", "7dcbfe22-8e7c-43bc-8145-6322f630fe60", "4c87a049-09c7-4395-8ba6-3c0c31308334", "660ef555-b587-4fb4-9183-e7131608da73", "888c81d8-79a8-4f16-966a-1b4fb38cdab4"], "metadata": {}}, "b6ee2a5d-3af7-4137-acb1-282913d4d83f": {"node_ids": ["e4ec6cec-0523-4c97-8eac-40a857dc7238", "89b255f3-e437-4f42-8b37-fcb1292cfcfb", "5821c9aa-1ee5-42b5-a985-905cd6451d2d", "d971f70d-8f5e-47ab-b608-b8f17ff196e3", "e6311dd3-9eda-4477-bd2d-d775de7f60cf", "46ad0bc2-736d-401f-be71-ba554c97d6be", "107d7ad7-52a3-4bcc-9380-66805e7cee41", "1905586b-1736-4090-b50a-8fce79c4a69e", "45d94581-e19f-4128-9f9b-996a2b6a3c7e", "f3d041f9-a990-49ea-b03d-cd9252091b7c", "d9d32335-2193-40f0-893e-9417d38815be", "5329b6bc-cb6b-4347-b4d8-7e6fce07d150", "83f3255e-20f2-4f85-bbe1-af4ab457c49e", "e42a63ec-4503-4aa1-a55a-57d3bf2e9f0a", "34b936e2-70c4-4844-9a59-964456dfe02b", "11f54bfb-956a-4b64-a11b-e098695310bd", "b012d190-1028-41a3-bf50-7cdde489f2bf", "9580b141-c56f-41ba-893f-fd3c9589ba31", "d472ea12-44d2-4b5f-a705-7d365f2fb19a", "52cac3d0-f41b-4f3a-acdb-1a757d901788", "ce1e53ba-2e40-4c07-8ef1-96ab69b574b4", "1b96fe62-3ac7-4494-8b1a-7af9803a3e9a", "0034b34f-4e9e-423a-a9a4-59e9d16b31cc", "a1ab4500-88b7-4f3c-88db-ec4cf0f7a171", "0f03eba0-de0b-4b57-9690-191c94cb3abd", "915b6227-574b-459e-b3ab-b0fa2adeaaeb", "298600a3-6ed7-4c5a-b33f-f7c8a41fe0b3", "74ca926e-37e8-460f-8c05-15600a59a916", "8c43aed9-0d90-4175-a210-591a8d8420d0", "be6efeee-97f9-4e7c-945c-0371da1404dd", "fa6c6498-897b-484c-996c-158042702e26", "a6adba8d-d7f6-410e-803e-e3b0522de68c", "55af4377-5b27-4e86-9a5e-1a564486d794", "134f7331-87b2-4acc-b634-a4c65235f388", "ad086af0-6d69-4a18-9746-c1a1f8baabc8", "877bedea-1e72-481f-b795-7f1a85efd9a6", "f81e253a-f9ea-48bb-82ec-b8a9e2ee9015", "c6795180-11ba-4666-8e54-0ecb53ed8480", "32855e67-9e0f-4388-a61f-49830ffdcd72", "5471c1af-2d62-4d4f-98c1-c890bb4a7528", "1cfc5b86-8ae2-4910-832c-b3489b6cbfbc", "4de9ddc0-de95-4e3b-8369-f457a433c903", "763133ca-a0f6-4645-bfcd-ff6b0f0651a1", "9734cbf8-3919-48fe-b5bf-33d3cfc33ced", "7b056adf-d876-434f-8472-8552d84b576d", "4d50b644-801b-470b-a6d4-58f70a6572ad", "38153a6c-29d1-4950-b6c5-816c16babf6d", "64ed6eea-0bed-4bab-bf2c-88b71d040353", "a57d837d-e570-40e5-8bbb-31e991e116d2", "96c0b7c2-8dd2-477e-939a-c47f02a83e74", "ad344d8b-09fe-4915-a31c-ab5119d9c29e", "535c7947-183f-401d-8033-8cb7fd030b2d", "c92fbfdf-d7a7-4c6c-8106-d0836a7b0db9", "8ee191d9-ee5d-4011-9605-e47b6f8bf0a2", "302677d6-9ee2-422c-82d8-c4a77f7a4101", "ebac27b8-9f2f-4982-aa1a-1fc31f17cbfa", "2fb21ab7-4cb3-4be1-a4ff-b77902f565b8", "bc1ba310-278e-4a94-9e98-18a31080ada5", "cab725c3-a5b0-4f5f-b3c2-6ebe776864d8", "4c9269c5-076e-4249-88bb-4365580459c6", "6416223a-b3d5-4528-acf5-bb4ffccfbe85", "7a29816e-aec4-4c2c-8f6a-f3a11d288eca", "b85b6e24-f6df-4b6b-a470-ee6fcc2851da", "a87b1d6f-9b7f-4a43-b1fb-15ada0889f56", "e77b7044-6c31-48b9-b59c-5dcaafc4335f", "2581f9e9-1a1e-46d1-80e1-6e57054fca54", "47ca7d6a-dcf3-4f63-8b5c-0c3161f05feb", "2fa28ff6-46ab-47d6-b051-0c8a826a5d27", "5ac004ba-92fa-45dc-bf55-8c4dbeb82fc4", "3596a8a8-ca85-47cc-8d89-d5ebf8be53a4", "fb35cca5-7833-4c3d-b779-d258881511ab", "5af123aa-cd9d-4868-9235-e6204eec706c", "6825a01d-b377-448d-a63f-43e4f13f653e", "81fd3969-2b18-4b6c-b078-6c3cf6bb70cf", "cb5b8960-5ecf-40b6-929e-6376cbee6516", "7e9f4602-db6e-4328-b90a-3c10018a92c0", "8338732a-ae04-4256-ae52-91cb2eeba798", "3baf1305-2c48-49a4-9a62-ecba00fbf6ae", "104ad691-9035-41b1-b09e-bf4bcd19b999", "543ed356-8bb1-4d4a-9f45-6146e085c083", "beb0514c-9b23-4860-a86a-2e45055b5fb6", "5d4d529e-7015-4a3d-9fdb-7fca4e5dcb77", "60dc5da6-2440-4ba2-a718-7297c4589354", "01d3107e-bf7c-45e8-a60d-b2a659ddd0f6", "21e6feac-9169-41eb-b0d0-18749a7cb54e", "94017d59-32e1-4cc8-962c-c7c04b126ca1", "09272dbc-82cf-4e48-8144-0d78033cc81d", "d22954ac-da60-49cc-b13d-bf4b7d1263b1", "95edb3cc-a0b5-496d-bf5c-1a8520224322", "fd193a71-522f-4a0c-bc1d-6962b6e391bb", "d103b0ce-3608-4719-a183-f2645553bc1d", "2d04edc1-6437-4098-b808-11a8c7e7cdbd", "a034edf6-a676-469f-aa26-a867fac41e64", "83c8241a-72e1-4bff-899e-d441a4cb23a1", "1a665c6b-9a9d-40b6-a4a9-c811655462b8", "597b8bf4-8db7-47d3-a820-946d6d509ddd", "6ddf095c-1289-4983-9061-15b7c3004b9c", "9e56aad0-48e0-4cf5-89d0-aa5d4d03a294", "bdbfc0b7-0e1f-4ce4-81bf-07f08709cd7f", "64bcaecf-d079-49b6-840a-dff997c7ee36", "13a9bfe1-739e-4e1a-be1d-b7b7b726e903", "6c5d9b0a-0977-4b92-b7aa-c5f18a9baca9", "4148954d-4e92-4adb-8107-d3e6aec9ba45", "031e39d3-658c-428b-b973-dd1da9cb10ec", "e5cfa07a-23ab-49cf-90d9-df40f506facf", "82a7e826-e524-4927-9f85-0949242e8473", "d949308c-c2a7-4952-ae95-3eabd875208d", "d7c5c25d-bf9e-43f8-aa37-84f0f328d7a2", "a4d00f3e-2f73-4500-b131-17a5006b78d2", "cfd0f8e6-9ad2-4019-a317-8b23aad0e126", "9f1f4902-1771-4eba-8d42-8624b0f0339b", "eb4075a0-c766-4f24-9589-8a0db6da6725", "08af6f2c-6674-4f5c-b593-a71457dbdb38", "dd82462b-3dc1-4602-a3fc-6012d1df7c19", "99647f0a-5a82-4be2-b2ff-e18b92791af5", "4b1c2e46-a306-4af2-9cc0-634f5ce72648", "77aec93c-0d8a-4087-9251-304942430daa", "64ab03e9-5918-4dd1-a1bc-95ea390ebeb2", "0fe610b8-dff8-439b-b2e3-1fd8fd009662", "4a0932b2-5250-4a5a-823c-560e3cd23fc8", "fe27827f-7ab3-4d7b-a1b9-8f058de8bcd4", "c9aff5b1-1ed2-41eb-bbf9-e643dffd8e25", "f82f96ad-e643-4731-93a0-bd84c9643fc7", "99b1fb4c-a650-4b17-811c-049ae96bd2da", "a4a711a5-5017-4855-b3b5-a38a63fcbb67", "0b0ad2af-b753-437b-991b-26b0879f6310", "87f63bbf-c93d-4568-b1b3-b3621d0cb3fb", "933fc983-492a-43fe-8989-7308c581393b", "4546ceeb-fe4f-407f-b0ee-c2cd298d38eb", "bbdba14e-9e0d-4393-bd71-4287e239b4a0", "55541e77-6969-4876-895d-dc735ce6f8b1", "aa212227-e33d-4d8e-8455-c0c5c33f6422", "1524f24d-97f7-4cc4-80b6-564b3358c576", "ad3f8ecb-4a54-4e57-ac9d-3e75931eed31", "0dc53bf1-8892-4b35-8d70-1078060046d2", "095943dc-d304-4903-a29f-edfab5d96b1b", "cf2984aa-80c4-4828-a0ce-6ff57d1ecb8f", "bba69e7a-64fc-4a42-b520-7d112e622d0b", "e0204f56-beba-48d6-b3a6-a29288ba802a", "788523f2-d1c6-455b-822e-fbcac2e2a1f9", "ec0de399-d087-417e-b8e2-72fd2d0b2017", "411f3ca6-7a79-4e46-8800-67fb4d2a15e7", "da8eae06-9e1d-4618-a886-9aa2144e2eec", "441215d2-a07d-4fa0-8df9-0896b2dd437f", "12f33dab-1902-4176-87e4-ae6686752c11", "87cb5a15-2130-40a6-9586-d587d1f62c78", "96d5c897-27f3-45cd-8bf8-4fe90ba58ff1", "10108b78-e582-44e2-984c-b13f87901acd", "0b142d71-fd14-4036-804d-6fbcc941be36", "6cea54fd-6a4e-459b-b49a-f2ad5f315902", "e0afd5ab-1777-4944-be12-d86aaa4e5216", "e9ce2189-aad2-4dea-9596-a87e58b6bd68", "378a319d-ba7f-43d5-9503-d29450d3cb90", "df20575c-e277-40a4-90d7-d3ae8fb6075d", "6dec25bd-1ad1-41fc-968c-52f3321127df", "0ec84e7e-7a55-4f66-9018-29772647fe6c", "8ca52a58-d585-4b5e-ae59-9db6cf14b295", "ac811536-847a-47ca-8f3e-a2e87f4023e9", "2035275f-d8a5-4c93-b7b2-cf4f6112b6dc", "aa3d4e47-9065-4679-aee1-3c2df7f6d712", "dcf71aa7-a722-4f6e-a81b-aabf2667dc51", "4d63f075-23b5-4c19-8624-c9295d31b087", "48367264-0545-48a2-a564-df66fa906d31", "e79ab2de-0a9d-4dc1-81bd-eb6ceafb5a5d", "9046addb-aeca-420a-a03c-08ca61c5c6f6", "98917491-b8c4-4068-b451-5b3edadcdf80", "d066e457-2cdb-4036-965e-623ad8292e36", "a2c17af1-c3c1-40b3-845e-86b0d8136208", "6d8ec35b-bda4-4e5d-a785-aa106add4038", "e495132c-128a-4b85-95c5-258dc725ae85", "0ffd68dd-4f6c-4c71-a965-124a9381b7c8", "95b65167-f6d9-4d72-929e-b2cb1d8c9d07", "34d0fc91-01df-49f0-856e-91af0e62b972", "e7a8ace8-90fa-4554-aefd-ccec1f015205", "e666b821-638b-4c43-9f23-0f7c4cc52a15", "8035a02a-9c3a-418a-b54b-f8107e931162", "28d8388f-0690-4f7e-8fdb-d35a154893f0", "9e84adfc-32b4-48dd-abc0-24d4811d1e84", "c2c07490-8618-4e26-a85e-e9d012f661d9", "e18c1ec4-1adb-421f-bc45-71ab2ef31e4c", "8406870c-a5d4-4f23-babf-679967d7e0b4", "e92963d3-1bff-4e58-8e8a-e5b9e5624781", "a40163aa-de78-45c0-b7fd-f87ff4406360", "2d07b553-f980-440d-bcbb-7105d4f884e7", "53715863-f339-4ca5-be49-ac2c5883d383", "0d8a6e98-7a30-4d90-8e34-728b49da9ae2", "6ceac222-7b5c-4edf-9839-57ee71c1ea5c", "ca8c93ab-f548-48a3-b763-d32c61d693fa", "9ba20d0a-1e18-4b95-a8d6-6f38714ce1de", "3554bf83-77a9-469a-aa74-68327820b1e4", "1cf11199-7d0e-4a48-89ae-46e3f0b06c77", "713f654d-f74b-4391-b5fe-402e9ee7bf47", "acc7fab9-808f-493c-9147-51d3fad7f0ff", "3c41d8fb-e581-471b-80b5-436173358cb9", "498631a6-1f34-452e-956e-e03fa8b2aaa9", "960628a2-2413-477f-8d23-cc7417ad29ee", "099065a1-80cd-4559-978a-8e982354fe2d", "35f1ea2a-14fb-4464-959f-765241651620", "fe733a9f-4a17-4d69-8af0-ba704695cb04", "e28d0965-a881-403e-9c35-c6f06594531a", "b359862b-a811-4d64-bf7b-90664d5bee25", "ded37917-dd74-4324-89ad-9a6e5f5f4f7a", "28f9a2be-b312-4ec0-9ef6-f56ccaa9d2ff", "d8fa0a7a-b77c-4d99-b85c-3e306195775c", "cfa151c9-d76d-4e4c-83d0-863705425860", "84827a58-64e3-4d48-850a-71263795d798", "e07bf4d2-4ed6-4964-a1fb-67dc2a251b5c", "243c37ad-3113-4a40-9db5-d3a7a55324b7", "ca13ba7d-bb73-4917-ab27-465cee2a6a2d", "57bdade4-f52c-4db8-872c-efb0e11f6880", "a99cc78d-c1fd-4da9-bbfb-cea9bbba1a22", "057c3646-fb64-4d53-bf47-1ff6f7ee59ae", "1bca850e-d2fc-4a3b-af2b-7946e576a5bb", "c5b97557-eaf4-448e-8add-41bb2ebda531", "1bce59cb-fa8d-44a1-8c82-686707d2cc32", "2b322489-5c98-418c-aa59-ab6d53eaf160", "58148b8f-2a33-48cc-a1b9-2b18c98ca633", "5214dc12-96af-4eec-9901-25774521d78b", "89853cb1-f9ee-4d28-9729-b16f37118e16", "590e344c-14cb-406c-8294-75b5c71b2a7a", "662ddfb4-80ef-4961-9925-8a3af6d6d8e5", "0a0ae59c-d49d-4310-9b59-26ca334f467f", "f7b2112c-af8f-42c8-9b3d-19e8ee7ff767", "0c996bcb-7391-40b6-974e-87f16de0d430", "6241709e-0424-4da0-bcab-e171420abfe4", "f51521bc-46e1-4c43-86eb-3e2e04f63287", "52cb126a-24b8-4b5e-8c79-2d2c3e0d0f81", "3aaa549c-7068-4369-b75f-a30d7715a4cd", "6b134353-ec7e-4430-b8e7-a122d9040d20", "3157aff3-116f-4e04-b81f-cccee957f5f1", "620145cd-eb5c-4193-974d-4a70e7747bbd", "79b82724-33d3-4db0-abda-ab04edd56f65", "24f77309-320f-4c5d-9224-2bb951ccf7f3", "bb0a8f25-5f30-4757-a987-a6a6031f5a97", "b8a769bf-038a-464a-ae59-985e8d0495c7", "26e93bf0-cb48-4544-a26f-849a883e7f22", "57bcc06c-0f05-406a-9f4c-037a64f4957e", "8c6ea19b-e24d-4612-b407-23faf71b73a9", "748bacc0-46d0-46c9-9bb3-196e14cd9ab6", "456f442a-b859-43b1-9296-770c722bb961", "78c17330-0bfd-42b5-88cc-190c63103182", "1bab4f04-f762-4de5-b5cf-7719943c38eb", "501aecb1-0b9c-4c4d-bede-05b03e78bf38", "56c2bdc9-465d-43f8-9c57-c8978ae2b4d2", "4433f5b2-256c-4457-bbe4-d278aa9538fe", "b7f767b0-4195-444a-8d6b-7ab09bf3b682", "78fb97fc-41d3-4e8e-84f5-12afe7b4c5c5", "9910e3a9-b5c6-4bc9-859b-4f7a6f8f75a3", "5671496a-1628-43ee-a9a8-54774d75a24b", "9c326316-647b-4aff-a227-cc717c5cc122", "97f6f4d6-56ac-4e35-91fc-a2c73078f07c", "5c6f41f1-454c-4bc5-9908-a300cb647814", "70549b44-86d5-4600-bf79-a3e671936e29", "65e526d0-0e2a-4400-812b-876f64458384", "f24022e0-e1f6-4a52-8752-a26719bb3cb2", "d06f9ca3-b2cc-4773-85f7-9183db1bb8af", "89eec67c-46d1-4b22-9c63-94346eb2838b", "a605e421-dcc4-4afa-85ee-89a288db5d3a", "bc3e38ce-634a-4601-8a02-bb1b1f6cce9b", "25d9ac87-180a-4db3-bd68-5fb9f2446902", "539bfa51-8fdf-43a5-a0f1-6545a6da7d6c", "f8c87dfa-a189-442d-83d6-962496cbdb33", "35c814f2-19ab-4320-835c-10736be26a3e", "a6895752-fdf1-477c-b3f3-5ec04c8df762", "1945a342-c010-437b-942e-4aca09cf784d", "1c9f2c2c-fb18-4df8-b213-2f1bcfb300de", "760c9933-2f0f-48dc-a78d-ce6f4ed4fce3", "52c5a8a3-9ec9-4000-8ae6-23aa70292bd3", "79abd010-3a73-404f-92c5-6c7d53ade8f7", "d3df132f-0b27-44db-9b80-061faa504b67", "f73f9d95-5c1f-42f5-9f9c-f937e929c23f", "9218771b-bf1e-44f3-999b-b3fe84067247", "8404ccfd-6467-4bf4-82cf-5bc9a8b2ce8c", "f86095e1-5348-456b-8568-76fd77fd09b8", "c8784db6-0a2d-493d-9c90-be0a6ac71036", "0675d9da-cb75-430d-99ec-38d765a840de", "d270b055-0ab2-433d-a1dd-fd005123817d", "09de3d53-0008-411b-a2ea-2b4156d2de6f", "84ba11b0-dad0-418c-8b37-8f865e1d0743", "606e2612-cd8d-4126-9b0d-c0ac4cb148e7", "7a53ea1f-57c9-478b-8c0c-818872c024fd", "289ab008-1e36-4d84-a2ec-ce3fdd947cae", "e0afff3b-1044-4c3d-b448-0b0d532cfe70", "c7f5b3ce-2815-4eaf-b04a-d6d23d451049", "caa20907-9305-4e2d-a70e-c3fe4ee2073f", "c78edbbb-3545-49bd-b784-e44e443973f5", "290a11a9-2638-495b-89e5-cfb9ed3d86ed", "fd6a304c-1da1-481b-a909-b87341899aa5", "c1d70ff4-4a1d-4637-b7ec-c7b68409fd2a", "4954cf34-3a02-4c6a-94f4-88d0b33a00e0", "0155cbeb-1ab3-4158-9036-d3c926c00206", "97242db6-b061-4453-9d20-67cfc43a9d90", "24c8b5bd-5a32-4d42-a51d-84e627bcca17", "2e0cc0f1-bc75-4ad7-826e-68d99882a50e", "334cc6c0-c82f-48ad-bd1c-a7a0429ecd50", "f1fd6220-5b6e-40a7-9c2b-6e100aa4e1f2", "3bcf3d27-d77f-4a9f-b911-240ade3dc5ce", "3400b622-640c-4514-a25e-a68691e3c343", "463fb124-4016-46b2-8e15-832b8281bd91", "514c3283-9c7e-4327-8e1f-82d0bf0c5c68", "532676ed-8b5d-4734-81dc-cf356ac825e6", "d76268d7-4943-421b-ae35-2c755c165ac5", "4bf28811-1f6b-4ec3-8d45-118212c31f4d", "2a80f226-7f5e-49e1-bc1c-a3dae0bc79c5", "57628bfe-d8df-4979-a55c-2971e0a841fa", "6e25327d-870e-4326-bf2b-d03d6d0991c3", "a20dcaf2-9d40-4b69-be8a-bbe4a177c6bf", "e6ef620d-5c40-4c63-b223-118c47a666aa", "f46fcc2a-72f0-4892-91f8-fd454a27f23b", "6e387dea-7e1e-4563-b577-860c14b776aa", "d7b500a6-cb8a-4506-9351-7f9dc77d62b8", "2a34c5d6-5332-4cdf-aa48-f3f7b62c90dc", "44429442-8eb0-47c7-b375-bb2ce61967a2", "15508e5e-0581-42c4-bb89-c1777f8aec41", "a12b69b9-32d3-4654-84d9-5ccf44aaab78", "0f141aa9-1d06-426f-a202-9312385e98bb", "af85b08a-f762-4125-a462-e2afbc382b44", "8f092559-9129-4bcb-ad8e-ec1d02c05105", "0e22a0bb-e09c-4b99-bfdd-d0ba3d0ffb4e", "ef0f0af8-58d3-493f-ade0-e1cc96ed5471", "4910be66-9ce7-4b97-862f-ec1430d3b0a6", "d21a99ff-d968-40ed-9a7e-851effe1401f", "2432c949-d88b-4f2d-8420-eecf72cea2af", "0e61edcd-513b-4a73-ace0-cec982777d5a", "d24dcf59-7884-4cf8-8837-ad3765b8cf11", "f803dbff-382a-42fd-96e4-bdf47ea5c6a7", "fd104015-ba87-478a-bd72-84d720e0c592", "6f266d74-7a01-4642-8932-8d5f09171b4f", "6982ef1e-1f3b-4380-b2ff-2744579b44b5", "8f6bbd47-204f-427f-a4a7-e49c25ec7720", "7865805b-71e2-4d98-85ea-d90e918c2416", "2b2352f9-72b9-4f78-a12e-03cafd82ccda", "7885748d-4824-417f-8e71-0b3b85e2bc96", "b0b6d920-d008-49b3-b8a5-eced697cba1c", "f027d6b4-e46a-4fc4-a746-d37a9a307717", "3b40ff6f-9d01-47f9-a7a8-efc5406de9a5", "40bc3006-e6e3-41cf-b6a4-dee791ed4b1c", "7d4dd152-ca51-4e2f-92f9-433bb245eb23", "46a4cc72-a262-40fd-982c-05f328ae66dd", "a608cc95-c465-48dd-be03-eb94cdd1dbd5", "3e33e71f-b85e-44d3-9f7f-57bd04119494", "510629fe-d7d4-40ac-a2f3-33f8c8c0fa53", "7f0412a6-7eeb-48e0-8d34-2147df48f6dc", "2b39f35d-3b0f-4b6d-8cc3-e8844d76de75", "edea8ca3-456e-40b8-9167-d24124f2631e", "a482a5fc-63d2-4747-a196-f1038aca092b", "24e907aa-0358-4f45-b5bb-49c43cf8c6b8", "9a57b1fc-8b95-4e50-a1b9-8d1c10815161", "bdecf87b-33d3-49cb-a600-360d03e9b8d2", "17fd0707-1c16-463b-8bc5-f4709ae55110", "8f2454c6-856b-4c9b-b808-6219a0542efc", "84d11f64-94dc-48e5-af36-a4577d050866", "1d2421cd-bd4c-42e0-bdcb-dc215cbac9de", "81f09c74-4561-4332-b0ff-9db38cc28347", "8c6e9ecd-d81c-4a8f-87e2-691a1a0dbfc0", "daf5e4ca-eea3-4dcc-945e-144e75e1719d", "7ad4a1ee-b3a0-4513-b317-7020c6fd75da", "54560b36-c390-42c4-bf35-861f4c2b5599", "16b1d492-bb21-42d8-bf6c-68d079c32b89", "f9e3ce0f-13c1-4e68-8c63-602006adce55", "a3d1df40-6f0f-4028-856d-7e57a08b5672", "218d058a-1b68-4c3d-98fb-96746e238c29", "c57047e4-7fb3-4405-b7cb-2c7b4cecd722", "67f5825e-d5a9-46cc-9734-cd7497c3baf1", "8b86fd27-9e7d-44cf-85be-a4d5e6ed2196", "19d95440-989e-45c2-b87f-02c0f664fee7", "8ea4a0e2-c936-4b5f-9ab0-61b584cadca9", "d58f7ddd-b2b1-4341-9331-986618345a8b", "7211d210-1003-4227-87b2-d2ec1f0e7798", "0b446208-8b50-4e8b-af3b-58788a7956c9", "8e63e2e3-4b8d-4476-a415-d9027fb7747f", "868ad7f1-e837-4dda-a74b-692b0cde81a4", "353eb641-1503-48e5-9172-fe9629aec9c8", "81f3b61c-656c-47ad-b6fe-33154626a6b5", "17efb5fb-a9e0-4119-9d43-24e3663d088d", "7753b39e-99cb-4de8-ae3d-f56f575a5c7f", "e0a4e287-e6d1-4257-958f-d6337536e3dd", "3850ab66-8bc5-4b1e-b46e-e84386a203c9", "11b0bfa9-6732-4b08-9ee5-869e76274a83", "43a0c982-8138-4314-bea8-0ebfebf242ea", "9eee04ee-9e4c-46f5-bcc5-d5ae008c5ad2", "16b9d8ee-253a-4f29-aa9a-1629aad57eb2", "171cf179-468a-4632-90a3-90922536712b", "0aeb5376-9498-4d11-8e3c-dc3f85882cd7", "253706d2-33f1-4359-8e84-dc46b5cc2f59", "b41d94a6-83bf-4041-b558-9d487f4e66ba", "16828afa-adca-450f-93ca-8728c83fa833", "1520c8c5-b1c6-4d4c-8324-69c7c1834e85", "3b7792b9-53ea-4106-bf44-e7a33ee7b642", "78e7cdf5-faf4-46a2-baf3-d820e40b8574", "a1ad0615-5348-4fbd-985b-be4a2339c9ef", "d4b5225b-646d-4cd1-981f-ecf69e6edb07", "edfebfb2-a7ce-4e21-8306-926c1048d2f7", "668af9a0-a955-4425-90e4-39afef40e0de", "2e8a7104-4d11-48d9-a394-311bf329b5cd", "70b28e79-7a7e-4887-bd39-205ca0d7ae4d", "e686bf20-07d9-4192-80ed-bf91e01c5d2d", "c80bcbef-751c-41ec-a783-6ec202548f42", "f764403d-3695-45c4-80e1-07901c3428dd", "ae9987d6-ad34-45d4-bf96-5ec5718aee12", "add29601-5205-4f92-bc3a-88b5f0cd84df", "40372cb9-3aaa-438b-b124-c62006010334", "4a2725ef-2862-48aa-8d25-01f625130c6e", "d4265bb8-f55f-4f50-8ce9-3cf3543567f7", "319b0b44-e912-4e10-aa93-2e167cf86e24", "32ddb322-41f6-4e3d-96fe-853f2850ef8b", "7dc2d2a9-76d4-43f6-a68a-f34847ae9a04", "aaf30cb2-7643-420b-9064-ab6ca003776d", "c1a4fddd-52cc-44c0-b2c4-020defcaf56c", "dbf0a499-9bc9-417a-b5fd-a6718fdac943", "65f72616-235c-4e38-8de1-3ba896e7c2e1", "155f65b7-75fc-4446-944e-e498f4d77238", "29233394-3e75-48a0-aa7a-4665fe2c925a", "d47b9eed-b380-45a7-b64e-1d66172da6ee", "44f0b2a3-3e5a-465d-893c-31743c152105", "a562e13c-99ac-422b-a42f-8117d2f87abe", "53918cb0-5e80-49e0-a6d1-4731f3266065", "ec6c7e32-2c51-45c8-aba5-9aae1549fec0", "d1d9ea1a-60b1-4c9b-be4c-d6d743cb4c1f", "bab7f7d9-793d-4a00-9d0b-bf704356803d", "9bd19d37-ef78-45fb-90ea-eba59d81a937", "dd152bf5-c218-4cbb-ba45-1b1e764f0c55", "8fb231e2-4f90-4b14-8468-3d07ac773290", "a3b2df74-c935-4ea8-be5f-ab288d756178", "01d93d25-7867-46e4-b201-3ee6f1516a87", "4d19174a-40a9-46ed-a89b-355616066ddb", "20d27745-ab79-4f2d-816e-3104ea19f2e4", "408b0757-c397-4a23-b836-8413cbb8a120", "91b9eeb4-ac51-4cc5-a199-ad89a85aa15b", "ab939ec0-2e0e-4e41-aea3-9c960e73e267", "40918a8f-eebb-4afb-835f-2d091811b08a", "f488a81e-d260-44b3-93de-213eabd52706", "d7135721-670b-450e-a297-c358a9b74c97", "0d38986f-d6d7-4d44-9128-375ff38e54db", "8cac867e-9547-4cc3-b860-be7802b0ab51", "00521dd2-3c1f-46db-b732-1208f10f3d84", "d62f6427-b444-4436-b923-9807bc98a99e", "17dccfe7-959f-4289-abc2-e4473af0f6f0", "b152c13f-7ba3-4446-b2ad-7c88fbad7255", "26cd940b-e8b7-4239-a43e-83b3281aba37", "47e1def3-ea7f-4b3e-b19d-5c7ffc913fbd", "63d52fdd-238d-4e14-97ea-b6902d4d43d9", "752ce547-a0b6-4c98-ab51-b1b24383af77", "5908c659-760b-4994-a57a-b6d413067a1d", "f9ec66e2-d616-4cc8-b08d-7a01065a920f", "6cb3212b-05d0-4279-967e-9e0d7010703e", "c8b18fd3-edaa-4957-9fe3-70cefb75a219", "709622cc-616a-4b2b-b4af-1be817596fa9", "2acf1a42-ed1d-4f13-9005-d21b27cb406f", "4239f2f8-03c7-490d-a01a-eba7cda70794", "a7e0a69a-c6e3-4bda-9e5c-3212d0daa1dc", "cdefedec-9863-4033-9f58-0fb02ea90186", "cd7a7fd5-3657-4aa7-acbe-cc9cd52388e4", "1c4f62d5-c087-4442-871d-0f254d498802", "697efad6-3110-4218-bdcb-1c228b50d21a", "58c7eaed-dbab-4144-89d3-c9300a5953af", "1d3ce02c-3ca1-41bc-a8ca-a23501af4b36", "a03633b1-2fc3-408f-9ddd-d832989d7584", "92883c5c-bc5a-4abf-81f0-48e0708f6aa0", "dc516459-8dc2-4cb8-9980-9b8e61ed7fca", "56ccd739-12b5-44ec-aa91-611e4b51506c", "df8d2576-645e-4c4b-9c85-017c79c2748f", "e6d0141e-7999-44a0-83d1-455981ae31ff", "542628c5-247c-410a-8f88-d2f8b2b4447e", "fdbbfaea-1de5-4aed-a91a-a56dac92bbb2", "27a3ec13-1887-458d-ba26-545296203652", "27244290-e0d1-41dd-bfba-545992691d71", "7ebace69-15d2-44d1-9d39-3a370478548e", "258c1075-4e40-4b9a-adf0-d983d66b790c", "a76a9ace-ab5f-4f4e-beec-8151f85b60aa", "988cc3ed-e7a5-4b6d-88ea-e537ccc364dd"], "metadata": {}}, "c6f38537-21c1-4430-a68d-a16cabb6b48e": {"node_ids": ["a0a58d4f-d41c-4d99-8d61-9e5b67eda42b", "5e867e6e-1b67-43f0-acf9-597030caeada", "2c006329-564a-463c-bc72-8cd76f8cbaa3", "21d42433-9020-48b9-9030-a21655cebdbe", "c9f0c1fa-9976-4ccd-b10d-86f186d34c67", "a3aed14b-b2d8-4b0e-9c00-893d3b72561e", "c3e0e76c-c5d7-452a-91f2-b2ef4c46d23f", "2c60cee0-3c5b-4760-9faf-26027afcd2e0", "28b4abb8-de97-4bf0-b20e-d41cbabf21c7", "c94417e4-61f1-4545-97fe-5fd42530da37", "b937cc92-b505-4a7c-be3d-2629c06df59c", "eca07f71-af5f-47d1-8c1c-78deba7637df", "96c6d06a-7df9-40dc-a46c-e11aac3c6fc2", "e041cf85-5bb6-47d5-a0f8-3d3c8f547025", "2a1af6cb-041d-4c86-9f44-9a130adf20b7", "631da2d0-4782-4beb-b02b-8dfa0d1664ec", "d76bcd6d-9def-4f3f-bd23-518d72311940", "beef3088-792c-4802-8a67-2d955e94665c", "11661390-1048-4e56-97bc-7c6779c65e7f", "4a5d1358-b36f-4426-adab-7b8f3dbdf50a", "78c39e61-4f77-4657-ad1d-b19693fb7be9", "10116b06-2768-41a2-8c27-85a2fcfa9ac7", "4cd26ab6-fcde-4333-bf48-d3a3153eb08e", "541c7388-228c-4530-8be8-b096a7f6de4f", "b010e078-4cd9-4b00-a10e-f5e080d711b9", "5766380f-047e-4bb3-aeff-1439f1825321", "75cb5934-ecc1-4c6e-86db-4fbaa68c92f3", "4b4f83ab-7e58-4d44-8dfb-f1ae59c8f824", "94b0e0f6-c30b-4a4c-8cbf-39a1b33492e3", "5e39a3d5-764e-43db-9ac1-115986f817fe", "8a6047a5-1b6b-437b-a28c-22693d223eda", "6bbfbb2b-9927-41a7-b644-27482eb95d82", "e9e644e2-e8af-4f8a-8939-4b39fdd69cc0", "7071e691-c6fa-44a3-8c35-92c59c0f0cd8", "db0241d9-5a1b-4bb3-bdd2-3de96c12db7e", "b87f1f02-25fc-4794-825a-4542dfc81a37", "0b500aad-c078-4271-80aa-e01de1bafca9", "c7dd3bac-d6c0-42fc-b076-ca0fab28ac20", "510c62de-0e71-48b7-9bf0-130bd2f6c6a4", "a8eac4d5-dab9-46ab-9649-71b7fe1f32a0", "13b69377-ab2d-4412-b40b-ea34e2360974", "6475c08b-89ad-4f27-823b-b56467d3070d", "fc5db8f5-6fc9-41ee-ab6c-ce2708b42fdb", "9eca9b7d-c9a3-4fbc-8415-a7d06279d9a4", "6354e734-fd8c-49e5-98da-b705c33b2c19", "269dc7ad-d7ca-474d-9c4f-7d2e61eba086", "9d35bd40-163c-4ed9-9001-b327034b5797", "f8f06fea-f766-49b1-b08f-5f3c296b3a01", "25484219-8985-4b18-82e9-b0753d52551d", "0bfd2629-f248-4e3f-be7e-a112bfc5e9c6", "de2b5ab3-7f6e-4d0d-80f1-a2b0ea18ed2c", "30184b58-2f0d-4edb-bc7f-6bd03fdf299e", "ef32cb72-824d-44ca-b858-ccd913e0f21a", "013af4e5-e4f6-4739-a331-234920a73988", "4739b0de-90c6-4635-8fd3-e9d6979fe17a", "5aabc438-0d8f-49aa-8c35-a1c20a08fb92", "2e15ce01-c37e-4fc1-aa7c-a399c537f7af", "df4e3efe-d6ac-44e7-a829-10aa07630547", "4743b490-c7b0-45cf-831a-50821ebb701f", "c5ba7e63-fcca-4011-b5c5-523fe68fa005", "02ab8f80-4a6b-49ff-ada7-bf82356ddebc", "6f77ac31-6018-4ca1-a8b2-fa81283e965e", "e1ae2018-863e-4cfe-8be8-6449aa3378b0", "af8bb22e-953f-41ec-9763-6a971006f50b", "af4f0474-0e0d-4d33-820e-807b5f0ac73b", "ebeb2d06-4a77-42ca-9f4a-8a390b84f94e"], "metadata": {}}}}